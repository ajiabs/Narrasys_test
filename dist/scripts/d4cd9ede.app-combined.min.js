'use strict';



// Declare the top level application module and its dependencies
/**
 * @ngdoc interface
 * @name iTT
 * @description
 * The default namespace / angular module which houses the rest of the application code.
 * Officially titled as 'com.inthetelling.story' but iTT seems a little less verbose
 * @requires ngRoute
 * @requires ngAnimate
 * @requires ngSanitize
 * @requires textAngular
 */
angular.module('com.inthetelling.story', ['ngRoute', 'ngAnimate', 'ngSanitize', 'textAngular', 'ui.tree'])

// Configure routing
.config(["$routeProvider", function ($routeProvider) {
	$routeProvider
		.when('/', {
			title: "Telling STORY",
			templateUrl: 'templates/root.html'
		})
		.when('/auth', {
			templateUrl: 'templates/auth.html',
			reloadOnSearch: false
		})
		.when('/user', {
			template: '<div class="standaloneAncillaryPage"><div itt-user></div></div>'
		})
		.when('/stories', {
			title: "Existing narratives",
			template: '<div class="standaloneAncillaryPage"><div itt-narrative-list narratives-data="narrativesResolve" customers-data="customersResolve"></div></div>',
			controller: 'NarrativesCtrl',
			resolve: {
				narrativesResolve: ["$route", "$q", "ittUtils", "authSvc", "dataSvc", "modelSvc", function($route, $q,  ittUtils, authSvc, dataSvc, modelSvc) {

					var cachedNars = modelSvc.narratives;
					var cachedCustomers;
					//if use visits /story/:id prior to visiting this route, they will have a single
					//narrative in modelSvc. We consider the cache 'empty' if the only narrative
					//in it came from loading data for /story/:id. Otherwise when they visit
					// /stories, the only listing they would see would be the narrative from
					// /stories/:id.
					var isCached = Object.keys(cachedNars).length > 1;

					if (isCached) {
						//since this is going to be displayed in a dropdown, it needs to be an array of objects.
						cachedCustomers = Object.keys(modelSvc.customers).map(function(c) { return modelSvc.customers[c]; });
						return $q(function(resolve) {
							return resolve({n: cachedNars, c: cachedCustomers});
						});
					}

					return authSvc.authenticate().then(function() {
						return dataSvc.getCustomerList().then(function(customers) {
							return dataSvc.getNarrativeList().then(function(narratives) {
								angular.forEach(narratives, function(n) {
									n.subDomain = modelSvc.customers[n.customer_id].domains[0];
									modelSvc.cache('narrative', n);
								});
								return {n: narratives, c: customers};
							});
						});
					});
				}]
			}
		})
		.when('/story/:narrativePath', {
			template: '<div class="standaloneAncillaryPage"><div itt-narrative narrative-data="narrativeResolve" customer-data="customersResolve"></div></div>',
			controller: 'NarrativeCtrl',
			resolve: {
				narrativeResolve: ["$route", "$q", "authSvc", "dataSvc", "modelSvc", "ittUtils", function($route, $q, authSvc, dataSvc, modelSvc, ittUtils) {
					var pathOrId = $route.current.params.narrativePath;
					//this only pulls from the cache.
					var cachedNarr = modelSvc.getNarrativeByPathOrId(pathOrId);
					var cachedCustomers;

					var doPullFromCache = ittUtils.existy(cachedNarr) &&
						ittUtils.existy(cachedNarr.path_slug) &&
						ittUtils.existy(cachedNarr.timelines) &&
						(cachedNarr.path_slug.en === pathOrId || cachedNarr._id === pathOrId);

					if (doPullFromCache) {
						cachedCustomers = Object.keys(modelSvc.customers).map(function(c) { return modelSvc.customers[c]; });
						return $q(function(resolve) {return resolve({n:cachedNarr, c: cachedCustomers });});
					}
					return dataSvc.getNarrative(pathOrId).then(function(narrativeData) {
						return dataSvc.getCustomerList().then(function(customers) {
							return {n: narrativeData, c: customers};
						});
					});
				}]
			}
		})
		.when('/story/:narrativePath/:timelinePath', {
			template: '<div itt-narrative-timeline></div>',
			resolve: {
				product: ["appState", function (appState) {
					appState.product = "player";
					appState.productLoadedAs = "narrative";
				}]
			}
		})
		.when('/episodes', {
			title: "Available episodes",
			templateUrl: 'templates/producer/episodelist.html'
		})
		.when('/episode/:epId', {
			title: "Telling STORY",
			controller: 'PlayerController',
			templateUrl: 'templates/player.html',
			resolve: {
				product: ["appState", function (appState) {
					appState.product = "player";
					appState.productLoadedAs = "player";
				}]
			}
		})
		.when('/episode/:epId/:viewMode', {
			title: "Telling STORY",
			controller: 'PlayerController',
			templateUrl: 'templates/player.html',
			resolve: {
				product: ["appState", function (appState) {
					appState.product = "player";
					appState.productLoadedAs = "player";
				}]
			}
		})
		.when('/sxs/:epId', {
			title: "Telling STORY",
			controller: 'PlayerController',
			templateUrl: 'templates/player.html',
			resolve: {
				product: ["appState", function (appState) {
					appState.product = "sxs";
					appState.productLoadedAs = "sxs";
				}]
			}
		})
		.when('/editor/:epId', {
			title: "Telling STORY",
			controller: 'PlayerController',
			templateUrl: 'templates/player.html',
			resolve: {
				product: ["appState", function (appState) {
					appState.product = "sxs";
					appState.productLoadedAs = "sxs";
				}]
			}
		})
		.when('/producer/:epId', {
			title: "Telling STORY",
			controller: 'PlayerController',
			templateUrl: 'templates/player.html',
			resolve: {
				product: ["appState", function (appState) {
					appState.product = "producer";
					appState.productLoadedAs = "producer";
				}]
			}
		})
		.when('/assets/:containerId', {
			title: "Container Assets test",
			controller: 'ContainerAssetsTestController',
			template: '<div class="standaloneAncillaryPage"><div><a class="goUp" href="#episodes">Episodes</a><div sxs-container-assets="containerId"></div></div></div>'
		})
		.when('/event/:eventId', {
			title: "Event test",
			controller: 'EventTestController',
			templateUrl: 'templates/testbed-event.html'
		})
		.otherwise({
			title: "Telling STORY: Error",
			controller: 'ErrorController',
			templateUrl: 'templates/error-404.html'
		});

	//$locationProvider.html5Mode(false); // TODO we had trouble getting the server config working for this... thought we had it but IE still choked
}])

.run(["$rootScope", "errorSvc", function ($rootScope, errorSvc) {

	$rootScope.$on("$routeChangeSuccess", function (event, currentRoute) {
		document.title = currentRoute.title ? currentRoute.title : 'Telling STORY';
		errorSvc.init(); // clear display of any errors from the previous route
	});
	// globally emit rootscope event for certain keypresses:
	var fhotkb = false; // user's forehead is not on the keyboard
	$(document).on("keydown", function (e) {
		if (
			fhotkb ||
			document.activeElement.tagName === 'INPUT' ||
			document.activeElement.tagName === 'TEXTAREA' ||
			document.activeElement.attributes.contenteditable
		) {
			return;
		}

		fhotkb = true;
		if (e.keyCode === 27) {
			$rootScope.$emit("userKeypress.ESC");
			e.preventDefault();
		}
		if (e.which === 32) {
			$rootScope.$emit("userKeypress.SPACE");
			e.preventDefault();
		}

	});
	$(document).on("keyup", function () {
		fhotkb = false; // oh good they've woken up
	});
}])

// Configure x-domain resource whitelist (TODO: do we actually need this?)
.config(["$sceDelegateProvider", function ($sceDelegateProvider) {
	$sceDelegateProvider.resourceUrlWhitelist([
		'self',
		/.*/,
		/^http(s)?:\/\/platformuniv-p.edgesuite.net/,
		/^http(s)?:\/\/themes.googleusercontent.com/
	]);
}])

// Configure http headers and intercept http errors
.config(["$httpProvider", function ($httpProvider) {
	$httpProvider.defaults.useXDomain = true;
	$httpProvider.defaults.withCredentials = true;
	delete $httpProvider.defaults.headers.common['X-Requested-With'];
	$httpProvider.interceptors.push(["$q", "errorSvc", function ($q, errorSvc) {
		return {
			'responseError': function (rejection) {
				errorSvc.error(rejection);
				return $q.reject(rejection);
			}
		};
	}]);
}])

// Configuration for textAngular toolbar
.config(["$provide", function ($provide) {
	$provide.decorator('taOptions', ['taRegisterTool', '$delegate', function (taRegisterTool, taOptions) { // $delegate is the taOptions we are decorating
		taOptions.defaultFileDropHandler = function(a, b) { }; //jshint ignore:line
		taOptions.toolbar = [
			['h1', 'h2', 'h3'],
			['bold', 'italics', 'underline', 'strikeThrough'],
			['ul', 'ol'],
			['undo', 'redo', 'clear']
			// ['bold', 'italics', 'underline', 'strikeThrough', 'ul', 'ol', 'redo', 'undo', 'clear'],
			// ['justifyLeft','justifyCenter','justifyRight','indent','outdent'],
			// ['html', 'insertImage', 'insertLink', 'insertVideo', 'wordcount', 'charcount']
		];
		return taOptions;
	}]);
}])

.config(["$compileProvider", function($compileProvider) {
	var isDev = false;
	var currentHost = window.location.hostname;
	if (currentHost.indexOf('localhost') === 0 || currentHost.indexOf('api-dev') === 0) {
		isDev = true;
	}

	if (isDev === false) {
		$compileProvider.debugInfoEnabled(false);
	}
}]);

angular.module('com.inthetelling.story').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('templates/auth.html',
    "<div itt-login=\"\" style=\"margin:2em\"><a style=\"animation: delayedFadeIn 5s\" href=\"/#/\">Home</a></div>"
  );


  $templateCache.put('templates/container.html',
    "<div class=\"container\" ng-class=\"{\n" +
    "\t\tisOpen: container.showChildren, \n" +
    "\t\tisClosed: !container.showChildren,\n" +
    "\t\thoverIndicator: depth == 3\n" +
    "\t}\" ng-if=\"container._id\"><div class=\"hoverIndicator\"><span ng-if=\"!container.editingContainer\"><a ng-click=\"toggleChildren()\">{{container.name.en}}</a> <span ng-if=\"depth==3\" style=\"color:#999\">({{container.status || Unpublished}})</span> <a style=\"color:#666\" ng-click=\"container.editingContainer = true\">â–¾</a></span> <span ng-if=\"container.editingContainer\"><label>Name:&nbsp;<input ng-model=\"container.newContainerName\" ng-init=\"container.newContainerName = container.name.en\" autofocus>&nbsp;</label><button ng-click=\"container.editingContainer = false\">Cancel</button> <button ng-disabled=\"!container.newContainerName || container.newContainerName == container.name.en\" ng-click=\"renameContainer()\">Save</button></span> <span class=\"controls\"><button class=\"danger\" ng-if=\"appState.dangerousButtons && !container.children.length && !container.haveNotLoadedChildData\" ng-click=\"deleteEpisodeAndContainer(container._id)\">Delete</button> <a ng-href=\"#/assets/{{container._id}}\">[Assets]</a></span></div><div ng-if=\"container.showChildren\"><div ng-if=\"depth < 3\" ng-repeat=\"child in container.children | orderBy:'name.en'\" itt-container=\"containers[child._id]\" depth=\"depth+1\"></div><div ng-if=\"depth == 3\" class=\"container\"><a class=\"button\" ng-click=\"container.showGuestUrl=!container.showGuestUrl\"><span ng-if=\"customer.guest_access_allowed\">Guest</span> <span ng-if=\"!customer.guest_access_allowed\">ID</span></a> <a class=\"button\" href=\"#/episode/{{container.episodes[0]}}\">Player</a> <a class=\"button\" ng-if=\"isDemoServer\" href=\"#/editor/{{container.episodes[0]}}\">Editor</a> <a class=\"button\" href=\"#/producer/{{container.episodes[0]}}\">Producer</a><div ng-if=\"container.showGuestUrl && customer.guest_access_allowed\">The guest-accessible url for this episode is<input class=\"readonly\" ng-click=\"selectText($event)\" value=\"https://{{customer.domains[0]}}.inthetelling.com/#/episode/{{container.episodes[0]}}\" readonly></div><div ng-if=\"container.showGuestUrl && !customer.guest_access_allowed\">The ID for this episode is {{container.episodes[0]}}</div></div><div ng-if=\"!container.addingContainer\" class=\"controls\"><button ng-if=\"depth < 3\" ng-click=\"container.addingContainer = true\">Add {{containerTypes[depth+1]}} to {{container.name.en}}</button></div><div ng-if=\"container.addingContainer\" class=\"controls\"><label>Name:&nbsp;<input ng-model=\"container.newContainerTitle\" autofocus>&nbsp;</label><button ng-click=\"container.addingContainer = false\">Cancel</button> <button ng-disabled=\"!container.newContainerTitle\" ng-click=\"addContainer(container)\">Add</button></div></div></div>"
  );


  $templateCache.put('templates/containerepisodes.html',
    " <span><li ng-if=\"!container.episodes.length\" class=\"container\" ng-class=\"{isOpen: container.wasClicked, isClosed: !container.wasClicked}\" ng-click=\"toggle();loadChildren()\" ng-bind-html=\"container.display_name\"></li><li ng-if=\"container.episodes.length\"><span class=\"hoverIndicator\"><a ng-click=\"onNodeClick({node: container.episodes[0]})\" ng-bind-html=\"containers[container._id].display_name\"></a> ({{container.status}})</span></li><ul class=\"crossEpisodeNav\" ng-class=\"{isOpen: container.wasClicked, isClosed: !container.wasClicked}\" ng-if=\"container.wasClicked\"><li ng-repeat=\"child in container.children\" on-node-click=\"rootContext(node)\" root-context=\"rootContext\" itt-container-episodes=\"containers[child._id]\" x-for-admin=\"true\"></li></ul></span>"
  );


  $templateCache.put('templates/copyright.html',
    "TELLING STORY player &#169; <span ng-bind-html=\"now | date:'yyyy'\"></span> <a href=\"//inthetelling.com\" target=\"_blank\">IN THE TELLING</a>. All rights reserved.<br><a href=\"/privacy.html\" target=\"_blank\">Privacy</a> <span ng-if=\"narrative.support_url\">- <a ng-href=\"{{narrative.support_url}}\">Support</a></span>"
  );


  $templateCache.put('templates/episode/columbia.html',
    "<div class=\"episode episode-columbia\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/columbia.svg\" alt=\"Columbia University\"></div></div>"
  );


  $templateCache.put('templates/episode/columbiabusiness.html',
    "<div class=\"episode episode-columbiabusiness\" ng-class=\"episode.styleCss\"><div class=\"fill trident\"></div><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/cbs-logo.svg\" alt=\"Columbia Business School\"></div></div>"
  );


  $templateCache.put('templates/episode/components/discovermode.html',
    "<div class=\"discoverMode\" ng-if=\"appState.viewMode == 'discover'\"><div class=\"fill windowBg bgLayer\"><div ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\" class=\"item animate\" ng-repeat=\"item in scene.items | isCurrent | itemLayout:'windowBg'\"></div></div><div itt-scene=\"scene\" episode=\"episode\"></div></div>"
  );


  $templateCache.put('templates/episode/components/reviewmode-scenes.html',
    "<div class=\"scene animate transitionFade\" ng-class=\"{navigable: scene.display_title}\" ng-repeat=\"scene in scenes\" ng-if=\"!scene._internal\"><div class=\"pane mainPane\"><div class=\"content allowHighlights\" ng-class=\"{isNarrow: isNarrow}\" itt-width-watch=\"\"><h1 class=\"sceneTitle\" ng-if=\"scene.display_title\" ng-bind-html=\"scene.display_title\"></h1><div ng-if=\"appState.windowWidth < 480\" class=\"item animate\" ng-repeat=\"item in scene.items| reviewMode | orderBy:'start_time'\" ng-class=\"item.state + ' ' + item.uscReviewModeHack\" itt-item=\"item\" forcetemplate=\"review-all\"></div><div ng-if=\"appState.windowWidth >= 480\" class=\"item animate\" ng-repeat=\"item in scene.items | reviewMode | annotation | orderBy:'start_time'\" ng-class=\"item.state\" itt-item=\"item\" forcetemplate=\"review-annotation\"></div></div></div><div ng-if=\"appState.windowWidth >= 480\" class=\"pane altPane\"><div class=\"content allowHighlights\" ng-class=\"{isNarrow: isNarrow}\" itt-width-watch=\"\"><img ng-if=\"$index==1\" src=\"images/aspectratiopreserver-16x9.gif\" class=\"videoPadding\"> <div class=\"item animate\" ng-repeat=\"item in scene.items | reviewMode | transmedia\" ng-class=\"item.state + ' ' + item.uscReviewModeHack\" itt-item=\"item\" forcetemplate=\"review-transmedia\"></div></div></div></div><itt-loading ng-if=\"isLoading\"></itt-loading>"
  );


  $templateCache.put('templates/episode/components/reviewmode.html',
    "<div ng-show=\"appState.viewMode == 'review'\" class=\"searchMode\"><div itt-magnet=\"\" id=\"searchVideoMagnet\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div itt-search-panel=\"\"></div></div>"
  );


  $templateCache.put('templates/episode/components/video.html',
    "<div itt-magnetized=\"\" class=\"pane videoContainer\"><span ng-if=\"episode.masterAsset\"><div class=\"video contentLayer\" itt-video=\"episode.masterAsset\" poster=\"episode.poster\"></div></span><div class=\"pane fill overlay fgLayer\"><div ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\" class=\"item animate\" ng-repeat=\"item in episode.items | itemLayout:'videoOverlay' | isCurrent\"></div></div></div>"
  );


  $templateCache.put('templates/episode/components/watchmode.html',
    "<div ng-if=\"appState.viewMode == 'watch'\" style=\"padding-bottom: 100%\"><div class=\"watchMode\"><div itt-magnet=\"\" id=\"watchModeVideoMagnet\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div></div><span class=\"watchModeCaptions\" ng-class=\"{padForBottomToolbar: appState.videoControlsActive}\"><div class=\"item watchModeCaption\" ng-if=\"item.isCurrent && !appState.hideCaptions\" ng-repeat=\"item in episode.items | transcript\" ng-class=\"item.state\" itt-item=\"item\" forcetemplate=\"caption\"></div></span></div>"
  );


  $templateCache.put('templates/episode/components/windowfg.html',
    "<div ng-if=\"(episode.items | isCurrent | itemLayout:'windowFg').length > 0\" class=\"overlay windowFg fgLayer animate transitionFade\"><div class=\"content w-modal\"><div ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\" class=\"item animate timestampNone\" ng-repeat=\"item in episode.items | isCurrent | itemLayout:'windowFg'\"></div><a ng-if=\"!appState.editEvent && appState.timelineState == 'paused'\" class=\"button-continue\" ng-click=\"continue()\"><span>Continue</span></a></div></div>"
  );


  $templateCache.put('templates/episode/eliterate.html',
    "<div class=\"episode episode-eliterate\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"eliterate logo\" href=\"//www.mindwires.com\" target=\"_blank\"><img src=\"images/customer/eliterate-mindwires.svg\" alt=\"Mindwires logo\"></a> <a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/eliterate-logo.svg\" alt=\"E-Literate\"></div></div>"
  );


  $templateCache.put('templates/episode/episode.html',
    "<div class=\"episode\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div></div>"
  );


  $templateCache.put('templates/episode/ewb.html',
    "<div class=\"episode episode-ewb\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/ewb-logo.svg\" alt=\"Engineers Without Borders\"></div></div>"
  );


  $templateCache.put('templates/episode/fieldpros.html',
    "<div class=\"episode professional field-pros\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"professional__branding\"><div class=\"professional__copyright\" ng-include=\"'templates/copyright.html'\"></div><img class=\"professional__logo\" src=\"images/customer/Logo_ColorBars-01.svg\"></div></div>"
  );


  $templateCache.put('templates/episode/gw.html',
    "<div class=\"episode episode-gw\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/gw-logo.svg\" alt=\"George Washington\"></div></div>"
  );


  $templateCache.put('templates/episode/gwlaw.html',
    "<div class=\"episode episode-gw\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/gw-law.jpg\" alt=\"GW Law\"></div></div>"
  );


  $templateCache.put('templates/episode/gwsb.html',
    "<div class=\"episode episode-gwsb\" ng-class=\"episode.styleCss\"><div class=\"fill gwsb-seal\"><div class=\"fill\"></div></div><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/gw-logo.svg\" alt=\"The George Washington University\"></div></div>"
  );


  $templateCache.put('templates/episode/kellogg.html',
    "<div class=\"episode episode-kellogg\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><img src=\"images/customer/kellogg-k.svg\"> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"></div></div>"
  );


  $templateCache.put('templates/episode/middlebury.html',
    "<div class=\"episode episode-middlebury\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span class=\"colorInvert DiscoverModeOnly\" ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt-incolor.svg\" alt=\"In The Telling logo\"></a> <a class=\"logo\" href=\"http://middlebury.edu\"><img src=\"images/customer/middlebury-shield.svg\" alt=\"Middlebury logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/middlebury-logo.svg\" alt=\"Middlebury\"></div></div>"
  );


  $templateCache.put('templates/episode/narrasys-pro.html',
    "<div class=\"episode professional narrasys-pro\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"professional__branding\"><div class=\"professional__copyright\" ng-include=\"'templates/copyright.html'\"></div><div><img class=\"professional__logo\" src=\"images/customer/Narrasys_brand_logo.svg\"></div></div></div>"
  );


  $templateCache.put('templates/episode/prolotherapy.html',
    "<div class=\"episode episode-prolotherapy\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/prolotherapy-text.svg\" alt=\"American Association of Musculoskeletal Medicine\"></div></div>"
  );


  $templateCache.put('templates/episode/purdue.html',
    "<div class=\"episode episode-purdue\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/purdue-logo.svg\" alt=\"Purdue\"></div></div>"
  );


  $templateCache.put('templates/episode/regis.html',
    "<div class=\"episode episode-regis\" ng-class=\"episode.styleCss\"><div class=\"fill bigregis\"></div><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div></div>"
  );


  $templateCache.put('templates/episode/schoolclimatesolutions.html',
    "<div class=\"episode episode-schoolclimatesolutions\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/schoolclimatesolutions.svg\" alt=\"SCS: School Climate Solutions\"></div></div>"
  );


  $templateCache.put('templates/episode/story.html',
    "<div class=\"episode episode-story\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/tellingstory-logo.svg\" alt=\"Telling STORY\"></div></div>"
  );


  $templateCache.put('templates/episode/usc.html',
    "<div class=\"episode episode-usc\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"banner-logo\"><img src=\"images/customer/usc-logo.svg\" alt=\"USC\"></div></div>"
  );


  $templateCache.put('templates/episode/washingtonSBCTC.html',
    "<div class=\"episode episode-wsbctc\" ng-class=\"episode.styleCss\"><div class=\"fill bigwsbctc\"></div><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><div id=\"branding-wrapper\"><img src=\"images/customer/WSBCTC_Logo.svg\" id=\"sbctc-logo\" alt=\"Washington SBCTC logo\"> <a id=\"itt-logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt-incolor.svg\" alt=\"In The Telling logo\"></a></div><span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div></div>"
  );


  $templateCache.put('templates/episode/wiley1.html',
    "<div class=\"episode episode-wiley wiley-endscreentext\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"ghost\"></div></div>"
  );


  $templateCache.put('templates/episode/wiley2.html',
    "<div class=\"episode episode-wiley\" ng-class=\"episode.styleCss\"><span ng-include=\"'templates/episode/components/reviewmode.html'\"></span> <span ng-include=\"'templates/episode/components/watchmode.html'\"></span> <span ng-repeat=\"scene in episode.scenes | isCurrent\" ng-include=\"'templates/episode/components/discovermode.html'\"></span> <span ng-include=\"'templates/episode/components/video.html'\"></span> <span ng-include=\"'templates/episode/components/windowfg.html'\"></span><div ng-if=\"appState.viewMode != 'watch'\" class=\"branding footer\"><a class=\"itt logo\" href=\"//inthetelling.com\" target=\"_blank\"><img src=\"images/itt.svg\" alt=\"In The Telling logo\"></a> <span class=\"copyright\" ng-include=\"'templates/copyright.html'\"></span></div><div class=\"ghost\"></div></div>"
  );


  $templateCache.put('templates/episode/wiley3.html',
    "<div ng-include=\"'templates/episode/wiley1.html'\"></div>"
  );


  $templateCache.put('templates/error-404.html',
    "<div class=\"errors\"><div class=\"error\"><h3>Error: no such route</h3><p><i>404. File not found. Sorry!</i></p></div></div>"
  );


  $templateCache.put('templates/error.html',
    "<span ng-if=\"errorSvc.errors.length || errorSvc.notifications.length\" class=\"errors\"><div class=\"error\" ng-repeat=\"error in errorSvc.errors\" ng-click=\"dismiss(error)\"><h3><i class=\"fa fa-exclamation-triangle error-red\"></i> Error: {{error.cause || error.exception.data.error || error.exception.data || '(unknown reason)'}}</h3><p ng-if=\"error.exception.config.url\"><i>(While trying to load {{error.exception.config.url}})</i></p><p ng-if=\"error.exception.status == 401\">Please <span ng-if=\"user.login_url\"><a ng-if=\"user.login_via_top_window_only\" ng-click=\"logout();\" ng-href=\"{{user.login_url}}\" target=\"_top\">click here</a> <a ng-if=\"!user.login_via_top_window_only\" ng-click=\"logout();\" ng-href=\"{{user.login_url}}\">click here</a> to log back in.</span> <span ng-if=\"!user.login_url\"><a ng-click=\"logout();\">reset your session</a> and start over.</span></p></div><div class=\"notification\" ng-repeat=\"notification in errorSvc.notifications\"><a style=\"float: right\" ng-click=\"dismiss(notification)\">[x]</a><p><i class=\"fa fa-info-circle info-blue\"></i> <strong>Note:</strong> {{notification.text}}</p></div></span>"
  );


  $templateCache.put('templates/iframe.html',
    "<div class=\"iframeContainer\"><itt-loading ng-if=\"iframeCtrl.isLoading\"></itt-loading><div ng-if=\"!iframeCtrl.isLoading\"><iframe ng-if=\"!iframeCtrl.isYoutube\" ng-src=\"{{iframeCtrl.src}}\" ng-attr-scrolling=\"{{iframeCtrl.iOSScroll}}\" ng-style=\"iframeCtrl.styles\" ng-attr-sandbox=\"{{iframeCtrl.sandbox}}\"></iframe><itt-youtube ng-if=\"iframeCtrl.isYoutube\" embed-url=\"{{iframeCtrl.src}}\" main-player=\"false\" player-id=\"iframeCtrl.item()._id\"></itt-youtube></div></div>"
  );


  $templateCache.put('templates/item/caption.html',
    "<div class=\"itemTemplate itemCaption\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><div class=\"text\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/debug.html',
    "<div class=\"itemTemplate\"><pre ng-if=\"itemDebug\">{{item | pretty}}</pre></div>"
  );


  $templateCache.put('templates/item/file-withimage.html',
    " <a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text item__text--file-with-image\"><span ng-if=\"item.noEmbed\"><span ng-if=\"!item.targetTop\"><div class=\"title item__title item__title--file-with-image\"><a tabindex=\"0\" class=\"escapelink item__link--escape-link\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.asset.url,$event)\" ng-click=\"outgoingLink(item.asset.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><a tabindex=\"0\" ng-if=\"item.asset.url\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.asset.url,$event)\" ng-click=\"outgoingLink(item.asset.url)\"><img ng-src=\"{{item.asset.url}}\"></a></span> <span ng-if=\"item.targetTop\"><div class=\"title item__title item__title--file-with-image\"><a tabindex=\"0\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><a tabindex=\"0\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\"><img ng-src=\"{{item.asset.url}}\"></a></span></span> <span ng-if=\"!item.noEmbed\"><div class=\"title item__title item__title--file-with-image\"><a role=\"button\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" class=\"fakeLink item__link--fake-link\" tabindex=\"0\" ng-click=\"toggleDetailView()\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><img ng-click=\"toggleDetailView()\" ng-src=\"{{item.asset.url}}\"></span></div><div class=\"item__text item__text--file-with-image\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink\">(new window)</a><itt-iframe x-src=\"{{item.asset.url}}\" item=\"item\" x-contenttype=\"{{item.asset.content_type}}\"></itt-iframe></div><div class=\"clear\"></div>"
  );


  $templateCache.put('templates/item/file.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text item__text--file\"><div class=\"title item__title item__title--file\"><a role=\"button\" tabindex=\"0\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" ng-click=\"toggleDetailView()\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><div class=\"item__text item__text--file\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail\"><span ng-switch=\"item.asset.content_type.indexOf('image/')\"><span ng-switch-when=\"-1\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.asset.url,$event)\" ng-click=\"outgoingLink(item.asset.url)\" class=\"escapelink\">(new window)</a><itt-iframe x-src=\"{{item.asset.url}}\" item=\"item\" x-contenttype=\"{{item.asset.content_type}}\"></itt-iframe></span> <span ng-switch-default=\"\"><img ng-src=\"{{item.asset.url}}\"></span></span></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/image-caption-sliding.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"captionContainer touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div><div class=\"caption slidingcaption\"><div class=\"title item__title item__title--image-caption-sliding\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div class=\"text item__text item__title--image-caption-sliding\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/image-caption.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"captionContainer touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div><div class=\"caption\"><div class=\"title item__title item__title--image-caption\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div class=\"text item__text item__text--image-caption\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/image-fill.html',
    " <a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate imageFill\" style=\"{{item.backgroundImageStyle}}\" ng-style=\"{'backgroundImage':item.asset.cssUrl}\"><img class=\"fillImg\" ng-src=\"{{item.asset.url}}\"></div>"
  );


  $templateCache.put('templates/item/image-inline-withtext.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><div class=\"title item__title item__title--image-inline-with-text\" ng-if=\"item.display_title | highlightSubstring: appState.searchText\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div class=\"touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><div class=\"item__text item__text--image-inline-with-text\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div><div class=\"clear\"></div></div></div>"
  );


  $templateCache.put('templates/item/image-inline.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/image-linkonly.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text\"><div class=\"title\"><a tabindex=\"0\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.asset.url,$event)\" ng-click=\"outgoingLink(item.asset.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><div class=\"text\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/image-plain.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate imagePlain\"><div class=\"touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div></div>"
  );


  $templateCache.put('templates/item/image-thumbnail.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"thumbnail touchable\" x-ng-class=\"{fullsize: item.showInlineDetail || item.isActive}\" x-ng-click=\"toggleDetailView()\"><img ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><div class=\"text item__text\"><div class=\"title item__title item__title--image-thumbnail\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div class=\"text item__text item__text--image-thumbnail\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/image.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><div class=\"title item__title item__title--image\"><a class=\"fakeLink item__link--fake-link\" role=\"button\" tabindex=\"0\" ng-click=\"toggleDetailView()\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><div class=\"item__text item__text--image\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><div class=\"itemDetail\" x-ng-if=\"item.showInlineDetail\"><div class=\"touchable\" style=\"position:relative\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/link-descriptionfirst.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><div class=\"item__text--link text--description-first\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div><div class=\"title item__title item__title--link title--description-first\"><a tabindex=\"0\" ng-if=\"item.noEmbed && !item.targetTop\" class=\"escapelink item__escape-link item__link--escape-link escape-link--description-first\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a> <a tabindex=\"0\" ng-if=\"item.noEmbed && item.targetTop\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a> <a tabindex=\"0\" ng-if=\"!item.noEmbed\" ng-click=\"toggleDetailView()\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink item__link--escape-link escape-link--description-first\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/link-embed.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><div class=\"title item__title item__title--link title--link-embed\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div class=\"item__text--link text--link-embed\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><a tabindex=\"0\" class=\"escapelink item__link--escape-link escape-link--link-embed\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/link-modal-thumb.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><span ng-if=\"item.noEmbed\"><span ng-if=\"!item.targetTop\"><div class=\"title item__title item__title--link title--link-modal\"><a tabindex=\"0\" class=\"escapelink item__link--escape-link escape-link--link-modal\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><a tabindex=\"0\" ng-if=\"item.asset.url\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\"><img ng-if=\"item.asset.url\" ng-src=\"{{item.asset.url}}\"></a></span> <span ng-if=\"item.targetTop\"><div class=\"title item__title item__title--link title--link-modal\"><a tabindex=\"0\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><a tabindex=\"0\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\"><img ng-if=\"item.asset.url\" ng-src=\"{{item.asset.url}}\"></a></span></span> <span ng-if=\"!item.noEmbed\"><div class=\"title item__title item__title--link title--link-modal\"><a role=\"button\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" class=\"fakeLink item__link--fake-link\" tabindex=\"0\" ng-click=\"forceModal(false)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><img ng-if=\"item.asset.url\" ng-click=\"forceModal(false)\" ng-src=\"{{item.asset.url}}\"></span><div class=\"item__text item__text--link text--link-modal\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail && appState.viewMode === 'review'\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink item__link--escape-link escape-link--link-modal\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></div><div class=\"clear\"></div>"
  );


  $templateCache.put('templates/item/link-withimage-notitle.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><span ng-if=\"item.noEmbed\"><span ng-if=\"!item.targetTop\"><a tabindex=\"0\" ng-if=\"item.asset.url\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\"><img ng-src=\"{{item.asset.url}}\" class=\"img--link-with-image-no-title\"></a></span> <span ng-if=\"item.targetTop\"><a tabindex=\"0\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\"><img ng-src=\"{{item.asset.url}}\" class=\"img--link-with-image-no-title\"></a></span></span> <span ng-if=\"!item.noEmbed\"><img ng-click=\"toggleDetailView()\" ng-src=\"{{item.asset.url}}\" class=\"img--link-with-image-no-title\"></span><div class=\"item__text item__text--link text--link-with-image\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink item__link--escape-link escape-link--link-with-image\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></div><div class=\"clear\"></div>"
  );


  $templateCache.put('templates/item/link-withimage.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><span ng-if=\"item.noEmbed\"><span ng-if=\"!item.targetTop\"><div class=\"title item__title item__title--link title--link-with-image\"><a tabindex=\"0\" class=\"escapelink item__link--escape-link escape-link--link-with-image\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><a tabindex=\"0\" ng-if=\"item.asset.url\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\"><img ng-if=\"item.asset.url\" ng-src=\"{{item.asset.url}}\"></a></span> <span ng-if=\"item.targetTop\"><div class=\"title item__title item__title--link title--link-with-image\"><a tabindex=\"0\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><a tabindex=\"0\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\"><img ng-if=\"item.asset.url\" ng-src=\"{{item.asset.url}}\"></a></span></span> <span ng-if=\"!item.noEmbed\"><div class=\"title item__title item__title--link title--link-with-image\"><a role=\"button\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" class=\"fakeLink item__link--fake-link\" tabindex=\"0\" ng-click=\"toggleDetailView()\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><img ng-if=\"item.asset.url\" ng-click=\"toggleDetailView()\" ng-src=\"{{item.asset.url}}\"></span><div class=\"item__text item__text--link text--link-with-image\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink item__link--escape-link escape-link--link-with-image\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></div><div class=\"clear\"></div>"
  );


  $templateCache.put('templates/item/link.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text\"><div class=\"title item__title item__title--link title--link\"><a tabindex=\"0\" ng-if=\"item.noEmbed && !item.targetTop\" class=\"escapelink item__link--escape-link escape-link--link\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a> <a tabindex=\"0\" ng-if=\"item.noEmbed && item.targetTop\" target=\"_top\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a> <a role=\"button\" tabindex=\"0\" ng-if=\"!item.noEmbed\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" ng-click=\"toggleDetailView()\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><div class=\"item__text item__text--link text--link\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink item__link--escape-link escape-link--link\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/modal.html',
    "<div class=\"modal\" ng-style=\"modalSmooth\" ng-click=\"dismiss();\"><span ng-if=\"item._type == 'Link'\"><div class=\"modalmenu\"><a href=\"{{item.url}}\" target=\"_blank\" class=\"escapelink\">(new window)</a></div><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></span> <span ng-if=\"item._type == 'Upload'\"><span ng-switch=\"item.asset.content_type.indexOf('image/')\"><span ng-switch-when=\"-1\"><div class=\"modalmenu\"><a href=\"{{item.asset.url}}\" target=\"_blank\" class=\"escapelink\">(new window)</a></div><itt-iframe x-src=\"{{item.asset.url}}\" item=\"item\" x-contenttype=\"{{item.asset.content_type}}\"></itt-iframe></span> <span ng-switch-default=\"\"><div class=\"modalimage\" ng-if=\"item._type == 'Upload'\"><img ng-src=\"{{item.asset.url}}\"></div></span></span></span></div>"
  );


  $templateCache.put('templates/item/pullquote-noattrib.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate headerItem\"><div class=\"category\"></div><div class=\"pullquote item__text item__text--pullquote\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div></div>"
  );


  $templateCache.put('templates/item/pullquote.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate headerItem\"><div class=\"category\"></div><div class=\"pullquote item__text item__text--pullquote\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div><div class=\"pullquoteSpeaker\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div>"
  );


  $templateCache.put('templates/item/question-mc-image-left.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text item__text--question-mc-image-left\"><div class=\"title item__title item__title--question-mc-image-left\" ng-if=\"item.display_title | highlightSubstring: appState.searchText\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div ng-if=\"item.asset.url\" class=\"touchable\" style=\"float:left; max-width: 50%; padding-right: 0.5em\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><itt-mc-question show-chart=\"item.data._plugin.questiontype == 'mc-poll'\" choices=\"item.data._plugin.distractors\" on-choice=\"save\" data=\"item.data._plugin\" qid=\"item._id\"></itt-mc-question><div class=\"clear\"></div></div></div>"
  );


  $templateCache.put('templates/item/question-mc-image-right.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text item__text--question-mc-image-right\"><div class=\"title item__title item__title--question-mc-image-right\" ng-if=\"item.display_title | highlightSubstring: appState.searchText\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div ng-if=\"item.asset.url\" class=\"touchable\" style=\"float:right; max-width: 50%; padding-right: 0.5em\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><itt-mc-question show-chart=\"item.data._plugin.questiontype == 'mc-poll'\" choices=\"item.data._plugin.distractors\" on-choice=\"save\" data=\"item.data._plugin\" qid=\"item._id\"></itt-mc-question><div class=\"clear\"></div></div></div>"
  );


  $templateCache.put('templates/item/question-mc-inner.html',
    "<div class=\"question item__text\"><p ng-bind-html=\"plugin.questiontext | i18n\"></p><div ng-if=\"!showChart\"><div ng-repeat=\"distractor in choices\"><div ng-if=\"(distractor.text | i18n) != ''\"><label ng-class=\"{\n" +
    "\t\t\t\t\tcorrect: plugin.hasBeenAnswered && distractor.correct,\n" +
    "\t\t\t\t\tincorrect: plugin.hasBeenAnswered && !distractor.correct\n" +
    "\t\t\t\t}\"><input ng-change=\"scoreQuiz($index)\" type=\"radio\" name=\"fnord\" ng-model=\"index\" ng-disabled=\"plugin.hasBeenAnswered\" value=\"{{$index}}\" ng-checked=\"distractor.selected\"><span ng-bind-html=\"distractor.text | i18n\"></span></label></div></div><div ng-if=\"plugin.hasBeenAnswered\" ng-bind-html=\"feedback() | i18n\"></div></div><div ng-if=\"showChart\"><div ng-if=\"!plugin.hasBeenAnswered\" ng-repeat=\"distractor in plugin.distractors\"><div ng-if=\"(distractor.text | i18n) != ''\"><label><input ng-change=\"scorePoll($index)\" type=\"radio\" name=\"fnord\" ng-disabled=\"plugin.hasBeenAnswered\" ng-model=\"$parent.plugin.selectedDistractor\" value=\"{{$index}}\"><span ng-bind-html=\"distractor.text | i18n\"></span></label></div></div><br><div ng-if=\"plugin.hasBeenAnswered\"><p ng-if=\"plugin.selectedDistractor\">Here's how others answered this question. (Your choice was: <b ng-repeat=\"distractor in plugin.distractors | filter:{ index: plugin.selectedDistractor }\" ng-bind-html=\"distractor.text | i18n\"></b>)</p><itt-flotr2-chart type=\"{{chartType}}\" data=\"{{chartData}}\" options=\"{{chartOptions}}\"></itt-flotr2-chart></div></div></div>"
  );


  $templateCache.put('templates/item/question-mc.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text item__text item__text--question-mc\"><div class=\"title item__title item__title--question-mc\" ng-if=\"item.display_title | highlightSubstring: appState.searchText\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div ng-if=\"item.asset.url\" class=\"touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><itt-mc-question show-chart=\"item.data._plugin.questiontype == 'mc-poll'\" choices=\"item.data._plugin.distractors\" on-choice=\"save\" data=\"item.data._plugin\" qid=\"item._id\"></itt-mc-question><div class=\"clear\"></div></div></div>"
  );


  $templateCache.put('templates/item/review-all.html',
    " <span ng-switch=\"(item._type == 'Annotation' && item.templateUrl != 'templates/item/text-transmedia.html' && item.templateUrl != 'templates/item/text-definition.html')\"><span ng-switch-when=\"true\"><div ng-include=\"'templates/item/review-annotation.html'\"></div></span> <span ng-switch-default=\"\"><div ng-include=\"'templates/item/review-transmedia.html'\"></div></span></span>"
  );


  $templateCache.put('templates/item/review-annotation.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div ng-class=\"{isCosmetic: item.cosmetic}\"><div ng-if=\"item.isTranscript\" class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><div class=\"text\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div></div><div ng-if=\"!item.isTranscript\" ng-include=\"item.templateUrl\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/review-transmedia.html',
    "<span ng-class=\"{isCosmetic: item.cosmetic}\"><div ng-if=\"item.sxs\" ng-include=\"item.templateUrl\"></div><span ng-if=\"!item.sxs\"><span ng-if=\"item.layouts[0] == 'windowFg'\" ng-include=\"'templates/item/review-windowfg.html'\"></span> <span ng-if=\"item.layouts[0] != 'windowFg'\"><div ng-if=\"item.data._pluginType\" ng-include=\"item.templateUrl\"></div><span ng-if=\"!item.data._pluginType\"><a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" tabindex=\"0\" class=\"startTime displayTime\" aria-label=\"Seek video to {{item.displayStartTime}}\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><span ng-if=\"item._type == 'Annotation'\"><div class=\"text\"><div class=\"title\"><div ng-if=\"item.display_annotator\" class=\"authorName\" ng-bind-html=\"item.display_annotator\"></div><div ng-if=\"item.display_title\" class=\"authorName\" ng-bind-html=\"item.display_title\"></div></div><div ng-bind-html=\"item.display_annotation\"></div></div></span> <span ng-if=\"item._type != 'Annotation'\"><div class=\"text\"><div class=\"title\"><a tabindex=\"0\" ng-if=\"item.noEmbed\" class=\"fakeLink escapelink\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a> <a tabindex=\"0\" role=\"button\" class=\"fakeLink\" ng-if=\"!item.noEmbed\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" ng-click=\"toggleDetailView()\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\" aria-label=\"Toggle detail display of {{item.display_title}}\"></a></div><div ng-bind-html=\"item.display_description\"></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail && item._type == 'Link'\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail && item._type != 'Link'\"><div class=\"touchable\" style=\"position:relative\"><img ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div></div></span></div></span></span></span><div class=\"clear\"></div></span>"
  );


  $templateCache.put('templates/item/review-windowfg.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div></div><div class=\"text\"><div class=\"title\"><a tabindex=\"0\" ng-click=\"seek(item.start_time)\" ng-bind-html=\"item.display_title || '(Untitled)' | highlightSubstring: appState.searchText\"></a></div><div class=\"text\" ng-if=\"item.data._plugin._type == 'question'\">You have <span ng-if=\"!item.data._plugin.hasBeenAnswered\">not yet</span> answered this <span ng-if=\"item.data._plugin.questiontype == 'mc-poll'\">poll</span> question.</div><div class=\"text\" ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div><div class=\"clear\"></div></div></div>"
  );


  $templateCache.put('templates/item/searchresults-all.html',
    "<span ng-class=\"{'sxs-item': item.sxs}\"><a ng-if=\"item.editableByThisUser\" class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div ng-style=\"\n" +
    "    item.sxs?{background:'url('+item.avatar.url+') no-repeat scroll right top / 40px 40px',minHeight:'40px'}:{}\n" +
    "    \" ng-class=\"{isCosmetic: item.cosmetic}\" class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"category\"><span ng-if=\"item.required\">(Required viewing)</span></div><div ng-if=\"item.display_annotator\" class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div><div ng-if=\"item.producerItemType == 'annotation' && item.display_title\" class=\"authorName\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><span ng-if=\"item._type != 'Annotation'\"><a tabindex=\"0\" ng-if=\"item.noEmbed\" class=\"fakeLink escapelink item__link--escape-link item__link--fake-link\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"(item.display_title || '(Untitled)') | highlightSubstring: appState.searchText\"></a> <a tabindex=\"0\" role=\"button\" class=\"fakeLink item__link--fake-link\" ng-if=\"!item.noEmbed\" x-ng-keypress=\"toggleDetailOnKeyPress($event)\" ng-click=\"item.showInlineDetail=!item.showInlineDetail\" ng-bind-html=\"(item.display_title || '(Untitled)') | highlightSubstring: appState.searchText\" aria-label=\"Toggle detail display of {{item.display_title}}\"></a></span></div><div class=\"text item__text\"><div ng-class=\"{showAsHeader: item.showAsHeader}\" ng-bind-html=\"item.display_annotation || item.display_description | highlightSubstring: appState.searchText\"></div></div><div class=\"itemDetail\" ng-if=\"item.showInlineDetail\"><span ng-switch=\"item.producerItemType\"><span ng-switch-when=\"file\"><a tabindex=\"0\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.asset.url,$event)\" ng-click=\"outgoingLink(item.asset.url)\" class=\"escapelink\">(new window)</a><itt-iframe x-src=\"{{item.asset.url}}\" x-contenttype=\"{{item.asset.content_type}}\"></itt-iframe></span> <span ng-switch-when=\"link\"><a tabindex=\"0\" ng-if=\"!item.noExternalLink\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.url,$event)\" ng-click=\"outgoingLink(item.url)\" class=\"escapelink\">(new window)</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></span> <span ng-switch-when=\"video\"><span ng-switch-when=\"file\"><a tabindex=\"0\" x-ng-keypress=\"outgoingLinkOnKeyPress(item.asset.url,$event)\" ng-click=\"outgoingLink(item.asset.url)\" class=\"escapelink\">(new window)</a><itt-iframe x-src=\"{{item.asset.url}}\" item=\"item\" x-contenttype=\"{{item.asset.content_type}}\"></itt-iframe></span></span> <span ng-switch-when=\"image\"><div class=\"touchable\" style=\"position:relative\"><img ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div></span> <span ng-switch-when=\"question\"><div ng-if=\"item.asset.url\" class=\"touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><itt-mc-question show-chart=\"item.data._plugin.questiontype == 'mc-poll'\" choices=\"item.data._plugin.distractors\" on-choice=\"save\" data=\"item.data._plugin\" qid=\"item._id\"></itt-mc-question></span> <span ng-switch-default=\"\"><span ng-if=\"item.data._pluginType == 'credlyBadge'\" ng-include=\"'templates/item/usc-badges-inner.html'\"></span> </span></span></div></div></span>"
  );


  $templateCache.put('templates/item/searchresults.html',
    "<div ng-class=\"{\n" +
    "searchitem:true,\n" +
    "isSxS: item.sxs,\n" +
    "isCurrent: ((item.start_time <= appState.time) && (item.end_time > appState.time)),\n" +
    "isCosmetic: item.cosmetic\n" +
    "}\" ng-style=\"item.sxs?{backgroundImage:'url('+item.avatar.url+')'}:{}\"><a class=\"edit-event\" ng-click=\"editItem(item._id)\"><span>Edit item</span></a> <span class=\"displayTime\"><button class=\"fakeLink\" tabindex=\"2\" ng-click=\"seek(item.start_time, item._id)\">{{item.displayStartTime}}</button></span> <span class=\"type\" ng-bind-html=\"(item.display_title || item.display_annotator) | highlightSubstring: appState.searchText\"></span><div class=\"description\" ng-bind-html=\"(item.display_description || item.display_annotation) | highlightSubstring: appState.searchText\"></div></div>"
  );


  $templateCache.put('templates/item/sxs-annotation.html',
    "<div class=\"itemTemplate sxs-item\"><a class=\"edit-event\" ng-click=\"editItem()\" ng-if=\"item.editableByThisUser\">[Edit]</a><div class=\"avatar\"><img ng-src=\"{{item.avatar.url || '/images/no-avatar.gif'}}\"></div><div class=\"itemHead\"><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><div class=\"text\" ng-bind-html=\"item.annotation.en\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/sxs-file.html',
    "<div class=\"itemTemplate sxs-item\"><a class=\"edit-event\" ng-click=\"editItem()\" ng-if=\"item.editableByThisUser\">[Edit]</a><div class=\"avatar\"><img ng-src=\"{{item.avatar.url || '/images/no-avatar.gif'}}\"></div><div class=\"itemHead\"><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><a ng-click=\"outgoingLink(item.asset.url)\" ng-bind-html=\"item.title.en ||'(Untitled)'\"></a><div class=\"text\" ng-bind-html=\"item.description.en\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/sxs-image.html',
    "<div class=\"itemTemplate sxs-item\"><a class=\"edit-event\" ng-click=\"editItem()\" ng-if=\"item.editableByThisUser\">[Edit]</a><div class=\"avatar\"><img ng-src=\"{{item.avatar.url || '/images/no-avatar.gif'}}\"></div><div class=\"itemHead\"><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><div><b ng-bind-html=\"item.title.en\"></b><p style=\"text-align:center\"><div ng-if=\"item.asset.url\" class=\"touchable\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div></p></div><div class=\"text\" ng-bind-html=\"item.description.en\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/sxs-link.html',
    "<div class=\"itemTemplate sxs-item\"><a class=\"edit-event\" ng-click=\"editItem()\" ng-if=\"item.editableByThisUser\">[Edit]</a><div class=\"avatar\"><img ng-src=\"{{item.avatar.url || '/images/no-avatar.gif'}}\"></div><div class=\"itemHead\"><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><a ng-if=\"item.noEmbed\" class=\"escapelink\" ng-click=\"outgoingLink(item.url)\" ng-bind-html=\"item.title.en ||'(Untitled)'\"></a><h3 ng-if=\"!item.noEmbed\" ng-bind-html=\"item.title.en ||'(Untitled)'\"></h3><div class=\"text\" ng-bind-html=\"item.description.en\"></div><div class=\"itemDetail\" ng-if=\"item.url && !item.noEmbed && item.url != 'https://'\"><div class=\"modalmenu\" ng-if=\"!item.noExternalLink\"><a ng-click=\"outgoingLink(item.url)\" class=\"escapelink\">(new window)</a></div><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/sxs-question.html',
    "<div class=\"itemTemplate sxs-item\"><a class=\"edit-event\" ng-click=\"editItem()\" ng-if=\"item.editableByThisUser\"><span>Edit item</span></a><div class=\"avatar\"><img ng-src=\"{{item.avatar.url || '/images/no-avatar.gif'}}\"></div><div class=\"itemHead\"><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><div class=\"text\"><div class=\"title\" ng-if=\"item.display_title | highlightSubstring: appState.searchText\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div ng-if=\"item.asset.url\" class=\"touchable\" style=\"float:right; max-width: 50%; padding-right: 0.5em\"><img x-ng-click=\"forceModal()\" ng-src=\"{{item.asset.url}}\"><div class=\"touchableIndicator\"></div></div><itt-mc-question show-chart=\"item.data._plugin.questiontype == 'mc-poll'\" choices=\"item.data._plugin.distractors\" on-choice=\"save\" data=\"item.data._plugin\" qid=\"item._id\"><div class=\"clear\"></div></itt-mc-question></div></div>"
  );


  $templateCache.put('templates/item/sxs-video.html',
    "<div class=\"itemTemplate sxs-item\"><a class=\"edit-event\" ng-click=\"editItem()\" ng-if=\"item.editableByThisUser\">[Edit]</a><div class=\"avatar\"><img ng-src=\"{{item.avatar.url || '/images/no-avatar.gif'}}\"></div><div class=\"itemHead\"><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><div class=\"text\"><div class=\"title\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></div><div ng-bind-html=\"item.display_description | highlightSubstring: appState.searchText\"></div></div><a class=\"escapelink\" ng-click=\"outgoingLink(item.url)\">New window</a><itt-iframe x-src=\"{{item.url}}\" item=\"item\"></itt-iframe><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/text-definition.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div><div class=\"itemTemplate definition\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"item__title item__title--definition\"><span ng-if=\"item.display_title | highlightSubstring: appState.searchText\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></span></div></div><div class=\"text item__text item__text--definition\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/text-h1.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate headerItem\"><div class=\"category\"></div><div class=\"item__text item__text--h1\"><h1 ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></h1></div></div>"
  );


  $templateCache.put('templates/item/text-h2.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate headerItem\"><div class=\"category\"></div><div class=\"item__text item__text--h2\"><h2 ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></h2></div></div>"
  );


  $templateCache.put('templates/item/text-transmedia.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div><div class=\"itemTemplate\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"item__title\"><h2 class=\"item__title item__title--transmedia\" ng-if=\"item.display_title | highlightSubstring: appState.searchText\" ng-bind-html=\"item.display_title | highlightSubstring: appState.searchText\"></h2></div></div><div class=\"text item__text item__text--transmedia\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/transcript-withthumbnail-alt.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate transcriptWithThumbnail\"><div class=\"icon\" style=\"float:right; margin-right: 0.5em\"><img ng-src=\"{{item.asset.url}}\"></div><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a></div><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div><div class=\"text\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/transcript-withthumbnail.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate transcriptWithThumbnail\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a></div><div class=\"icon\" style=\"float:left; margin-right: 0.5em\"><img ng-src=\"{{item.asset.url}}\"><div class=\"clear\"></div></div><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div><div class=\"text\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/transcript.html',
    "<a class=\"edit-event\" ng-click=\"editItem()\"><span>Edit item</span></a><div class=\"itemTemplate transcript\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a><div class=\"authorName\" ng-bind-html=\"item.display_annotator | highlightSubstring: appState.searchText\"></div></div><div class=\"text\" ng-bind-html=\"item.display_annotation | highlightSubstring: appState.searchText\"></div><div class=\"clear\"></div></div>"
  );


  $templateCache.put('templates/item/usc-badges-inner.html',
    "<span><img style=\"max-width: 5em; float:left; margin-right: 0.5em\" ng-src=\"{{plugin.credlyImageUrl}}\"> <b>{{plugin.achievement}}</b> <span ng-if=\"plugin.eligibleForBadges\"><p>Complete the following requirements to earn a <a ng-href=\"https://credly.com/recipients/{{plugin.credlyBadgeId}}\" target=\"_blank\">USC Scholar's Badge</a>:</p><div style=\"clear:both; margin: 1em 1.2em; font-size:90%\"><div ng-repeat=\"req in plugin.requirements\"><img ng-if=\"req.achieved\" style=\"width: 1em; height: 1em; margin-left: -1.2em\" src=\"/images/checkmark.png\"> <img ng-if=\"!req.achieved\" style=\"width: 1em; height: 1em; margin-left: -1.2em\" src=\"/images/checkmark-empty.png\"> <span>{{req.name}}</span></div></div><p ng-if=\"plugin.totalAchieved != plugin.requirements.length\">You have completed {{plugin.totalAchieved}} of {{plugin.requirements.length}} parts of this achievement.</p><div ng-if=\"plugin.totalAchieved == plugin.requirements.length && !plugin.gotBadge\"><p>Congratulations! You are eligible for a USC Scholarâ€™s Badge. Enter your email address to claim it:</p><input ng-model=\"plugin.userEmail\"><input type=\"button\" value=\"Go\" ng-click=\"badger()\"><span ng-if=\"plugin.gettingBadge\"><small>Getting your badge...</small></span><div ng-if=\"plugin.error\"><small>We're sorry, there was an error retrieving your badge. Please try again later.</small></div></div><div ng-if=\"plugin.gotBadge\">Your badge is in the mail. <span ng-if=\"plugin.alreadyHadBadge\">(It looks like you've already acquired this badge; you might want to check your spam folder for an email from credly.com.)</span></div></span> <span ng-if=\"!plugin.eligibleForBadges\"><p>We're sorry, guest users are not eligibile for USC Scholar's Badges.</p></span></span>"
  );


  $templateCache.put('templates/item/usc-badges.html',
    "<div class=\"itemTemplate uscBadges\"><div class=\"itemHead\"><a role=\"button\" aria-label=\"Seek video to {{item.displayStartTime}}\" tabindex=\"0\" class=\"startTime displayTime\" x-ng-click=\"seek(item.start_time)\" x-ng-keypress=\"seekOnKeyPress(item.start_time, $event)\">{{item.displayStartTime}}</a></div><span ng-include=\"'templates/item/usc-badges-inner.html'\"></span></div>"
  );


  $templateCache.put('templates/loading.html',
    "<div class=\"loading\"><div class=\"spinner\"><div class=\"rotating pie\"></div><div class=\"filler pie\"></div><div class=\"mask\"></div></div>Loading</div>"
  );


  $templateCache.put('templates/narrative/default.html',
    "<div><div class=\"ancillaryNav\"><a class=\"button\" ng-if=\"user._id\" href=\"/#/user\">Home</a> <a class=\"button\" ng-if=\"user._id\" ng-click=\"logout()\">Sign out</a></div><div ng-if=\"!loading\"><div class=\"narrative\"><div ng-hide=\"isEditing\"><itt-edit-pencil can-access=\"canAccess\" on-edit=\"toggleEditing()\"><h2 ng-bind-html=\"narrative.name.en\"></h2></itt-edit-pencil><p ng-bind-html=\"narrative.description.en\"></p><p>Total Duration: {{totalNarrativeDuration | asTime}}</p></div><itt-narrative-editor ng-if=\"isEditing\" narrative=\"narrative\" customers=\"customers\" on-done=\"toggleEditing()\" on-update=\"updateNarrative(n)\"></itt-narrative-editor><button ng-if=\"canAccess\" ng-disabled=\"timelineUnderEdit || tmpTimeline\" ng-click=\"addTmpTimeline(null, narrative.timelines)\">add timeline</button><itt-modal ng-if=\"showEpisodeList\"><div itt-episode-list=\"\" class=\"admin episodePicker\">Choose an episode: <button ng-click=\"toggleEpisodeList(); doneEditingTimeline()\">cancel</button><ul ng-repeat=\"child in root.children\" x-for-admin=\"true\" itt-container-episodes=\"containers[child._id]\" on-node-click=\"onEpisodeSelect(node)\" root-context=\"onEpisodeSelect\" depth=\"0\"></ul></div></itt-modal><div ui-tree=\"treeOpts\" ng-if=\"narrative.timelines.length !== 0\"><div ui-tree-nodes=\"\" ng-model=\"narrative.timelines\"><div class=\"storyTimeline\" ui-tree-node=\"\" ng-repeat=\"timeline in narrative.timelines\"><itt-timeline-editor ng-if=\"showTimelineEditor(timeline)\" timeline=\"timeline\" on-done=\"doneEditingTimeline()\" on-update=\"editorAction(t, timeline)\" on-delete=\"deleteTimeline(t)\"></itt-timeline-editor><div ng-mouseenter=\"showDrag = true\" ng-mouseleave=\"showDrag = false\" ng-class=\"{'timeline--hidden': timeline.hidden}\"><span ng-show=\"canAccess && showDrag\" class=\"tlDrag__handle\" ui-tree-handle=\"\"><i class=\"fa fa-th\"></i></span><div ng-hide=\"timelineUnderEdit === timeline || tmpTimeline === timeline\" class=\"tl__wrapper\"><itt-edit-pencil can-access=\"canAccess\" on-edit=\"toggleEditingTimeline(timeline)\"><h3><i ng-if=\"timeline.hidden\" class=\"fa fa-eye-slash\"></i> <a href=\"/#/story/{{narrative._id}}/{{timeline._id}}\">{{timeline.name.en}}</a></h3></itt-edit-pencil><p>{{timeline.description.en}}</p>{{timeline.episode_segments[0].end_time | asTime}}<div ng-mouseenter=\"showLine = true\" ng-mouseleave=\"showLine = false\" style=\"height: 25px\"><div ng-show=\"!!showLine && canAccess\"><button ng-click=\"addTmpTimeline(timeline, narrative.timelines)\">add new timeline</button></div></div></div></div></div></div></div></div></div></div><a ng-if=\"narrative.support_url\" target=\"_blank\" ng-href=\"{{narrative.support_url}}\">Support</a>"
  );


  $templateCache.put('templates/narrativelist.html',
    "<div><div class=\"ancillaryNav\"><a class=\"button\" ng-if=\"narrativeList.user._id\" href=\"/#/user\">Home</a> <a class=\"button\" ng-if=\"narrativeList.user._id\" ng-click=\"narrativeList.logout()\">Sign out</a></div><div ng-if=\"narrativeList.canAccess\"><button ng-click=\"narrativeList.toggleSelectNarrative()\">Add Narrative</button><itt-modal modal-class=\"narrative__modal\" ng-if=\"narrativeList.narrativeSelect\"><h3>Add Narrative</h3><itt-narrative-editor customers=\"narrativeList.customers\" on-done=\"narrativeList.toggleSelectNarrative()\" on-update=\"narrativeList.addNarrative(n)\"></itt-narrative-editor></itt-modal></div><div ng-repeat=\"narrative in narrativeList.narratives\"><a href=\"/#/story/{{narrative._id}}\">{{narrative.name.en}}</a></div></div>"
  );


  $templateCache.put('templates/navpanel.html',
    "<span class=\"navPanel\"><div class=\"parent\" ng-repeat=\"parent in episode.parents\" ng-bind-html=\"parent.display_name\"></div><div class=\"scene\" x-ng-if=\"scene.display_title\" x-ng-repeat=\"scene in episode.scenes\" x-ng-class=\"{currentScene: scene.isCurrent}\" x-ng-click=\"seek(scene.start_time)\"><span class=\"displayTime\">{{scene.displayStartTime}}</span><p><button class=\"fakeLink\" tabindex=\"0\" ng-bind-html=\"scene.display_title\" x-ng-class=\"{sceneLink: !scene.isCurrent}\" ng-focus=\"showControls()\"></button><br><span ng-bind-html=\"scene.display_description\"></span></p></div><div class=\"crossEpisode\"><a class=\"prevEpisode\" ng-if=\"episode.previousEpisodeContainer\" ng-href=\"/#/{{appState.crossEpisodePath}}/{{episode.previousEpisodeContainer.episodes[0]}}\" title=\"{{episode.previousEpisodeContainer.display_name}}\">Previous episode</a> <a class=\"nextEpisode\" ng-if=\"episode.nextEpisodeContainer\" ng-href=\"/#/{{appState.crossEpisodePath}}/{{episode.nextEpisodeContainer.episodes[0]}}\" title=\"{{episode.nextEpisodeContainer.display_name}}\">Next Episode</a></div></span>"
  );


  $templateCache.put('templates/player-timeline.html',
    "<span><div ng-if=\"showPlayer\" ng-controller=\"PlayerController\" ng-include=\"'templates/player.html'\"></div></span>"
  );


  $templateCache.put('templates/player.html',
    "<div ng-class=\"{\n" +
    "\tisTouchDevice: appState.isTouchDevice,\n" +
    "\tisFramed: appState.isFramed,\n" +
    "\tisProducer: (appState.product == 'producer'),\n" +
    "\tisSxS: (appState.product == 'sxs'),\n" +
    "\n" +
    "\tcanEditContent: (!appState.editEvent && !appState.editEpisode) && (appState.product == 'producer' || appState.product == 'sxs')\n" +
    "\t}\"><div class=\"player\"><itt-toolbar-story></itt-toolbar-story><itt-loading ng-if=\"loading\"></itt-loading><div ng-show=\"!loading\" itt-episode=\"\" ng-class=\"{\n" +
    "\t\tpadForEditing: appState.editEvent || appState.editEpisode,\n" +
    "\t\tshowBackgroundOnly: appState.producerEditLayer < 0,\n" +
    "\t\tshowForegroundOnly: appState.producerEditLayer > 0,\n" +
    "\t}\"></div><div class=\"toolbar-bottom\" itt-show-hide-visual-only=\"appState.videoControlsActive\" ng-mouseenter=\"showControls();\" ng-click=\"showControls();\" ng-mouseleave=\"allowControlsExit()\"><div class=\"toolbar-bottom-fill\"><div ng-show=\"appState.editEvent || appState.editEpisode\" class=\"navPanel editPanel\"><div ng-if=\"appState.editEvent\" itt-item-editor=\"appState.editEvent\"></div><div ng-if=\"appState.editEpisode\" itt-episode-editor=\"appState.editEpisode\"></div></div><div itt-timeline=\"\"></div></div></div><div class=\"toolbar-bottom-controltrigger\" ng-mouseenter=\"showControls();\" ng-click=\"showControls();\" ng-focus=\"showControls()\"></div></div><div class=\"animate transitionFade\" ng-if=\"appState.videoControlsActive && (appState.product == 'sxs' || appState.product == 'producer')\" ng-mouseenter=\"showControls();\" ng-click=\"showControls();\" ng-focus=\"showControls()\" sxs-add-content=\"\"></div><div class=\"autoscroll\" ng-if=\"appState.autoscroll && appState.autoscrollBlocked\" ng-click=\"enableAutoscroll()\"><img src=\"/images/autoscroll.svg\" width=\"32\" height=\"32\"></div><div ng-show=\"show.navPanel\" class=\"modal-backdrop\" ng-click=\"hidePanel('navPanel')\"></div><div ng-show=\"show.profilePanel\" class=\"modal-backdrop\" ng-click=\"hidePanel('profilePanel')\"></div><div ng-show=\"appState.itemDetail\" class=\"modal-backdrop\" ng-click=\"appState.itemDetail=false\"></div><div ng-if=\"appState.itemDetail\" itt-item-detail-modal=\"appState.itemDetail\"></div><div ng-if=\"show.profilePanel\" class=\"profilePanel\" ng-class=\"{isFramed: appState.isFramed}\"><div class=\"arrow-up\"></div><div itt-user=\"\" x-in-player=\"true\"></div></div><div ng-cloak=\"\" ng-if=\"show.wileyNag &&  (appState.productLoadedAs == 'player'\n" +
    "\t \t\t\t|| (appState.productLoadedAs == 'narrative'\n" +
    "\t \t\t\t&& !narrative.disable_new_window ) )\" class=\"wileyNag animate transitionFade\"><div><span style=\"float:right\">â¤´</span> <span style=\"float:right; display:inline-block; padding: 5px\">Go here for best view</span></div><a class=\"goAway\" ng-click=\"noWileyNag()\">Don't show this again</a></div></div>"
  );


  $templateCache.put('templates/producer/addcontent.html',
    "<div ng-show=\"!appState.editEvent && !appState.editEpisode\" class=\"controlPanel\" ng-class=\"{\n" +
    "\tisProducer: appState.product == 'producer',\n" +
    "\tisSxS: appState.product == 'sxs'\n" +
    "}\"><div ng-if=\"appState.product == 'producer'\" class=\"editButtonPanel\"><a class=\"button button-episode\" ng-click=\"editEpisode()\">Edit episode</a> <a class=\"button button-scene\" ng-if=\"appState.time > 0  && appState.time < (appState.duration - 0.1) && appState.viewMode == 'discover'\" ng-click=\"editCurrentScene()\">Edit scene</a></div><div class=\"producer addButtonPanel\" ng-show=\"!item && appState.time > 0 && appState.time < (appState.duration - 0.1) \"><span ng-if=\"expanded\" style=\"padding: 0 1em\" class=\"animate transitionExpandW\"><span ng-if=\"appState.product == 'sxs'\"><a class=\"button button-comment\" ng-click=\"addEvent('annotation')\">Comment</a> <a class=\"button button-link\" ng-click=\"addEvent('link')\">Link</a> <a class=\"button button-question\" ng-click=\"addEvent('question')\">Question</a> <a class=\"button button-image\" ng-click=\"addEvent('image')\">Image</a> <a class=\"button button-file\" ng-click=\"addEvent('file')\">File</a> <a class=\"button button-video\" ng-click=\"addEvent('video')\">Video</a></span> <span ng-if=\"appState.product == 'producer'\"><a class=\"button button-scene\" ng-click=\"addEvent('scene')\">Add Scene</a> <a class=\"button button-comment\" ng-click=\"addEvent('transcript')\">Transcript</a> <a class=\"button button-comment\" ng-click=\"addEvent('annotation')\">Annotation</a> <a class=\"button button-link\" ng-click=\"addEvent('link')\">Link</a> <a class=\"button button-question\" ng-click=\"addEvent('question')\">Question</a> <a class=\"button button-image\" ng-click=\"addEvent('image')\">Image</a> <a class=\"button button-file\" ng-click=\"addEvent('file')\">Upload</a> </span></span> <span ng-if=\"!expanded\"><a class=\"button button-add\" ng-click=\"expand()\">Add</a></span></div></div>"
  );


  $templateCache.put('templates/producer/annotator-autocomplete.html',
    "<div style=\"position:relative\" ng-show=\"!hasAnnotator()\"><input class=\"annotatorChooser\" ng-model=\"searchText\" ng-focus=\"showAutocomplete()\" ng-blur=\"hideAutocomplete()\" ng-change=\"handleAutocomplete()\"><div class=\"autocompleteList animate transitionFade\" ng-if=\"autoCompleting\"><div class=\"autocompleteItem\" ng-repeat=\"annotator in filteredAnnotators | orderBy:'name'\" ng-click=\"select(annotator)\" ng-class=\"{selected: ($index == preselectedItem)}\" style=\"white-space: nowrap\"><img ng-src=\"{{annotator.imageUrl}}\"> <span ng-bind-html=\"(annotator.key | highlightSubstring: searchText) || '(New speaker)'\"></span></div></div></div><div style=\"position:relative\" ng-show=\"hasAnnotator()\"><div sxs-input-i18n=\"item.annotator\" x-inputtype=\"'input'\"></div><a style=\"position: absolute; top: 3px; right: 10px\" ng-click=\"item.annotator={}\">(x)</a></div>"
  );


  $templateCache.put('templates/producer/asset-uploader.html',
    "<div class=\"assetUploader\"><div ng-if=\"uploads.length\"><div class=\"uploadList\" ng-repeat=\"upload in uploads\"><span class=\"uploadName\">{{uploadStatus[$index].name}}:</span> <span class=\"uploadProgress\"><span ng-if=\"uploadStatus[$index].done\">Upload complete</span><div ng-if=\"uploadStatus[$index].error\">Error</div><span ng-if=\"!uploadStatus[$index].done && !uploadStatus[$index].error\"><progress ng-attr-max=\"{{uploadStatus[$index].bytesTotal}}\" ng-attr-value=\"{{uploadStatus[$index].bytesSent}}\"></progress><span ng-switch=\"uploadStatus[$index].percent\"><span ng-switch-when=\"100\">...</span> <span ng-switch-default=\"\">{{uploadStatus[$index].percent}}%</span></span></span></span><div ng-if=\"uploadStatus[$index].error\">{{uploadStatus[$index].error}}</div></div><span ng-if=\"uploadsinprogress > 0\">{{uploadsinprogress}} files remaining <button ng-if=\"!paused\" ng-click=\"pauseUpload()\">Pause</button> <button ng-if=\"paused\" ng-click=\"resumeUpload()\">Resume</button> <button ng-click=\"cancelUpload()\">Cancel</button></span></div><div ng-if=\"errormessage\" ng-bind-html=\"errormessage\"></div><div class=\"uploadDropTarget\"><a style=\"float:right\" ng-click=\"showInstructions=!showInstructions\">(?)</a> Drag and drop <span ng-if=\"multiple\">files</span> <span ng-if=\"!multiple\">a file</span> here<br><small>or choose <span ng-if=\"multiple\">files</span> <span ng-if=\"!multiple\">a file</span> to upload:<input class=\"uploadFileInput\" type=\"file\" multiple onchange=\"angular.element(this).scope().handleUploads(this.files)\"></small><div ng-if=\"showInstructions\" style=\"text-align:left\"><small>{{manPage}}</small></div></div></div>"
  );


  $templateCache.put('templates/producer/container-assets.html',
    "<div ng-if=\"showParent\"><div sxs-container-assets=\"container.parent_id\"></div></div><div class=\"containerAssets\"><div ng-if=\"appState.product != 'sxs' && container.parent_id && !showParent\"><a class=\"goUp\" ng-click=\"up()\">Parent container</a></div><div class=\"title\">{{container.display_name}}</div><div class=\"controls\"><a ng-click=\"toggleImages()\"><span ng-if=\"onlyImages\">Images</span> <span ng-if=\"!onlyImages\">All</span></a> &nbsp; <a ng-click=\"toggleGrid()\"><span ng-if=\"gridView\">â–¦</span> <span ng-if=\"!gridView\">â˜°</span></a></div><div class=\"scrollPane\" ng-if=\"!hideItems\"><div ng-if=\"gridView\"><div class=\"grid\" ng-repeat=\"asset in assets\" ng-if=\"asset.container_id == containerId && !(onlyImages && asset._type != 'Asset::Image')\" ng-click=\"assetClick(asset._id)\"><div ng-if=\"asset._type == 'Asset::Image'\"><img class=\"thumbnail\" ng-src=\"{{asset.url}}\"></div><div ng-if=\"asset._type != 'Asset::Image'\"><div class=\"thumbnail\">{{asset._type}}</div></div>{{asset.display_name}}</div></div><table ng-if=\"!gridView\"><tr ng-repeat=\"asset in assets\" ng-if=\"asset.container_id == containerId && !(onlyImages && asset._type != 'Asset::Image')\" ng-click=\"assetClick(asset._id)\"><td><div ng-if=\"asset._type == 'Asset::Image'\"><img class=\"thumbnail\" ng-src=\"{{asset.url}}\"></div></td><td>{{asset.size |asBytes}}</td><td>{{asset.content_type}}</td><td>{{asset.display_name}}</td></tr></table></div><br><div itt-asset-uploader=\"container._id\" multiple></div></div>"
  );


  $templateCache.put('templates/producer/episode.html',
    "<div class=\"itemEdit authoringForm\"><div ng-if=\"appState.product == 'producer'\"><div class=\"ittTabs\" itt-tabs=\"\"><select ng-if=\"episode.languages.length > 1\" size=\"1\" ng-model=\"appState.lang\" ng-change=\"forcePreview()\" style=\"float:right; padding-right: 24px\" ng-options=\"language.code as ('['+language.code.toUpperCase()+']') for language in episode.languages\"></select><div class=\"ittTab\" itt-tab=\"tabs[0]\" x-tabindex=\"0\" x-tablabel=\"Episode\"><div class=\"authoringFormScrollContainer\"><div class=\"field\"><div class=\"label\">Public URL</div><div class=\"input\"><input ng-click=\"selectText($event)\" value=\"https://{{customer.domains[0]}}.inthetelling.com/#/episode/{{episode._id}}\" readonly></div></div><div class=\"field\"><div class=\"label\">Title [{{appState.lang}}]</div><div class=\"input\" ng-model-options=\"{ debounce: 500 }\" sxs-input-i18n=\"episode.title\" x-inputtype=\"'input'\" autofocus></div></div><div class=\"field\"><div class=\"label\">Description [{{appState.lang}}]</div><div class=\"input\" ng-model-options=\"{ debounce: 50 }\" sxs-input-i18n=\"episode.description\" x-inputtype=\"'textarea'\"></div></div><div class=\"field\"><div class=\"label\">Status</div><div class=\"input\"><select size=\"1\" ng-model=\"episode.status\"><option value=\"Published\">Published</option><option value=\"Unpublished\">Unpublished</option></select></div></div><div class=\"field\"><div class=\"label\">Languages</div><div class=\"input\"><label><input type=\"checkbox\" ng-model=\"langForm.en\">English</label><label><input type=\"checkbox\" ng-model=\"langForm.es\">Spanish</label><label><input type=\"checkbox\" ng-model=\"langForm.zh\">Chinese</label><label><input type=\"checkbox\" ng-model=\"langForm.pt\">Portuguese</label><label><input type=\"checkbox\" ng-model=\"langForm.fr\">French</label><label><input type=\"checkbox\" ng-model=\"langForm.de\">German</label><label><input type=\"checkbox\" ng-model=\"langForm.it\">Italian</label></div></div><div class=\"field\" ng-if=\"languageCount>1\"><div class=\"label\">Default language</div><div class=\"input\"><select size=\"1\" ng-model=\"episode.defaultLanguage\"><option ng-disabled=\"!langForm.en\" value=\"en\">English</option><option ng-disabled=\"!langForm.es\" value=\"es\">Spanish</option><option ng-disabled=\"!langForm.zh\" value=\"zh\">Chinese</option><option ng-disabled=\"!langForm.pt\" value=\"pt\">Portuguese</option><option ng-disabled=\"!langForm.fr\" value=\"fr\">French</option><option ng-disabled=\"!langForm.de\" value=\"pt\">German</option><option ng-disabled=\"!langForm.it\" value=\"it\">Italian</option></select></div></div></div></div><div class=\"ittTab\" itt-tab=\"tabs[1]\" x-tabindex=\"1\" x-tablabel=\"Master Asset\"><div class=\"authoringFormScrollContainer\"><div class=\"field\"><div class=\"label\">Master asset type</div><div class=\"input\"><select size=\"1\" ng-model=\"masterAssetType\"><option value=\"Video\">Native Video</option><option value=\"Youtube\">Youtube</option></select></div></div><div class=\"field\" ng-if=\"masterAssetType == 'Video'\"><div class=\"label\">Video</div><div class=\"input\" ng-include=\"'templates/producer/upload-masterasset.html'\"></div></div><div class=\"field\" ng-if=\"masterAssetType == 'Youtube'\"><div class=\"label\">Youtube URL</div><div class=\"input\"><input ng-model=\"masterAsset.you_tube_url\" style=\"width: 75%\"><button ng-click=\"attachYouTube(masterAsset.you_tube_url)\">Attach</button></div></div><div class=\"field\" ng-if=\"showmessage\"><div class=\"input\" ng-bind-html=\"showmessage\"></div></div><div class=\"field\"><div class=\"label\">Poster image</div><div class=\"input\" ng-include=\"'templates/producer/upload-poster.html'\"></div></div></div></div><div class=\"ittTab\" itt-tab=\"tabs[2]\" x-tabindex=\"2\" x-tablabel=\"Style\"><div class=\"authoringFormScrollContainer\"><div class=\"field\"><div class=\"label\">Template</div><div class=\"input\"><select ng-model=\"episode.templateUrl\"><option value=\"templates/episode/story.html\">(Default)</option><option value=\"templates/episode/episode.html\">(Unbranded)</option><option value=\"templates/episode/columbia.html\">Columbia University</option><option value=\"templates/episode/columbiabusiness.html\">Columbia Business School</option><option value=\"templates/episode/eliterate.html\">e-Literate TV</option><option value=\"templates/episode/ewb.html\">Engineers Without Borders</option><option value=\"templates/episode/fieldpros.html\">Field Pros</option><option value=\"templates/episode/gw.html\">George Washington</option><option value=\"templates/episode/gwlaw.html\">George Washington Law</option><option value=\"templates/episode/gwsb.html\">George Washington Fed MOOC</option><option value=\"templates/episode/kellogg.html\">Kellogg</option><option value=\"templates/episode/narrasys-pro.html\">Narrasys Professional</option><option value=\"templates/episode/middlebury.html\">Middlebury</option><option value=\"templates/episode/purdue.html\">Purdue</option><option value=\"templates/episode/regis.html\">Regis</option><option value=\"templates/episode/schoolclimatesolutions.html\">School Climate Solutions</option><option value=\"templates/episode/usc.html\">University of Southern California</option><option value=\"templates/episode/washingtonSBCTC.html\">Washington SBCTC</option><option value=\"templates/episode/wiley1.html\">Wiley</option><option value=\"templates/episode/wiley2.html\">Wiley (without endscreen text)</option></select></div></div><div class=\"field\"><div class=\"label\">Typography</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.typography\"><option value=\"\">(Default)</option><option value=\"Sans\">Sans</option><option value=\"Serif\">Serif</option><option value=\"Book\">Book</option><option value=\"Swiss\">Swiss</option></select></div></div><div class=\"field\"><div class=\"label\">Color</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.color\"><option value=\"\">(Default)</option><option value=\"Invert\">Invert</option><option value=\"Sepia\">Sepia</option><option value=\"Solarized\">Solarized</option><option value=\"Vivid\">Vivid</option></select></div></div><div class=\"field\"><div class=\"label\">Timestamp</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.timestamp\"><option value=\"\">(Default)</option><option value=\"None\">No timestamp</option><option value=\"Inline\">Inline timestamp</option></select></div></div><div class=\"field\"><div class=\"label\">Highlight</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.highlight\"><option value=\"\">(Default)</option><option value=\"Solid\">Solid</option><option value=\"Border\">Border</option><option value=\"Side\">Side</option><option value=\"Bloom\">Bloom</option><option value=\"Highlighter\">Highlighter</option><option value=\"Tilt\">Tilt</option></select></div></div><div class=\"field\"><div class=\"label\">Transition</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.transition\"><option value=\"\">(Default)</option><option value=\"None\">No transition</option><option value=\"Fade\">Fade</option><option value=\"SlideL\">Slide left</option><option value=\"SlideR\">Slide right</option><option value=\"ExpandW\">Expand</option><option value=\"Pop\">Pop</option></select></div></div></div></div></div></div><div class=\"ittTabFoot\"><a ng-click=\"cancelEdit()\">Cancel</a> &nbsp; &nbsp; <button ng-click=\"saveEpisode()\">Save</button></div></div>"
  );


  $templateCache.put('templates/producer/episodelist.html',
    "<div class=\"standaloneAncillaryPage\"><div itt-episode-list=\"\"><div ng-if=\"userHasRole('admin') || userHasRole('customer admin')\"><div class=\"ancillaryNav\"><a class=\"button\" href=\"/#/\">Home</a> <a class=\"button\" ng-click=\"logout()\">Log out</a></div><itt-loading ng-if=\"loading\"></itt-loading><div ng-repeat=\"child in root.children | orderBy:'name.en'\" itt-container=\"containers[child._id]\" depth=\"0\"></div><div class=\"container\"><div class=\"controls\"><button disabled>TODO add customer</button></div></div><div ng-if=\"!(userHasRole('admin') || userHasRole('customer admin')) || (!loading && (failedLogin || root.children.length == 0))\">Looks like you aren't logged in as an admin -- <a ng-click=\"logout();\">try again</a>.</div></div></div></div>"
  );


  $templateCache.put('templates/producer/inputi18n.html',
    "<input ng-if=\"inputtype=='input'\" ng-model=\"field[appState.lang]\"><text-angular ng-if=\"inputtype=='textarea'\" name=\"{{textangularname}}\" ng-model=\"field[appState.lang]\" ta-paste=\"sanitizePastedHtml($html)\" ta-default-wrap=\"span\" ng-blur=\"trim()\"></text-angular>"
  );


  $templateCache.put('templates/producer/inputtime.html',
    "<span class=\"floaterContainer\"><input class=\"inputfield\" ng-model=\"model\" ng-focus=\"showTools(true)\" ng-blur=\"showTools(false)\" ng-model-options=\"{ updateOn: 'blur' }\" style=\"max-width: 150px\" ng-class=\"{invalid: (fieldname == 'end_time' && item.invalid_end_time)}\"><div class=\"floater\" ng-if=\"tooltip\"><ul style=\"list-style:none; white-space:nowrap\"><li style=\"text-align:center; font-size: 150%\"><a ng-click=\"nudge(-5)\">Â«</a> <a ng-click=\"nudge(-1)\">â€¹</a> <span>&nbsp;&nbsp;</span> <a ng-click=\"nudge(1)\">â€º</a> <a ng-click=\"nudge(5)\">Â»</a></li><li ng-click=\"setTime(appState.time)\"><a>Set to current time ({{format(appState.time)}})</a></li><span ng-if=\"item._type != 'Scene' && scene().start_time > 0\"><li ng-if=\"fieldname=='start_time'\" ng-click=\"setTime(scene().start_time)\"><a>Beginning of scene ({{format(scene().start_time)}})</a></li><li ng-if=\"fieldname=='end_time'\" ng-click=\"setTime(scene().end_time)\"><a>End of scene ({{format(scene().end_time)}})</a></li><li ng-if=\"fieldname=='end_time' && isTranscript()\" ng-click=\"TODO\"><a>Auto (TODO)</a></li></span></ul></div></span>"
  );


  $templateCache.put('templates/producer/item.html',
    "<div class=\"itemEdit authoringForm\"><div><div ng-if=\"appState.product == 'sxs'\" class=\"authoringFormScrollContainer\"><div class=\"field\"><div class=\"label\">Time</div><div class=\"input\"><span sxs-input-time=\"item\" x-input-field=\"start_time\"></span></div></div><div ng-include=\"itemEditor\"></div></div><div ng-if=\"appState.product == 'producer'\"><div class=\"ittTabs\" itt-tabs=\"\"><select style=\"float:right; padding-right: 24px\" ng-if=\"languages.length > 1\" size=\"1\" ng-model=\"appState.lang\" ng-change=\"forcePreview()\" ng-options=\"language.code as ('['+language.code.toUpperCase()+']') for language in languages\"></select><div class=\"ittTab\" itt-tab=\"tabs[0]\" x-tabindex=\"0\" x-tablabel=\"{{item._type === 'Scene' ? 'Scene' : 'Item'}}\"><div class=\"authoringFormScrollContainer\"><div class=\"field\" ng-if=\"!(item._type==='Scene' && item.start_time <= 0.1)\"><div class=\"label\">Time</div><div class=\"input\"><span sxs-input-time=\"item\" x-input-field=\"start_time\"></span> <span ng-if=\"!(item.stop || item._type === 'Scene')\"><span class=\"label\">&nbsp; &nbsp; &nbsp; End</span> <span sxs-input-time=\"item\" x-input-field=\"end_time\"></span></span></div></div><div ng-include=\"itemEditor\"></div></div></div><div class=\"ittTab\" itt-tab=\"tabs[1]\" x-tabindex=\"1\" x-tablabel=\"Style\"><div class=\"authoringFormScrollContainer\"><div class=\"field\"><div ng-if=\"item.tipText && item.noEmbed\" class=\"tooltip-static\"><i class=\"fa fa-info-circle info-blue\"></i><p class=\"tooltip-text\">{{item.tipText}}</p></div><div class=\"label\">Template</div><div class=\"input\"><span ng-if=\"item.producerItemType == 'scene'\"><select ng-model=\"item.templateUrl\"><option value=\"templates/scene/centered.html\">Centered video</option><option value=\"templates/scene/centeredPro.html\">Centered Pro</option><option value=\"templates/scene/1col.html\">One column</option><option value=\"templates/scene/2colL.html\">Two columns</option><option value=\"templates/scene/2colR.html\">Two columns (mirrored)</option><option value=\"templates/scene/cornerH.html\">Corner video, horizontal</option><option value=\"templates/scene/cornerV.html\">Corner video, vertical</option><option value=\"templates/scene/centerVV.html\">Center Video, vertical</option><option value=\"templates/scene/centerVV-Mondrian.html\">Center Video, Mondrian</option><option value=\"templates/scene/pip.html\">Picture-in-picture</option></select><select ng-model=\"item.layouts[0]\" ng-if=\"item.templateUrl !='templates/scene/centered.html' && item.templateUrl !== 'templates/scene/centeredPro.html'\"><option value=\"\" ng-if=\"item.templateUrl != 'templates/scene/cornerH.html' && item.templateUrl != 'templates/scene/cornerV.html' && item.templateUrl != 'templates/scene/pip.html'\">Centered</option><option value=\"videoLeft\">Video on left</option><option value=\"videoRight\">Video on right</option></select></span><select ng-if=\"item.producerItemType == 'transcript'\" ng-model=\"item.templateUrl\"><option value=\"templates/item/transcript.html\">Transcript</option><option value=\"templates/item/transcript-withthumbnail.html\">Transcript with thumbnail</option><option value=\"templates/item/transcript-withthumbnail-alt.html\">Transcript with thumbnail B</option></select><select ng-if=\"item.producerItemType == 'annotation'\" ng-model=\"item.templateUrl\"><option value=\"templates/item/pullquote.html\">Pullquote with attribution</option><option value=\"templates/item/pullquote-noattrib.html\">Pullquote</option><option value=\"templates/item/text-h1.html\">Header 1</option><option value=\"templates/item/text-h2.html\">Header 2</option><option value=\"templates/item/text-transmedia.html\">Long text (as transmedia)</option><option value=\"templates/item/text-definition.html\">Definition (as transmedia)</option></select><select ng-if=\"item.producerItemType == 'link'\" ng-model=\"item.templateUrl\"><option value=\"templates/item/link.html\">Link</option><option value=\"templates/item/link-withimage.html\">Link with image</option><option value=\"templates/item/link-withimage-notitle.html\">Link with image - no title</option><option value=\"templates/item/link-descriptionfirst.html\">Link: description first</option><option ng-if=\"!item.noEmbed\" value=\"templates/item/link-embed.html\">Embedded link</option><option ng-if=\"item.noEmbed\" disabled value=\"templates/item/link.html\">Embedded link</option><option value=\"templates/item/link-modal-thumb.html\">Link Modal</option></select><select ng-if=\"item.producerItemType == 'image'\" ng-model=\"item.templateUrl\"><option value=\"templates/item/image-fill.html\">Overlay or background fill</option><option value=\"templates/item/image.html\">Linked image</option><option value=\"templates/item/image-inline.html\">Inline image</option><option value=\"templates/item/image-inline-withtext.html\">Inline image with text</option><option value=\"templates/item/image-caption.html\">Image with caption</option><option value=\"templates/item/image-caption-sliding.html\">Image with sliding caption</option><option value=\"templates/item/image-thumbnail.html\">Image thumbnail</option><option value=\"templates/item/image-plain.html\">Plain image</option></select><select ng-if=\"item.producerItemType == 'file'\" ng-model=\"item.templateUrl\"><option value=\"templates/item/file.html\">Uploaded file</option></select><select ng-if=\"item.producerItemType == 'question'\" ng-model=\"item.templateUrl\"><option value=\"templates/item/question-mc.html\">Default question display</option><option value=\"templates/item/question-mc-image-right.html\">Question with image right</option><option value=\"templates/item/question-mc-image-left.html\">Question with image left</option></select></div></div><div class=\"field\"><div class=\"label\">Layout</div><div class=\"input\"><span ng-if=\"item._type === 'Scene'\"><select ng-model=\"item.layouts[1]\" ng-if=\"item.templateUrl !='templates/scene/centered.html'\"><option value=\"\">Show all content items, highlight current ones</option><option value=\"showCurrent\">Show only current items</option></select></span> <span ng-if=\"item._type !== 'Scene'\"><span ng-if=\"item.templateUrl == 'templates/item/image-fill.html'\"><select size=\"1\" ng-model=\"item.layouts[0]\"><option value=\"windowBg\">Window background</option><option value=\"mainBg\">Main content pane background</option><option value=\"altBg\">Secondary content pane background</option><option value=\"mainFg\">Main content pane foreground</option><option value=\"altFg\">Secondary content pane foreground</option><option value=\"videoOverlay\">Video overlay</option></select><select size=\"1\" ng-model=\"itemForm.position\"><option value=\"\">Fit</option><option value=\"cover\">Cover</option><option value=\"contain\">Contain</option><option value=\"fill\">Fill and stretch</option></select><select size=\"1\" ng-model=\"itemForm.pin\" ng-if=\"itemForm.position != 'center' && itemForm.position != 'fill'\"><option value=\"tl\">Top left</option><option value=\"tr\">Top right</option><option value=\"bl\">Bottom left</option><option value=\"br\">Bottom right</option></select></span><select ng-if=\"item.templateUrl != 'templates/item/image-fill.html'\" size=\"1\" ng-model=\"item.layouts[0]\"><option value=\"windowFg\">Modal</option><option value=\"inline\">Inline</option><option value=\"sidebarL\">Sidebar: left</option><option value=\"sidebarR\">Sidebar: right</option><option value=\"burstL\">Burst left margin</option><option value=\"burstR\">Burst right margin</option><option value=\"burst\">Burst both margins</option></select></span></div></div><div class=\"field\" ng-if=\"item.producerItemType != 'scene'\"><div class=\"label\">Flags</div><div class=\"input\"><label><input type=\"checkbox\" ng-model=\"item.required\">Required</label><label><input type=\"checkbox\" ng-model=\"item.stop\">Stop item</label><label><input type=\"checkbox\" ng-model=\"item.cosmetic\">Cosmetic</label></div></div></div></div><div class=\"ittTab\" itt-tab=\"tabs[2]\" x-tabindex=\"2\" x-tablabel=\"Customize\"><div class=\"authoringFormScrollContainer\"><div class=\"field\"><div class=\"label\">Typography</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.typography\"><option value=\"\">(Default)</option><option value=\"Sans\">Sans</option><option value=\"Serif\">Serif</option><option value=\"Book\">Book</option><option value=\"Swiss\">Swiss</option></select></div></div><div class=\"field\"><div class=\"label\">Color</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.color\"><option value=\"\">(Default)</option><option value=\"Invert\">Invert</option><option value=\"Sepia\">Sepia</option><option value=\"Solarized\">Solarized</option><option value=\"Vivid\">Vivid</option></select></div></div><div class=\"field\"><div class=\"label\">Timestamp</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.timestamp\"><option value=\"\">(Default)</option><option value=\"None\">No timestamp</option><option value=\"Inline\">Inline timestamp</option></select></div></div><div class=\"field\"><div class=\"label\">Highlight</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.highlight\"><option value=\"\">(Default)</option><option value=\"Solid\">Solid</option><option value=\"Border\">Border</option><option value=\"Side\">Side</option><option value=\"Bloom\">Bloom</option><option value=\"Highlighter\">Highlighter</option><option value=\"Tilt\">Tilt</option></select></div></div><div class=\"field\"><div class=\"label\">Transition</div><div class=\"input\"><select size=\"1\" ng-model=\"itemForm.transition\"><option value=\"\">(Default)</option><option value=\"None\">No transition</option><option value=\"Fade\">Fade</option><option value=\"SlideL\">Slide left</option><option value=\"SlideR\">Slide right</option><option value=\"ExpandW\">Expand</option><option value=\"Pop\">Pop</option></select></div></div></div></div></div></div></div><div class=\"ittTabFoot\"><a ng-click=\"cancelEdit()\">Cancel</a> &nbsp; &nbsp; <button ng-if=\"\n" +
    "\t\t\titem._id != 'internal:editing' &&\n" +
    "\t\t\t!(item._type == 'Scene' && item.start_time <= 0.01)\n" +
    "\t\t\" ng-click=\"deleteEvent(item._id)\">Delete</button> <button ng-click=\"saveEvent()\" ng-disabled=\"blockDoubleClicks || item.urlForm.$invalid\">Save</button></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-annotation.html',
    "<div class=\"field\"><div class=\"label\">Speaker [{{appState.lang}}]</div><div class=\"input\"><div sxs-annotator-autocomplete=\"annotators\" item=\"item\" ng-model=\"item.annotator\"></div></div></div><div class=\"field\"><div class=\"label\">Speaker thumbnail</div><div class=\"input\" ng-include=\"'templates/producer/upload-producer.html'\"></div></div><div class=\"field\"><div class=\"label\">Title [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.title\" x-inputtype=\"'input'\" autofocus></div></div><div class=\"field\"><div class=\"label\">Annotation [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.annotation\" x-inputtype=\"'textarea'\" autofocus></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-file.html',
    "<div class=\"field\"><div class=\"label\">Title [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.title\" x-inputtype=\"'input'\" autofocus></div></div><div class=\"field\"><div class=\"label\">File</div><div class=\"input\" ng-include=\"'templates/producer/upload-producer.html'\"></div></div><div class=\"field\"><div class=\"label\">Description [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-image.html',
    "<div class=\"field\"><div class=\"label\">Title [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.title\" x-inputtype=\"'input'\" autofocus></div></div><div class=\"field\"><div class=\"label\">Image</div><div class=\"input\" ng-include=\"'templates/producer/upload-producer.html'\"></div></div><div class=\"field\"><div class=\"label\">Description [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-link.html',
    "<div class=\"field\"><div class=\"label\">Title [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.title\" x-inputtype=\"'input'\" autofocus></div></div><div class=\"field\"><div class=\"label\">URL</div><div class=\"input\"><form class=\"doValidate\" name=\"urlForm\"><input itt-valid-item-url=\"\" item=\"item\" name=\"itemUrl\" ng-model-options=\"{ updateOn: 'blur' }\" ng-model=\"item.url\"></form></div></div><div class=\"field\"><div class=\"label\">Image</div><div class=\"input\" ng-include=\"'templates/producer/upload-producer.html'\"></div></div><div class=\"field\"><div class=\"label\">Description [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-question.html',
    "<div class=\"field\"><div class=\"label\">Question type</div><div class=\"input\"><select ng-model=\"item.data._plugin.questiontype\"><option value=\"mc-poll\">Poll</option><option value=\"mc-formative\">Formative</option></select></div></div><div class=\"field\"><div class=\"label\">Title [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.title\" x-inputtype=\"'input'\" autofocus></div></div><div class=\"field\"><div class=\"label\">Question text</div><div class=\"input\" sxs-input-i18n=\"item.data._plugin.questiontext\" x-inputtype=\"'textarea'\"></div></div><div class=\"field\"><div class=\"label\">Image (optional)</div><div class=\"input\" ng-include=\"'templates/producer/upload-producer.html'\"></div></div><div class=\"field\" ng-repeat=\"distractor in item.data._plugin.distractors track by $index\"><div class=\"label\">{{$index | alpha}} &nbsp;<input type=\"checkbox\" ng-model=\"distractor.correct\" ng-if=\"item.data._plugin.questiontype == 'mc-formative'\"></div><div class=\"input\" sxs-input-i18n=\"distractor.text\" x-inputtype=\"'textarea'\"></div></div><div class=\"field\"><div class=\"input\"><button ng-click=\"addDistractor($event)\">Add distractor</button></div></div><div class=\"field\" ng-if=\"item.data._plugin.questiontype == 'mc-formative'\"><div class=\"label\">Feedback when correct</div><div class=\"input\" sxs-input-i18n=\"item.data._plugin.correctfeedback\" x-inputtype=\"'textarea'\"></div></div><div class=\"field\" ng-if=\"item.data._plugin.questiontype == 'mc-formative'\"><div class=\"label\">Feedback when incorrect</div><div class=\"input\" sxs-input-i18n=\"item.data._plugin.incorrectfeedback\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-scene.html',
    "<div class=\"field\"><div class=\"label\">Scene Title [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.title\" x-inputtype=\"'input'\" autofocus></div></div><div class=\"field\"><div class=\"label\">Description [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-transcript.html',
    "<div class=\"field\"><div class=\"label\">Speaker [{{appState.lang}}]</div><div class=\"input\"><div sxs-annotator-autocomplete=\"annotators\" item=\"item\" ng-model=\"item.annotator\"></div></div></div><div class=\"field\"><div class=\"label\">Speaker thumbnail</div><div class=\"input\" ng-include=\"'templates/producer/upload-producer.html'\"></div></div><div class=\"field\"><div class=\"label\">Transcript [{{appState.lang}}]</div><div class=\"input\" sxs-input-i18n=\"item.annotation\" x-inputtype=\"'textarea'\" autofocus></div></div>"
  );


  $templateCache.put('templates/producer/item/producer-video.html',
    "<span class=\"eventIcon icon-video\"></span><div class=\"field\"><small><div style=\"width:20%; display:inline-block\"></div><div style=\"width:48%; display:inline-block\">Link to a video on YouTube...</div><div style=\"width:32%; display:inline-block\">...or record your own</div></small></div><div ng-show=\"isRecordingVideo\" class=\"ytRecordWidgetFloater\"><div id=\"recordWidgetContainer\"></div></div><div class=\"field\"><div class=\"label\">Video</div><div class=\"input\"><div style=\"width:60%; display:inline-block; padding-right: 5%\"><input ng-model=\"item.yturl\"></div><div style=\"width:40%; display:inline-block\"><button class=\"button\" ng-click=\"startRecordVideo()\" style=\"width: 48%; margin-right: 4%\"><span ng-if=\"isRecordingVideo\">Cancel</span> <span ng-if=\"!isRecordingVideo\">Record</span></button></div><small ng-if=\"isRecordingVideo\">Click the \"Record from webcam\" button above (requires Adobe Flash)</small> <small ng-if=\"isProcessingVideo\">Your video is being processed by YouTube and will appear automatically in this episode when it is ready. (This may take a few minutes; you can safely continue editing or close this window.)</small></div></div><div class=\"field\" ng-if=\"(item.url || item.yturl) && !(isRecordingVideo || isProcessingVideo)\"><div class=\"label\">YouTube url</div><div class=\"input\"><small ng-if=\"item.url\">{{item.url | stripParams}}</small> <small ng-if=\"item.yturl && !item.url\">(No valid YouTube video found)</small></div></div><div class=\"field\"><div class=\"label\">Title</div><div class=\"input\"><input ng-model=\"item.title.en\" autofocus></div></div><div class=\"field\"><div class=\"label\">Description</div><div class=\"input\"><textarea ng-model=\"item.description.en\" rows=\"4\"></textarea></div></div>"
  );


  $templateCache.put('templates/producer/item/sxs-annotation.html',
    " <span class=\"eventIcon icon-comment\"></span><div class=\"field\"><div class=\"label\">Comment</div><div class=\"input\" sxs-input-i18n=\"item.annotation\" autofocus x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/sxs-file.html',
    "<span class=\"eventIcon icon-file\"></span><div class=\"field\"><div class=\"label\">Title</div><div class=\"input\"><input ng-model=\"item.title.en\" autofocus></div></div><div class=\"field\"><div class=\"label\">File</div><div class=\"input\" ng-include=\"'templates/producer/upload-sxs.html'\"></div></div><div class=\"field\"><div class=\"label\">Description</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/sxs-image.html',
    "<span class=\"eventIcon icon-image\"></span><div class=\"field\"><div class=\"label\">Title</div><div class=\"input\"><input ng-model=\"item.title.en\" autofocus></div></div><div class=\"field\"><div class=\"label\">Image</div><div class=\"input\" ng-include=\"'templates/producer/upload-sxs.html'\"></div></div><div class=\"field\"><div class=\"label\">Description</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/sxs-link.html',
    "<span class=\"eventIcon icon-link\"></span><div class=\"field\"><div class=\"label\">Title</div><div class=\"input\"><input ng-model=\"item.title.en\" autofocus></div></div><div class=\"field\"><div class=\"label\">URL</div><div class=\"input\"><form name=\"urlForm\"><input itt-valid-item-url=\"\" item=\"item\" name=\"itemUrl\" ng-model-options=\"{ updateOn: 'blur' }\" ng-model=\"item.url\"></form></div></div><div class=\"field\"><div class=\"label\">Description</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/sxs-question.html',
    "<span class=\"eventIcon icon-question\"></span><div class=\"field\"><div class=\"label\">Question type</div><div class=\"input\"><select ng-model=\"item.data._plugin.questiontype\"><option value=\"mc-poll\">Poll</option><option value=\"mc-formative\">Formative</option></select></div></div><div class=\"field\"><div class=\"label\">Question text</div><div class=\"input\" autofocus sxs-input-i18n=\"item.data._plugin.questiontext\" x-inputtype=\"'textarea'\"></div></div><div class=\"field\"><div class=\"label\">Question Title</div><div class=\"input\"><input ng-model=\"item.title.en\" autofocus></div></div><div class=\"field\"><div class=\"label\">Image (optional)</div><div class=\"input\" ng-include=\"'templates/producer/upload-sxs.html'\"></div></div><div class=\"field\" ng-repeat=\"distractor in item.data._plugin.distractors track by $index\"><div class=\"label\">{{$index | alpha}} &nbsp;<input type=\"checkbox\" ng-model=\"distractor.correct\" ng-if=\"item.data._plugin.questiontype == 'mc-formative'\"></div><div class=\"input\" sxs-input-i18n=\"distractor.text\" x-inputtype=\"'textarea'\"></div></div><div class=\"field\"><div class=\"input\"><button ng-click=\"addDistractor($event)\">Add distractor</button></div></div><div class=\"field\" ng-if=\"item.data._plugin.questiontype == 'mc-formative'\"><div class=\"label\">Feedback when correct</div><div class=\"input\" sxs-input-i18n=\"item.data._plugin.correctfeedback\" x-inputtype=\"'textarea'\"></div></div><div class=\"field\" ng-if=\"item.data._plugin.questiontype == 'mc-formative'\"><div class=\"label\">Feedback when incorrect</div><div class=\"input\" sxs-input-i18n=\"item.data._plugin.incorrectfeedback\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/item/sxs-video.html',
    "<span class=\"eventIcon icon-video\"></span><div class=\"field\"><small><div style=\"width:20%; display:inline-block\"></div><div style=\"width:80%; display:inline-block\">Link to a video on YouTube...</div></small></div><div class=\"field\"><div class=\"label\">YouTube url</div><div class=\"input\"><input ng-model=\"item.yturl\"><small ng-if=\"item.url\">{{item.url | stripParams}}</small> <small ng-if=\"item.yturl && !item.url\">(No valid YouTube video found)</small></div></div><div class=\"field\"><div class=\"label\">Title</div><div class=\"input\"><input ng-model=\"item.title.en\" autofocus></div></div><div class=\"field\"><div class=\"label\">Description</div><div class=\"input\" sxs-input-i18n=\"item.description\" x-inputtype=\"'textarea'\"></div></div>"
  );


  $templateCache.put('templates/producer/questionauthoring.html',
    "<div style=\"margin:1em\"><p>This is a standalone editor for question items. Fill in the fields below, then copy the JSON data below into the existing authoring tool. To edit an existing question paste its JSON into the json field and the editor will separate it out into editable fields.</p><table class=\"authoringForm\"><tr><td class=\"label\">Question type</td><td><select ng-model=\"question.questiontype\"><option value=\"mc-poll\">Poll</option><option value=\"mc-formative\">Formative</option></select></td></tr><tr><td class=\"label\">Question text</td><td><textarea rows=\"4\" ng-model=\"question.questiontext\">\n" +
    "\t\t\t\t</textarea></td></tr><tr><td colspan=\"2\">Answer choices. <span ng-if=\"question.questiontype == 'mc-formative'\">Check the correct answer (if more than one is selected, either will count as correct).</span>To remove an answer choice, just leave it blank.</td></tr><tr ng-repeat=\"distractor in question.distractors\"><td class=\"label\"><input type=\"checkbox\" ng-model=\"distractor.correct\" ng-if=\"question.questiontype == 'mc-formative'\"></td><td><input ng-model=\"distractor.text\"></td></tr><tr><td class=\"label\"><a ng-click=\"addDistractor()\">add another</a></td><td></td></tr><tr ng-if=\"question.questiontype == 'mc-formative'\"><td class=\"label\">Feedback for correct answer</td><td><input ng-model=\"question.correctfeedback\"></td></tr><tr ng-if=\"question.questiontype == 'mc-formative'\"><td class=\"label\">Feedback for incorrect answer</td><td><input ng-model=\"question.incorrectfeedback\"></td></tr><tr><td colspan=\"2\"><br><hr><br></td></tr><tr><td class=\"label\">JSON data: <span ng-if=\"editwarning\">Invalid JSON!</span></td><td><textarea rows=\"10\" ng-model=\"pluginjson\"></textarea></td></tr></table><br><hr><br><p class=\"label\">Question preview:</p><div class=\"item\"><div ng-if=\"preview\" itt-item=\"questionpreview\"></div></div></div>"
  );


  $templateCache.put('templates/producer/upload-masterasset.html',
    "<div ng-if=\"showAssetPicker\" class=\"floatAssetPicker\"><div class=\"scrollContainer\"><div sxs-container-assets=\"episodeContainerId\"></div></div><div class=\"controlsContainer\"><button ng-click=\"endChooseAsset();\">Cancel</button></div></div><div><div ng-if=\"(masterAsset.original_filename) && !showUploadButtonsMaster\">{{masterAsset.display_name}} <button class=\"button\" ng-click=\"replaceAsset('Master')\">Replace this asset</button></div><div ng-if=\"showUploadButtonsMaster || !(masterAsset.original_filename)\"><span ng-if=\"showUploadFieldMaster\"><div itt-asset-uploader=\"episodeContainerId\" callback=\"assetUploaded\"></div></span> <span ng-if=\"!showUploadFieldMaster\"><button class=\"button\" ng-click=\"chooseAsset('Master')\">Browse uploaded assets</button> <button class=\"button\" ng-click=\"toggleUpload('Master')\">Upload new asset</button></span></div></div>"
  );


  $templateCache.put('templates/producer/upload-poster.html',
    "<div ng-if=\"showAssetPicker\" class=\"floatAssetPicker\"><div class=\"scrollContainer\"><div sxs-container-assets=\"episodeContainerId\"></div></div><div class=\"controlsContainer\"><button ng-click=\"endChooseAsset();\">Cancel</button></div></div><div><div ng-if=\"episode.poster && !showUploadButtonsPoster\">{{episode.poster.display_name}} <button class=\"button\" ng-click=\"replaceAsset('Poster')\">Replace this</button></div><div ng-if=\"showUploadButtonsPoster || !episode.poster\"><span ng-if=\"showUploadFieldPoster\"><div itt-asset-uploader=\"episodeContainerId\" callback=\"posterUploaded\"></div></span> <span ng-if=\"!showUploadFieldPoster\"><button class=\"button\" ng-click=\"chooseAsset('Poster')\">Browse uploaded</button> <button class=\"button\" ng-click=\"toggleUpload('Poster')\">Upload new</button></span></div></div>"
  );


  $templateCache.put('templates/producer/upload-producer.html',
    "<div ng-if=\"showAssetPicker\" class=\"floatAssetPicker\"><div class=\"scrollContainer\"><div sxs-container-assets=\"episodeContainerId\"></div></div><div class=\"controlsContainer\"><button ng-click=\"endChooseAsset();\">Cancel</button></div></div><div><div ng-if=\"item.asset && !showUploadButtons\">{{item.asset.display_name}} <button class=\"button\" ng-click=\"replaceAsset()\">Replace this</button></div><div ng-if=\"showUploadButtons || !item.asset\"><span ng-if=\"showUploadField\"><div itt-asset-uploader=\"episodeContainerId\" callback=\"assetUploaded\"></div></span> <span ng-if=\"!showUploadField\"><button class=\"button\" ng-click=\"chooseAsset()\">Browse uploaded</button> <button class=\"button\" ng-click=\"toggleUpload()\">Upload new</button></span></div></div>"
  );


  $templateCache.put('templates/producer/upload-sxs.html',
    "<div><div ng-if=\"(item.asset) && !showUploadButtons\">{{item.asset.display_name}} <button class=\"button\" ng-click=\"replaceAsset(item.asset._id)\">Replace this asset</button></div><div ng-if=\"showUploadButtons || !(item.asset)\"><div ng-if=\"item.producerItemType === 'image'\" itt-asset-uploader=\"\" callback=\"assetUploaded\" mime-types=\"image/*\" instructions=\"We currently accept all image files.\" error-text=\"Please verify that the file you are trying to upload is an image.\"></div><div ng-if=\"item.producerItemType === 'file'\" itt-asset-uploader=\"\" callback=\"assetUploaded\" mime-types=\"application/*, text/*, audio/*, model/*\" instructions=\"We currently accept all non-image or non-video files.\" error-text=\"Please make sure you are not trying to upload an image or video file.\"></div></div></div>"
  );


  $templateCache.put('templates/root.html',
    "<div class=\"rootLogin standaloneAncillaryPage\" itt-login=\"\"><div class=\"inner\"><div ng-if=\"appState.user._id\"><div itt-user=\"\"></div></div><div ng-if=\"!appState.user._id\"><form ng-submit=\"adminLogin()\"><h1>Sign in to Telling STORY</h1><label><span>Username</span><input type=\"email\" name=\"auth_key\" ng-model=\"loginForm.auth_key\"></label><label><span>Password</span><input type=\"password\" name=\"password\" ng-model=\"loginForm.password\"></label><input class=\"submit button\" type=\"submit\" value=\"Sign in\"><span class=\"error\" ng-if=\"badlogin\">Sorry, try again?</span></form></div><br style=\"clear:both\"></div><small ng-if=\"!appState.user._id\"><a href=\"{{apiDataBaseUrl}}/oauth2\">OAuth</a></small></div>"
  );


  $templateCache.put('templates/scene/1col.html',
    "<div class=\"scene onecol\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div itt-magnet=\"\" class=\"videoMagnet\" ng-class=\"{hasLeftSidebar: mainContentHasLeftSidebar, hasRightSidebar: mainContentHasRightSidebar}\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"col\"><div class=\"pane mainPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in mainBgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (mainContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (mainContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: mainContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: mainContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: mainContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (contentItems | isCurrent) : contentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/2colL.html',
    "<div class=\"scene twocol\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"videoPositioner\"><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div></div><div class=\"col col1\"><div class=\"pane mainPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in (mainBgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (mainContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (mainContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: mainContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: mainContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: mainContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><img src=\"images/aspectratiopreserver-16x9.gif\" class=\"matchVideoHeight\"><div class=\"clear\"></div><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (mainContentItems | isCurrent) : mainContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div><div class=\"col col2\"><div class=\"pane altPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in (altBgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (altContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (altContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: altContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: altContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: altContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><img src=\"images/aspectratiopreserver-16x9.gif\" class=\"matchVideoHeight\"><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (altContentItems | isCurrent) : altContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in (altFgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/2colR.html',
    "<div class=\"scene twocol\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"videoPositioner\"><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div></div><div class=\"col col1\"><div class=\"pane altPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in (altBgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (altContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (altContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: altContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: altContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: altContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><img src=\"images/aspectratiopreserver-16x9.gif\" class=\"matchVideoHeight\"><div class=\"clear\"></div><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (altContentItems | isCurrent) : altContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in (altFgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div><div class=\"col col2\"><div class=\"pane mainPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in (mainBgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (mainContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (mainContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: mainContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: mainContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: mainContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><img src=\"images/aspectratiopreserver-16x9.gif\" class=\"matchVideoHeight\"><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (mainContentItems | isCurrent) : mainContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/centerVV-Mondrian.html',
    "<div class=\"scene centerVV-mondrian\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"col\"><div class=\"pane altPane stretchToViewport\"><div class=\"fill bgLayer bg-alt\"><div class=\"item animate\" ng-repeat=\"item in altBgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (altContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (altContentItems).length == 1,\n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: altContentHasLeftSidebar,\n" +
    "\t\t\t\thasRightSidebar: altContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: altContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate mondrian\" ng-repeat=\"item in showCurrent ? (altContentItems | isCurrent) : altContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in altFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div><div class=\"col\"><div class=\"fill bgLayer bg-main\"><div ng-if=\"currentMainBgItems.length > 0\" class=\"item animate\" ng-repeat=\"item in currentMainBgItems = (mainBgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div ng-if=\"currentMainBgItems.length === 0\"><div class=\"static-bg__main--mondrian\"></div></div></div><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"pane mainPane\"><div class=\"content contentLayer stretchToViewport\" ng-class=\"{isNarrow: isNarrow, isEmpty: mainContentItems.length == 0}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in mainItems = (mainContentItems | isCurrent | filter:byPullquoteOrH2 )\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/centerVV.html',
    "<div class=\"scene centerVV\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"col\"><div class=\"static-bg__main\" ng-style=\"setBgImgUrl(scene.items, 'mainCol')\"></div><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"pane mainPane\"><div class=\"content contentLayer stretchToViewport\" ng-class=\"{singleitem: mainContentItems.length==1, isNarrow: isNarrow, isEmpty: mainContentItems.length == 0}\" itt-width-watch=\"\"><div class=\"item animate centerVV-h2\" ng-repeat=\"item in mainItems = (mainContentItems | isCurrent | filter:byPullquoteOrH2)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div></div></div><div class=\"col\"><div class=\"static-bg__alt\" ng-style=\"setBgImgUrl(scene.items, 'altCol')\"></div><div class=\"pane altPane stretchToViewport\"><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (altContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (altContentItems).length == 1,\n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: altContentHasLeftSidebar,\n" +
    "\t\t\t\thasRightSidebar: altContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: altContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (altContentItems | isCurrent) : altContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/centered.html',
    "<div class=\"scene centered\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"col\"><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"pane mainPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in mainBgItems| isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: (contentItems | isCurrent).length == 1,\n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: contentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in (contentItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/centeredPro.html',
    "<div class=\"scene centered-pro\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div itt-item=\"item\" class=\"item animate banner-pull-quote\" ng-class=\"item.styleCss + ' ' + item.state\" ng-repeat=\"item in (contentItems | isCurrent | filter:{templateUrl: 'templates/item/text-h1.html'} )\"></div><div class=\"col\"><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"pane mainPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in mainBgItems| isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: (contentItems | isCurrent).length == 1,\n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: contentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in (contentItems | isCurrent | filter:byPullquoteOrH2  )\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/cornerH.html',
    "<div class=\"scene cornerH\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"row\"><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"pane mainPane matchVideoHeight\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in mainBgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer\" ng-class=\"{singleitem: mainContentItems.length==1, isNarrow: isNarrow, isEmpty: mainContentItems.length == 0}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in mainItems = (mainContentItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div><div class=\"row\"><div class=\"pane altPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in altBgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (altContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (altContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: altContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: altContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: altContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (altContentItems | isCurrent) : altContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in altFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/cornerV.html',
    "<div class=\"scene cornerV\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"col\"><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"pane mainPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in mainBgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{singleitem: mainContentItems.length==1, isNarrow: isNarrow, isEmpty: mainContentItems.length == 0}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in mainItems = (mainContentItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div><div class=\"col\"><div class=\"pane altPane stretchToViewport\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in altBgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer stretchToViewport\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (altContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (altContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: altContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: altContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: altContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (altContentItems | isCurrent) : altContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in altFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div></div></div>"
  );


  $templateCache.put('templates/scene/debug.html',
    "<pre>{{scene | pretty}}</pre>"
  );


  $templateCache.put('templates/scene/endingscreen.html',
    "<div class=\"endingscreen stretchToViewport\"><div class=\"pane introtext\"><p>Thanks for watching:&nbsp; <span ng-bind-html=\"episode.display_title\"></span></p><br></div><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div></div>"
  );


  $templateCache.put('templates/scene/landingscreen.html',
    "<div class=\"landingscreen stretchToViewportShort\"><div><div class=\"pane introtext\"><h1 ng-bind-html=\"episode.display_title\"></h1><p ng-bind-html=\"episode.display_description\"></p><br></div><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div><div class=\"landingscreen-end\"></div><div class=\"clear\"></div></div></div>"
  );


  $templateCache.put('templates/scene/pip.html',
    "<div class=\"scene pip\" ng-class=\"scene.styleCss + ' '+ scene.state\"><div class=\"pane altPane stretchToViewport\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in (altBgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer\" ng-class=\"{\n" +
    "\t\t\t\tsingleitem: showCurrent\n" +
    "\t\t\t\t\t? (altContentItems | isCurrent).length == 1\n" +
    "\t\t\t\t\t: (altContentItems).length == 1, \n" +
    "\t\t\t\tallowHighlights: !showCurrent,\n" +
    "\t\t\t\thasLeftSidebar: altContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: altContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: altContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in showCurrent ? (altContentItems | isCurrent) : altContentItems\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div><div class=\"clear\"></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in (altFgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div><div ng-class=\"{padForBottomToolbar: appState.videoControlsActive}\"><div class=\"videoPositioner\"><div itt-magnet=\"\" class=\"videoMagnet\"><img src=\"images/aspectratiopreserver-16x9.gif\"></div></div><div class=\"pane mainPane\"><div class=\"fill bgLayer\"><div class=\"item animate\" ng-repeat=\"item in (mainBgItems | isCurrent)\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"content contentLayer showCurrent\" ng-class=\"{\n" +
    "\t\t\t\thasLeftSidebar: mainContentHasLeftSidebar, \n" +
    "\t\t\t\thasRightSidebar: mainContentHasRightSidebar,\n" +
    "\t\t\t\tisNarrow: isNarrow,\n" +
    "\t\t\t\tisEmpty: mainContentItems.length == 0\n" +
    "\t\t\t}\" itt-width-watch=\"\"><div class=\"item animate\" ng-repeat=\"item in mainContentItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div><div class=\"clear\"></div></div></div><div class=\"fill fgLayer overlay\"><div class=\"item animate\" ng-repeat=\"item in mainFgItems | isCurrent\" ng-class=\"item.styleCss + ' ' + item.state\" itt-item=\"item\"></div></div></div>"
  );


  $templateCache.put('templates/searchpanel.html',
    "<div ng-class=\"episode.styleCss\"><div aria-label=\"sort toggle\" class=\"searchfilters\" aria-controls=\"sortableSearch\"><div>Sorted by <button tabindex=\"0\" class=\"fakeLink\" ng-click=\"toggleSortBy(sortBy)\" aria-label=\"toggles sort to {{getToggledValue(sortBy)}}\">{{getFriendlySortText(sortBy)}}</button></div></div><div class=\"scrollContainer\"><div class=\"searchResults content\" id=\"sortableSearch\" itt-width-watch=\"\" ng-class=\"{isNarrow: isNarrow}\"><div ng-if=\"sortBy == 'startTime'\" class=\"sortByTime\"><h1 ng-bind-html=\"episode.display_title\"></h1><div ng-repeat=\"scene in episode.scenes\"><h2 class=\"searchCategory\" ng-if=\"scene.start_time > 0 && ([scene.display_title] | filter:appState.searchText).length\" ng-bind-html=\"scene.display_title  | highlightSubstring: appState.searchText\"></h2><span ng-switch=\"appState.product\"><div ng-switch-when=\"producer\" ng-repeat=\"item in sceneItems=(scene.items | orderBy:'wtfchromesort')\" ng-show=\"([item.searchableText] | filter:appState.searchText).length\" class=\"item animate\" ng-class=\"item.state\" itt-item=\"item\" forcetemplate=\"searchresults-all\"></div><div ng-switch-default=\"\" ng-repeat=\"item in sceneItems=(scene.items | orderBy:'wtfchromesort' | filter:{cosmetic:false})\" ng-show=\"([item.searchableText] | filter:appState.searchText).length\" class=\"item animate\" ng-class=\"item.state\" itt-item=\"item\" forcetemplate=\"searchresults-all\"></div></span></div></div><div ng-if=\"sortBy == 'type'\" class=\"sortByType\"><div ng-repeat=\"category in typeCategories\"><h3 ng-if=\"matchedItems.length > 0\" ng-bind-html=\"showTypes[category].name\"></h3><div class=\"item animate\" ng-repeat=\"item in matchedItems=\n" +
    "\t\t\t\t\t\t(showTypes[category].items\n" +
    "\t\t\t\t\t\t| orderBy:'wtfchromesort'\n" +
    "\t\t\t\t\t\t)\" ng-show=\"\n" +
    "\t\t\t\t\t\t\t([item.searchableText] | filter:appState.searchText).length\n" +
    "\t\t\t\t\t\t\" ng-class=\"item.state\" itt-item=\"item\" forcetemplate=\"searchresults-all\"></div></div><div ng-if=\"(episode.items | filter:{'searchableText': appState.searchText||'', 'cosmetic': false}).length == 0\">(Nothing matched your search.)</div></div></div></div></div>"
  );


  $templateCache.put('templates/testbed-event.html',
    "<style>.testContentPane {\n" +
    "\tborder: 1px solid #000;\n" +
    "\tposition: absolute;\n" +
    "\toverflow: hidden;\n" +
    "\ttop: 3em;\n" +
    "\tleft: 2em;\n" +
    "\tright: 2em;\n" +
    "\tbottom: 10em;\n" +
    "}\n" +
    ".testEditorPane {\n" +
    "\tposition: absolute;\n" +
    "\tbottom: 0;\n" +
    "\tz-index: 2;\n" +
    "\tleft: 0;\n" +
    "\tright: 0;\n" +
    "\theight: 10em;\n" +
    "\toverflow-y: scroll;\n" +
    "}\n" +
    "label {\n" +
    "\tmargin: 0 2em;\n" +
    "}</style><div class=\"controls\"><label>Content pane type:<select size=\"1\" ng-model=\"testbed.contentType\" ng-init=\"testbed.contentType='content'\"><option value=\"content\">Content</option><option value=\"fill\">Overlay</option></select></label><label ng-if=\"testbed.contentType == 'content'\"><input type=\"checkbox\" ng-model=\"testbed.isNarrow\">Narrow content pane</label><label>Item state:<select size=\"1\" ng-model=\"item.state\" ng-init=\"item.state='isCurrent'\"><option value=\"isCurrent\">Current</option><option value=\"isPast\">Past</option><option value=\"isFuture\">Future</option></select></label><label><input type=\"checkbox\" ng-model=\"testbed.showCurrent\" ng-init=\"testbed.showCurrent = false;\">Hide non-current items</label></div><div class=\"testContentPane allowHighlights allowSidebars hasLeftSidebar hasRightSidebar {{testbed.contentType}}\" ng-class=\"{isNarrow: testbed.isNarrow, showCurrent: testbed.showCurrent}\"><div ng-if=\"!(testbed.showCurrent && item.state!='isCurrent')\" class=\"item animate\" itt-item=\"item\" ng-class=\"item.styleCss + ' ' + item.state\"></div></div><div class=\"testEditorPane\" itt-item-editor=\"item\"></div>"
  );


  $templateCache.put('templates/timeline-story.html',
    "<div class=\"timeline\" ng-show=\"!isSuppressed\" ng-cloak=\"\"><button tabindex=\"0\" ng-focus=\"showControls()\" class=\"button button-play\" ng-if=\"appState.timelineState == 'paused'\" ng-click=\"play()\"><span class=\"control-text\">Play</span></button> <button tabindex=\"0\" ng-focus=\"showControls()\" class=\"button button-pause\" ng-if=\"appState.timelineState != 'paused'\" ng-click=\"pause()\"><span class=\"control-text\">Pause</span></button><div class=\"progressbarBox\"><div class=\"pbarTop\"><span ng-if=\"appState.product == 'producer'\"><a class=\"button button-zoomout\" ng-if=\"zoomLevel != 1\" ng-click=\"zoomOut()\"><span class=\"control-text\">Zoom out</span></a> <small ng-if=\"zoomLevel != 1\">Zoom: {{zoomLevel*100}}%</small> <a class=\"button button-zoomin\" ng-click=\"zoomIn()\"><span class=\"control-text\">Zoom in</span></a></span></div><div class=\"pbarMain\"><button ng-focus=\"showControls()\" ng-class=\"{invisible: appState.time == 0}\" class=\"button button-prev\" ng-click=\"prevScene()\"><span class=\"control-text\">Previous</span></button> <button ng-focus=\"showControls()\" tabindex=\"0\" ng-class=\"{invisible: appState.time >= appState.duration-0.1}\" class=\"button button-next\" ng-click=\"nextScene()\"><span class=\"control-text\">Next</span></button><div class=\"progressbar\"><div class=\"mask\"><div class=\"progressbarContainer\" style=\"width: {{zoomLevel}}00%\"><div class=\"buffered\" ng-style=\"{width: appState.bufferedPercent+'%'}\"></div><div class=\"played\" ng-style=\"{width: markerPercent(appState.time)+'%'}\"></div></div></div><div class=\"progressbarContainer\" style=\"width: {{zoomLevel}}00%\"><div class=\"handle\" ng-show=\"isSeeking\" ng-style=\"{left: markerPercent(willSeekTo)+'%'}\"><div class=\"tip\" ng-show=\"seekHandleVisible\">{{willSeekTo | asTime}}</div></div><div class=\"tooltip\" ng-if=\"event.showTooltip\" ng-repeat=\"event in timeline.markedEvents\" ng-style=\"{left: markerPercent(event.start_time)+'%'}\"><span ng-if=\"!event.stop\" class=\"content\" ng-bind-html=\"event.display_title || '(&quot;Hidden&quot; scene)'\"></span> <span ng-if=\"event.stop\" class=\"content\">Stop item</span></div><div class=\"handle sxsHandle playhead\" ng-show=\"appState.editEvent\" ng-style=\"{left: markerPercent(appState.editEvent.start_time)+'%'}\"><div class=\"tip\" ng-click=\"\">{{appState.editEvent.start_time | asTime}}</div></div></div><div class=\"playhead mask\"><div class=\"progressbarContainer\" ng-style=\"{width: zoomLevel+'00%'}\"><div class=\"marker\" ng-mouseover=\"showTooltip(event);\" ng-mouseout=\"hideTooltip(event)\" ng-repeat=\"event in timeline.markedEvents\" ng-style=\"{left: markerPercent(event.start_time)+'%'}\" ng-if=\"event.stop || event.display_title || appState.product == 'producer'\" ng-class=\"{stop: event.type != 'Scene', mini: (event.type == 'Scene' && !event.display_title)}\"></div><div ng-if=\"appState.editEvent\" class=\"editingItem\" ng-style=\"{left: markerPercent(appState.editEvent.start_time)+'%', right: markerPercent(appState.duration - appState.editEvent.end_time)+'%'}\"></div></div></div></div></div><div class=\"pbarBottom\"><span class=\"timedisplay\">{{appState.time | asTime}} / {{appState.duration | asTime}} <span class=\"speedcontrol\" ng-if=\"appState.videoType == 'video' && !(appState.isTouchDevice)\"><button ng-focus=\"showControls()\" class=\"button-speedcontrol\" ng-click=\"changeSpeed(-0.25)\" aria-label=\"Slow down video\"><div ng-class=\"{arrowLeft: appState.timeMultiplier > 0.5}\"></div></button> <span class=\"speeddisplay\" ng-click=\"resetSpeed()\">{{appState.timeMultiplier}}x</span> <button ng-focus=\"showControls()\" class=\"button-speedcontrol\" ng-click=\"changeSpeed(0.25)\" aria-label=\"Speed up video\"><div ng-class=\"{arrowRight: appState.timeMultiplier < 2}\"></div></button></span></span> <span style=\"display:inline-block;height:1em;position:relative\" ng-if=\"episode.languages.length > 1\"><select size=\"1\" ng-model=\"appState.lang\" class=\"languageSelector\" ng-change=\"setNewLanguage()\" ng-options=\"language.code as ('['+language.code.toUpperCase()+']') for language in episode.languages\"></select></span> <button ng-focus=\"showControls()\" tabindex=\"0\" ng-if=\"appState.viewMode == 'watch'\" class=\"button button-captions\" ng-click=\"appState.hideCaptions=!appState.hideCaptions\" ng-class=\"{active: !appState.hideCaptions}\"><span class=\"control-text\">Captions</span></button> <a ng-if=\"appState.viewMode=='watch'\" class=\"button button-fullscreen active\" ng-click=\"viewMode('discover')\"><span class=\"control-text\">Exit fullscreen</span></a> <a ng-if=\"appState.viewMode!='watch'\" class=\"button button-fullscreen\" ng-click=\"viewMode('watch')\"><span class=\"control-text\">Fullscreen video</span></a> <span ng-if=\"!appState.isTouchDevice\"><button ng-focus=\"showControls()\" tabindex=\"0\" class=\"button button-mute {{audioIcon()}}\" ng-click=\"toggleMute()\"><span class=\"control-text\">Mute</span></button><itt-volume-slider></itt-volume-slider></span></div></div></div>"
  );


  $templateCache.put('templates/toolbar-story.html',
    "<div class=\"toolbar\"><div class=\"buttongroup nav-item scene-nav-btns\"><a ng-if=\"appState.productLoadedAs == 'narrative' && !narrative.disable_navigation\" class=\"button button-exitEpisode\" href=\"/#/story/{{narrative.path_slug.en}}\"><span>Exit</span></a> <button tabindex=\"0\" class=\"button button-nav\" ng-click=\"toggleNavPanel();\"><span>Scenes</span></button> </div><div class=\"nav-item toolbar-logos\"><img ng-src=\"images/customer/Narrasys_Logo.png\" id=\"toolbar-logo-big\" ng-if=\"episode.templateUrl === 'templates/episode/narrasys-pro.html' && appState.windowWidth > 500\"> <img ng-src=\"images/customer/Narrasys-Tree.png\" id=\"toolbar-logo-small\" ng-if=\"episode.templateUrl === 'templates/episode/narrasys-pro.html' && appState.windowWidth <= 500\"></div><div class=\"nav-item new-window-btn\"><div ng-if=\"appState.isFramed && (appState.productLoadedAs == 'player'\n" +
    "\t \t\t\t|| (appState.productLoadedAs == 'narrative'\n" +
    "\t \t\t\t&& !narrative.disable_new_window ) )\" class=\"escapegroup buttongroup\"><a class=\"button button-mainframeescape\" ng-click=\"pause()\" ng-href=\"{{newWindowUrl}}&t={{appState.time || 0}}&access_token={{appState.user.access_token}}\" target=\"_blank\"><span>New window</span></a></div></div><div class=\"nav-item searchgroup buttongroup\" ng-class=\"{cur: show.searchPanel}\"><button tabindex=\"2\" class=\"button button-search\" ng-click=\"toggleSearchPanel()\" aria-label=\"Search\" aria-expanded=\"{{show.searchPanel}}\"><span>Search</span></button><label for=\"searchtext\" class=\"hidden\">Search Text</label><input tabindex=\"2\" name=\"searchtext\" id=\"searchtext\" ng-show=\"show.searchPanel\" ng-model=\"appState.searchText\" ng-model-options=\"{ debounce: 200 }\"></div><div class=\"nav-item profilegroup buttongroup\"><a class=\"button button-preview\" ng-if=\"appState.productLoadedAs=='producer' && (userHasRole('admin') || userHasRole('customer admin'))\" ng-click=\"toggleProducerPreview()\"><span ng-if=\"appState.product == 'producer'\">Preview</span> <span ng-if=\"appState.product == 'player'\">Edit</span></a> <a class=\"button button-profile\" ng-hide=\"appState.user.roles[0].role === 'guest'\" ng-click=\"appState.show.profilePanel = !appState.show.profilePanel\"><span>Profile</span></a></div></div><div ng-cloak=\"\" ng-show=\"show.navPanel\" class=\"navPanel topDrawer\" ng-class=\"episode.styleCss\"><div class=\"parent\" ng-repeat=\"parent in episode.parents\" ng-bind-html=\"parent.display_name\"></div><div class=\"scene\" x-ng-if=\"scene.display_title\" x-ng-repeat=\"scene in episode.scenes\" x-ng-class=\"{currentScene: scene.isCurrent}\" x-ng-click=\"seek(scene.start_time)\"><span class=\"displayTime\">{{scene.displayStartTime}}</span><p><button class=\"fakeLink\" tabindex=\"0\" ng-bind-html=\"scene.display_title\" x-ng-class=\"{sceneLink: !scene.isCurrent}\" ng-focus=\"showControls()\"></button><br><span ng-bind-html=\"scene.display_description\"></span></p></div></div>"
  );


  $templateCache.put('templates/user.html',
    "<div class=\"userHome\"><p><i><span ng-bind=\"user.role_description\"></span></i></p><div ng-if=\"!(user.name === 'guest')\" style=\"float:right; width: 79px\"><div class=\"avatar\" ng-click=\"toggleUploadAvatar()\" style=\"cursor:pointer;cursor:hand\"><img ng-src=\"{{user.avatar || '/images/no-avatar.gif'}}\"></div><input ng-if=\"showUploadField && !uploads\" style=\"width: 70px\" type=\"file\" accept=\"image/*\" onchange=\"angular.element(this).scope().uploadAvatar(this.files)\"><progress ng-if=\"uploads\" style=\"width:79px\" ng-attr-max=\"{{uploadStatus[0].bytesTotal}}\" ng-attr-value=\"{{uploadStatus[0].bytesSent}}\"></progress></div><div style=\"margin-right:80px\"><label><span>Name</span><input class=\"userEditable\" ng-model=\"user.name\" ng-blur=\"updateUser()\"></label><span ng-if=\"!isGuest()\"><br><label><span>Email</span><input class=\"userEditable\" ng-model=\"user.email\" readonly></label></span></div><div style=\"clear:both; padding-top: 2em\"><a style=\"float:left\" target=\"_top\" href=\"/#/user\" class=\"button\" ng-if=\"inPlayer && user._id && appState.productLoadedAs != 'narrative'\">Home</a> <a style=\"float:right\" class=\"button\" ng-if=\"user._id && !appState.isFramed\" ng-click=\"logout()\">Sign out</a></div><div ng-if=\"!inPlayer\"><div ng-if=\"userHasRole('admin') || userHasRole('customer admin')\"><a href=\"/#/episodes\">Find episodes</a><br><a href=\"/#/stories\">Find narratives</a></div><div ng-if=\"!isGuest() && myPurchases\"><h3>Your purchases</h3><div class=\"narrativelist\" ng-repeat=\"purchase in myPurchases\"><div ng-if=\"purchase.daysUntilExpiration < 0\"><h3>{{purchase.narrativeData.name.en}}</h3><p>We're sorry, this purchase has expired.</p></div><div ng-if=\"purchase.daysUntilExpiration >=0 || !purchase.daysUntilExpiration\"><h3><a ng-href=\"/#/story/{{purchase.narrativeData.path_slug.en}}\">{{purchase.narrativeData.name.en}}</a></h3><p><i>{{purchase.daysUntilExpiration}} days remaining</i></p><p>{{purchase.narrativeData.description.en}}</p></div></div><div ng-if=\"myPurchases.length == 0\">You have not purchased any stories.</div></div></div></div>"
  );


  $templateCache.put('templates/video.html',
    "<div class=\"video\"><itt-youtube tabindex=\"-1\" ng-if=\"video.urls.youtube.length\" embed-url=\"{{video.urls.youtube[0]}}\" on-player-state-change=\"playerStateChange\" on-ready=\"onReady\" main-player=\"true\" player-id=\"video._id\"></itt-youtube><video ng-if=\"!video.urls.youtube || !video.urls.youtube.length\" aria-label=\"media player\"><source class=\"m3u8\" ng-if=\"video.urls.m3u8[0]\" ng-src=\"{{video.urls.m3u8[0]}}\" type=\"application/x-mpegURL\"><source class=\"mpeg4\" ng-if=\"video.urls.mp4[video.curStream]\" ng-src=\"{{video.urls.mp4[video.curStream]}}\" type=\"video/mp4\"><source class=\"webm\" ng-if=\"video.urls.webm[video.curStream]\" ng-src=\"{{video.urls.webm[video.curStream]}}\" type=\"video/webm\"><p>Oh no! Your browser does not support the HTML5 Video element.</p></video><div ng-if=\"poster && appState.time == 0\" class=\"poster overlay fill\" ng-style=\"{backgroundImage:'url('+poster.url+')'}\"></div><div ng-hide=\"( video.urls.youtube.length && !appState.hasBeenPlayed && appState.isTouchDevice)\" ng-click=\"videoClick()\" class=\"videoMask\" ng-class=\"{\n" +
    "\t\tplay: appState.timelineState == 'paused',\n" +
    "\t\tfirstplay: !appState.hasBeenPlayed && !poster,\n" +
    "\t\trewind: (appState.time > 0 && appState.time >= video.duration - 0.3),\n" +
    "\t\ttranscoding: !video.isTranscoded()\n" +
    "\t}\"><div class=\"convertingMessage\" ng-if=\"!video.isTranscoded()\">This video is being converted to a web-playable format and will be ready in a&nbsp;few&nbsp;minutes</div></div></div>"
  );

}]);

'use strict';

// Expose the global window.config object as an injectable
angular.module('com.inthetelling.story')
	.factory('config', function () {
		var config = window.config ? window.config : {};

		// Find out the API data url, if not specified:
		if (!config.apiDataBaseUrl) {
			config.apiDataBaseUrl = "//" + window.location.host;
		}

		if (!config.localStorageKey) {
			config.localStorageKey = "storyToken";
		}

		if (!config.youtube) {
			config.youtube = {
				domain: "//gdata.youtube.com/",
				timeout: 5000
			};
		}

		return config;
	});

'use strict';

/*
	Stash for shared information, to save us a lot of $watching and $emitting.
	It's convenient.  Maybe -too- convenient.

	I have a sinking feeling this is probably an elaborate wheel-reinvention of $rootScope, but hey, it works

*/

/**
 * @ngdoc service
 * @name iTT.service:appState
 * @description
 * POJO designed to store application state during app runtime. All values are initiazed as boolean and set to false.
 * Values are then updated in place by injecting the appState into the relevant destination and overwriting the initial values
 * @requires $interval
 * @requires config
 * @property {Object} user whatever authSvc gets back from getAccessToken
 * @property {String} episodeId ID of current episode (Initialized as bool set to false).
 * @property {String} episodeSegmentId ID of current episode segment (only relevant in narratives)
 * @property {String} narrativeId also only relevant in narratives
 * @property {String} timelineId ID of timeline
 * @property {Boolean} isFramed are we inside an iframe?  Don't use !== because IE8 gets it wrong
 * @property {Boolean} isTouchDevice Determines whether or not client is touch enabled via user agent
 * @property {Boolean} isIphone iPhone has weird video handling, see  timelineSvc
 * @property {Number} windowWidth width of content pane, updated every 50ms
 * @property {Number} windowHeight height of content pane, updated every 50ms
 * @property {String} viewMode Sets view mode based upon window width
 * @property {Number} producerEditLayer a bit hacky, this.  Only has an effect in producer in discover mode; 0 is default, -1 is background layers only, 1 is foreground layers only
 * @property {Number} time current playhead position (in seconds) relative to timeline NOT TO EPISODE!
 * @property {Number} bufferedPercent portion of video that has been buffered (as pct instead of time because that's how youtube reports it, and that's what we end up displaying anyway)
 * @property {Number} timeMultiplier sets player speed (0.5 = half speed; 2=double;etc)
 * @property {Number} duration duration of timeline (in seconds)
 * @property {String} timelineState "playing", "paused", or "buffering" (set by timelineSvc). Future = "locked" (by stop question or etc)
 * @property {Boolean} hasBeenPlayed set to true after first time the video plays (used so we can interrupt that first play with a helpful help)
 * @property {Number} volume Audio for main video
 * @property {Boolean} muted audio for main video
 * @property {Boolean} hideCaptions visibility of "closed captions" in watch mode
 * @property {Object} show Object with SearchPanel and NavPanel properties which are booleans
 * @property {Boolean} videoControlsActive whether bottom toolbar is visible
 * @property {Boolean} videoControlsLocked force bottom toolbar to stay in its current visible/hidden state
 * @property {Object} itemDetail Put item data here to show it as a modal overlay
 * @property {Boolean} autoscroll scroll window to make current items visible (in relevant modes)
 * @property {Boolean} autoscrollBlocked User has disabled autoscroll
 * @property {String} product "player", "sxs", or "producer"
 * @property {String} productLoadedAs same as product but only set on initial load, this lets producer toggle back to player preview temporarily
 * @property {Object} editEvent Scene or item currently being edited by user.
 * @property {Object} editEpisode Episode currently being edited by user. yes I did kind of paint myself into a corner here
 * @property {Object} lang set to false so the episode default knows when to override it
 */
angular.module('com.inthetelling.story')
	.factory('appState', ["$interval", "config", function ($interval, config) {

		var svc = {};

		svc.init = function () {
			svc.user = svc.user || {}; // whatever authSvc gets back from getAccessToken
			svc.episodeId = false; // ID of current episode
			svc.episodeSegmentId = false; // ID of current episode segment (only relevant in narratives)
			svc.narrativeId = false; // also only relevant in narratives
			svc.timelineId = false; // ditto
			/* jshint -W116 */
			svc.isFramed = (window.parent != window); // are we inside an iframe?  Don't use !== because IE8 gets it wrong
			/* jshint +W116 */

			// sniff sniff
			svc.isTouchDevice = (/iPad|iPod|iPhone/.test(navigator.platform) || /Android/.test(navigator.userAvent));
			svc.isIPhone = (navigator.platform.match(/iPod|iPhone/)); // iPhone has weird video handling, see  timelineSvc

			svc.windowWidth = 0;
			svc.windowHeight = 0;

			svc.viewMode = ($(window).width() > 480) ? 'discover' : 'review'; // default view mode
			svc.producerEditLayer = 0; // a bit hacky, this.  Only has an effect in producer in discover mode; 0 is default, -1 is background layers only, 1 is foreground layers only

			svc.time = 0; // current playhead position (in seconds) relative to timeline NOT TO EPISODE!
			svc.bufferedPercent = 0; // portion of video that has been buffered (as pct instead of time because that's how youtube reports it, and that's what we end up displaying anyway)
			svc.timeMultiplier = 1; // sets player speed (0.5 = half speed; 2=double;etc)
			svc.duration = 0; // duration of timeline (in seconds)
			svc.timelineState = 'paused'; // "playing", "paused", or "buffering" (set by timelineSvc). Future = "locked" (by stop question or etc)
			svc.hasBeenPlayed = false; // set to true after first time the video plays (used so we can interrupt that first play with a helpful help)
			svc.volume = 100; // Audio for main video
			svc.muted = false; // audio for main video
			svc.hideCaptions = false; // visibility of "closed captions" in watch mode
			svc.show = {
				searchPanel: false,
				// helpPanel: false,
				navPanel: false
			};
			svc.videoControlsActive = false; // whether bottom toolbar is visible
			svc.videoControlsLocked = false; // force bottom toolbar to stay in its current visible/hidden state
			svc.itemDetail = false; // Put item data here to show it as a modal overlay
			svc.autoscroll = false; //scroll window to make current items visible (in relevant modes)
			svc.autoscrollBlocked = false; // User has disabled autoscroll

			svc.product = svc.product; // "player", "sxs", or "producer"
			svc.productLoadedAs = svc.productLoadedAs; // same as product but only set on initial load, this lets producer toggle back to player preview temporarily
			if (svc.product === 'sxs' || svc.product === 'producer') {
				svc.crossEpisodePath = svc.product;
			} else {
				svc.crossEpisodePath = "episode"; // yeah, that was kind of a dumb decision to switch from episode to "player"
			}

			svc.editEvent = false; // Scene or item currently being edited by user
			svc.editEpisode = false; // Episode currently being edited by user. yes I did kind of paint myself into a corner here
			// svc.youtubeIsReady = false; // Set to true when youtube API finishes loading.  DO NOT set this to false on init, otherwise navigating from episode to episode breaks (we reinit on new episode but that won't trigger youtube's ready event)
			svc.lang = false; // set to false so the episode default knows when to override it
		};
		svc.init();

		// workaround for iOS crasher (can't bind to window.resize when inside an iframe)
		$interval(function () {
			svc.windowHeight = angular.element(window).height();
			svc.windowWidth = angular.element(window).width();
		}, 50, 0, false);

		if (config.debugInBrowser) {
			console.log("appState:", svc);
		}

		return svc;
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.factory('authSvc', ["config", "$routeParams", "$http", "$q", "$location", "ittUtils", "appState", "modelSvc", "errorSvc", function (config, $routeParams, $http, $q, $location, ittUtils, appState, modelSvc, errorSvc) {
		// console.log('authSvc factory');
		var svc = {};
		var Roles = {
			ADMINISTRATOR: "admin",
			INSTRUCTOR: "instructor",
			STUDENT: "student",
			GUEST: "guest",
			CUSTOMER_ADMINISTRATOR: 'customer admin'
		};

		var Resources = {
			CUSTOMER: 'Customer'
		};

		svc.isGuest = function isGuest() {
			var _isGuest = true;
			angular.forEach(appState.user.roles, function(r) {
				if (r.role !== Roles.GUEST) {
					_isGuest = false;
				}
			});

			return _isGuest;
		};

		svc.userHasRole = function (role) {
			if (appState.user && appState.user.roles) {
				for (var i = 0; i < appState.user.roles.length; i++) {
					if (appState.user.roles[i].role === role) {
						if (!(role === Roles.ADMINISTRATOR && ittUtils.existy(appState.user.roles[i].resource_id))) {
							return true;
						}
					} else if (role === Roles.CUSTOMER_ADMINISTRATOR && appState.user.roles[i].role === Roles.ADMINISTRATOR &&
						ittUtils.existy(appState.user.roles[i].resource_id) &&
						appState.user.roles[i].resource_type === Resources.CUSTOMER) {
						return true;
					}
				}
			}
			return false;
		};

		svc.getRoleForNarrative = function (narrativeId, roles) {
			roles = typeof roles !== 'undefined' ? roles : appState.user.roles;
			var role = "";
			var exitLoop = false;
			if (roles) {
				for (var i = 0; i < roles.length; i++) {
					switch (roles[i].role) {
					case Roles.ADMINISTRATOR:
						if (roles[i].resource_id && roles[i].resource_id !== narrativeId) {
							continue; // they are an admin, but not in this narrative, so let's keep going
						} else {
							role = "admin";
							exitLoop = true; //if they are an admin, then we can just get out as it trumps
						}
						break;
					case Roles.INSTRUCTOR:
						if (roles[i].resource_id && roles[i].resource_id !== narrativeId) {
							continue;
						} else {
							role = roles[i].role;
						}
						break;
					case Roles.STUDENT:
						if (roles[i].resource_id && roles[i].resource_id !== narrativeId) {
							continue;
						} else {
							role = role === "instructor" ? role : roles[i].role;
						}
						break;
					case Roles.GUEST:
						if (roles[i].resource_id && roles[i].resource_id !== narrativeId) {
							continue;
						} else {
							role = role === "instructor" || role === "student" ? role : roles[i].role;
						}
						break;
					}
					if (exitLoop) {
						break;
					}
				}
			}
			return role;
		};

		svc.getDefaultProductForRole = function (role) {
			/*
			This was making it impossible for users with admin role to see editor or player interface.
			For now, producer should be used only at the /#/episode urls, editor at the narrative urls
			(producer only works with individual episodes atm anyway)
			TODO later on we'll make this user-selectable within the product UI (and probably
			eliminate appState.productLoadedAs and the /#/episode, /#/editor, etc routes)
			*/
			var product = "player";
			if (appState.productLoadedAs === 'narrative') {
				if (role === Roles.ADMINISTRATOR || role === Roles.INSTRUCTOR) {
					product = "sxs";
				}
			} else {
				errorSvc.error({
					data: "authSvc.getDefaultProductForRole should only be used within narratives for now"
				});
			}
			return product;
		};

		svc.logout = function () {
			// Clear these even if the logout call fails (which it will if the token in localStorage has expired).
			// DO NOT clear the Authorization header yet (it's needed for the logout server call)
			try {
				localStorage.removeItem(config.localStorageKey);
				document.cookie = 'XSRF-TOKEN=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
				document.cookie = '_tellit-api_session=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
			} catch (e) {
				// user disabled cookies, so no need to try to remove them...
			}
			appState.user = {};

			$http({
					method: 'GET',
					url: config.apiDataBaseUrl + "/logout"
				})
				.success(function () {
					delete $http.defaults.headers.common.Authorization; // now it's safe
					$location.path('/')
						.search({
							logout: 1
						});
				})
				.error(function () {
					delete $http.defaults.headers.common.Authorization; // if it exists at all here, it's definitely invalid
					$location.path('/')
						.search({
							logout: 1
						});
				});
		};

		svc.adminLogin = function (authKey, password) {
			var defer = $q.defer();
			$http({
					method: 'POST',
					url: config.apiDataBaseUrl + "/auth/identity/callback",
					data: $.param({
						"auth_key": authKey,
						"password": password
					}),
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded'
					}
				})
				.success(function (data) {
					$http.defaults.headers.common.Authorization = 'Token token="' + data.access_token + '"';
					resolveUserData(data);
					svc.getCurrentUser()
						.then(function () {
							defer.resolve(data);
						});

				})
				.error(function (data) {
					defer.reject(data);
				});
			return defer.promise;
		};

		/*

			authentication paths:
				header + user data: resolve immediately
				header + no user data: call show_user (this shouldn't be possible, but I coded it in at some point for some reason...)
				key in url param: call get_nonce
				token in localStorage: set header, call show_user
				nothing: get_nonce

		*/

		var authenticateDefer = $q.defer();
		svc.authenticate = function (nonceParam) {
			if ($http.defaults.headers.common.Authorization) {
				if (appState.user) {
					// Have header and user; all done.
					authenticateDefer.resolve();
				} else {
					// begin dubious code block
					console.warn("Have auth header but no appState.user data. Not sure this should ever happen, TODO delete this from authSvc if it continues to not happen");
					svc.getCurrentUser()
						.then(function () {
							authenticateDefer.resolve();
						}, function () {
							return svc.authenticateViaNonce(nonceParam);
						});
					// end of dubious code block
				}
			} else if ($routeParams.key) {
				// Have key in route
				var nonce = $routeParams.key;
				$location.search('key', null); // hide the param from the url.  reloadOnSearch must be turned off in $routeProvider!
				return svc.getAccessToken(nonce);
			} else {
				var token = svc.getStoredToken();
				if (token) {
					// have localStorage token; try it
					$http.defaults.headers.common.Authorization = 'Token token="' + token + '"';
					svc.getCurrentUser()
						.then(function () {
							// token worked
							authenticateDefer.resolve();
						}, function () {
							// token expired; clear everything and start over

							try {
								localStorage.removeItem(config.localStorageKey);
								document.cookie = 'XSRF-TOKEN=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
								document.cookie = '_tellit-api_session=; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT;';
							} catch (e) {
								// user disabled cookies
							}
							appState.user = {};
							return svc.authenticateViaNonce(nonceParam);
						});
				} else {
					console.log('auth Via Nonce', nonceParam);
					// no login info at all, start from scratch
					return svc.authenticateViaNonce(nonceParam);
				}
			}
			return authenticateDefer.promise;
		};

		svc.authenticateViaNonce = function (nonceParam) {
			var defer = $q.defer();
			svc.getNonce(nonceParam)
				.then(function (nonce) {
					svc.getAccessToken(nonce)
						.then(function () {
							defer.resolve();
						});
				});
			return defer.promise;
		};

		svc.getStoredToken = function () {
			var storedData = {};
			try {
				if (!localStorage) {
					return false;
				}
				localStorage.getItem(config.localStorageKey);
				storedData = angular.fromJson(localStorage.getItem(config.localStorageKey));
				var currentCustomer = config.apiDataBaseUrl.match(/\/\/([^\.]*)./)[1];
				if (storedData.customer !== currentCustomer) {
					console.log("deleting wrong-customer token: was ", storedData.customer, " should be ", currentCustomer);
					localStorage.removeItem(config.localStorageKey);
					storedData = {};
				}
				return storedData.token || false;
			} catch (e) {
				return false;
			}

		};

		svc.getCurrentUser = function () {
			var defer = $q.defer();
			$http({
					method: 'GET',
					url: config.apiDataBaseUrl + '/show_user'
				})
				.success(function (respData) {
					resolveUserData(respData);
					defer.resolve();
				})
				.error(function () {
					defer.reject();
				});
			return defer.promise;
		};

		svc.updateUser = function (user) {
			var defer = $q.defer();
			$http({
					method: 'PUT',
					url: config.apiDataBaseUrl + '/users/' + user._id,
					data: user
				})
				.success(function (respData) {
					resolveUserData(respData);
					defer.resolve();
				})
				.error(function () {
					defer.reject();
				});
			return defer.promise;
		};

		var resolveUserData = function (data) {
			// Modify the structure of the roles data if necessary.  This is a temporary fix and can be removed after the new roles system is in place.
			if (data.roles !== null && data.roles !== undefined && data.roles.length > 0 && data.roles[0].constructor === String) {
				var roles = [];
				for (var i = 0; i < data.roles.length; i++) {
					var role = {
						role: data.roles[i]
					};
					roles.push(role);
				}
				data.roles = roles;
			}

			// updates appState.user and localStorage
			var user = {
				access_token: data.access_token || data.authentication_token,
				customer: config.apiDataBaseUrl.match(/\/\/([^\.]*)./)[1], // Access tokens are per-customer, which is based on subdomain.
				//                                                            Logging in with one customer invalidates the key for any others for the same user,
				//                                                            otherwise we'd just store separate ones per customer
				roles: data.roles
			};
			angular.forEach(["_id", "name", "email", "track_event_actions", "track_episode_metrics", "avatar_id"], function (key) {
				if (data[key]) {
					user[key] = data[key];
				}
			});

			var tok = svc.getStoredToken();
			if (user.avatar_id && tok) {
				console.log('culprit identified', tok);
				$http.defaults.headers.common.Authorization = 'Token token="' + tok + '"';
				// Load and cache avatar asset for current user
				$http.get(config.apiDataBaseUrl + "/v1/assets/" + user.avatar_id).then(function (response) {
					// console.log("GOT AVATAR", response);
					modelSvc.cache("asset", response.data);
					appState.user.avatar = response.data.url; // convenience for now, may be better to use modelSvc here
				});
			}

			// API BUG workaround
			if (data["track_episode_metrics:"]) {
				user.track_episode_metrics = true;
			}
			if (user.roles) {
				user.role_description = getRoleDescription(user.roles[0]);
			}
			if (data.emails) {
				user.email = data.emails[0];
			}
			appState.user = user;
			try {
				localStorage.setItem(config.localStorageKey, JSON.stringify({
					token: user.access_token,
					customer: user.customer
				}));
			} catch (e) {}
		};

		var getRoleDescription = function (roleKey) {
			if (roleKey === undefined) {
				return "User";
			}
			if (roleKey.role === 'admin') {
				return "Administrator";
			}
			if (roleKey.role === undefined) {
				return "User";
			}
			if (roleKey.role === "guest") {
				return "Guest user";
			}
			if (roleKey.role.match(/student/i)) {
				return "Student";
			}
			if (roleKey.role.match(/instructor/i)) {
				return "Instructor";
			}
			return roleKey;
		};

		svc.getNonce = function (nonceParam) {
			var defer = $q.defer();
			var url = config.apiDataBaseUrl + "/v1/get_nonce";
			if (nonceParam) {
				url = url + "?" + nonceParam;
			}
			$http.get(url)
				.success(function (data) {
					if (data.nonce) {
						defer.resolve(data.nonce);
					} else {
						// Guest access is not allowed
						if (data.login_url && data.login_url !== null) {
							if (data.login_via_top_window_only) {
								window.top.location.href = data.login_url;
							} else {
								window.location.href = data.login_url;
							}
							defer.reject();
						} else {
							console.warn("get_nonce returned a null login_url");
							if (window.location.hash !== '#/') {
								window.location.href = "/#/";
							}
							defer.reject();
						}
					}
				})
				.error(function () {
					defer.reject();
				});
			return defer.promise;
		};

		svc.getAccessToken = function (nonce) {
			var defer = $q.defer();
			$http.get(config.apiDataBaseUrl + "/v1/get_access_token/" + nonce)
				.success(function (data) {
					resolveUserData(data);
					$http.defaults.headers.common.Authorization = 'Token token="' + data.access_token + '"';
					svc.getCurrentUser()
						.then(function () {
							defer.resolve(data);
						});
				})
				.error(function () {
					// console.error("get_access_token failed:", data, status);
					defer.reject();
				});
			return defer.promise;
		};

		return svc;
	}]);

/*jshint bitwise: false*/
'use strict';

angular.module('com.inthetelling.story')
	.factory('awsSvc', ["config", "$routeParams", "$http", "$q", function (config, $routeParams, $http, $q) {
		// console.log('awsSvc, user: ', appState.user);
		var MAX_CHUNKS = 1000;
		var MAX_SIMUL_PARTS_UPLOADING = 3;
		var PUBLIC_READ = "public-read";
		var PENDING = "pending";
		var UPLOADING = "uploading";
		var COMPLETE = "complete";
		var svc = {};
		var awsCache = {
			s3: {}
		};
		var fiveMB = 1024 * 1024 * 5;
		var chunkSize = 0;
		var chunkCount = 0;
		var chunksUploaded = 0;
		var chunks = [];
		var chunkSearchIndex = 0;
		var files = [];
		var fileIndex = 0;
		var fileBeingUploaded;
		var bytesUploaded = 0;
		var multipartUpload;
		var deferredUploads = [];
		var deferredUpload;
		var currentRequest;
		var uploadPaused = false;

		svc.awsCache = function () {
			return awsCache;
		};

		svc.getBucketListing = function () {
			var defer = $q.defer();
			getUploadSession().then(function listObjects() {
				awsCache.s3.listObjects(function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						defer.reject();
					} else {
						// console.log('awsSvc, got bucket listing!', data);
						defer.resolve(data); // successful response
					}
				});
			});

			return defer.promise;
		};

		/*
		CRUFT asset creation endpoint is passed down through uploadFiles, startNextUpload, and createAsset.
		TODO Refactor to create asset record outside of awsSvc, after returned promise from uploadFiles (meaning we could go back to a single svc.uploadFiles fn),
		or at the very least to handle it within these next two functions instead of passing it all the way down the chain
		*/

		svc.uploadContainerFiles = function (containerId, fileList) {
			return uploadFiles("/v1/containers/" + containerId + "/assets", fileList);
		};
		svc.uploadUserFiles = function (userId, fileList) {
			return uploadFiles("/v1/users/" + userId + "/assets", fileList);
		};

		//Pass in a FileList object and the container in which the files are to be placed
		var uploadFiles = function (assetEndpoint, fileList) {
			var deferredUploadsPromises = [];
			// console.log('files: ', files);
			for (var i = 0; i < fileList.length; i++) {
				//can access this with regular array index
				//https://developer.mozilla.org/en-US/docs/Web/API/FileList#Example
				files.push(fileList[i]);
				var deferred = $q.defer();
				deferredUploads.push(deferred);
				deferredUploadsPromises.push(deferred.promise);
			}
			startNextUpload(assetEndpoint);
			// console.log('DEFERRED UPLOADS: ', deferredUploads);
			return deferredUploadsPromises;
		};

		svc.pauseUpload = function () {
			if (fileBeingUploaded && !uploadPaused) {
				uploadPaused = true;
				cancelCurrentUploadRequests();
				if (isSmallUpload()) {
					bytesUploaded = 0;
				} else {
					var chunkIndex = 0;
					bytesUploaded = 0;
					while (chunkIndex < chunkCount) {
						var chunk = chunks[chunkIndex];
						if (chunk.status === COMPLETE) {
							bytesUploaded += chunk.uploaded;
						}
						chunkIndex++;
					}
				}
				deferredUpload.notify({
					bytesSent: bytesUploaded,
					bytesTotal: fileBeingUploaded.size
				});
			}
		};

		svc.resumeUpload = function () {
			if (fileBeingUploaded && uploadPaused) {
				uploadPaused = false;
				if (isSmallUpload()) {
					putObject();
				} else {
					for (var i = 0; i < MAX_SIMUL_PARTS_UPLOADING; i++) {
						startNextUploadPart();
					}
				}
			}
		};

		svc.cancelUpload = function () {
			if (fileBeingUploaded) {
				uploadPaused = false;
				bytesUploaded = 0;
				cancelCurrentUploadRequests();
				if (!isSmallUpload()) {
					svc.cancelMultipartUpload(multipartUpload);
					multipartUpload = null;
				}
				fileBeingUploaded = null;
				// deferredUpload.notify({
				// 	bytesSent: 0,
				// 	bytesTotal: 0
				// });
				deferredUploads[fileIndex].reject("Canceled by user");
			}
			// cancel pending uploads as well
			for (var i = fileIndex + 1; i < files.length; i++) {
				deferredUploads[i].reject("Canceled by user");
			}
			fileIndex = files.length;

		};

		svc.networkError = function () {
			if (fileBeingUploaded) {
				cancelCurrentUploadRequests();
			}
		};

		svc.deleteObject = function (bucketObject) {
			var defer = $q.defer();
			getUploadSession().then(function deleteObject() {
				var params = {
					Bucket: bucketObject.bucket,
					Key: bucketObject.Key
				};
				awsCache.s3.deleteObject(params, function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						defer.reject();
					} else {
						// console.log('awsSvc, deleted object!', data);
						defer.resolve(data); // successful response
					}
				});
			});

			return defer.promise;
		};

		svc.getMultipartUploads = function () {
			var defer = $q.defer();
			getUploadSession().then(function listMultipartUploads() {
				awsCache.s3.listMultipartUploads(function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						defer.reject();
					} else {
						// console.log('awsSvc, got mulipart upload listing!', data);
						defer.resolve(data); // successful response
					}
				});
			});

			return defer.promise;

		};

		svc.getMultipartUploadParts = function (index, multipartUpload) {
			var defer = $q.defer();
			getUploadSession().then(function listParts() {
				var params = {
					Bucket: multipartUpload.bucket,
					Key: multipartUpload.Key,
					UploadId: multipartUpload.UploadId
				};
				awsCache.s3.listParts(params, function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						defer.reject();
					} else {
						// console.log('awsSvc, got mulipart upload listing!', data);
						defer.resolve({
							i: index,
							parts: data
						}); // successful response
					}
				});
			});

			return defer.promise;

		};

		svc.cancelMultipartUpload = function (multipartUpload) {
			var defer = $q.defer();
			getUploadSession().then(function abortMultipartUpload() {
				var params = {
					Bucket: multipartUpload.bucket,
					Key: multipartUpload.Key,
					UploadId: multipartUpload.UploadId
				};
				awsCache.s3.abortMultipartUpload(params, function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						defer.reject();
					} else {
						// console.log('awsSvc, deleted mulipart upload!', data);
						defer.resolve(data); // successful response
					}
				});
			});

			return defer.promise;
		};

		//Internal functions

		var getUploadSession = function () {
			if (awsCache.hasOwnProperty('sessionDeferred')) {
				return awsCache.sessionDeferred.promise;
			} else {
				awsCache.sessionDeferred = $q.defer();
			}
			$http.get(config.apiDataBaseUrl + "/v1/aws/s3/upload_session")
				.success(function (data) {
					if (data.access_key_id) {
						AWS.config.update({
							accessKeyId: data.access_key_id,
							secretAccessKey: data.secret_access_key,
							sessionToken: data.session_token,
							region: config.awsRegion
						});
						var params = {
							params: {
								Bucket: data.bucket,
								Prefix: data.key_base
							}
						};
						awsCache.s3 = new AWS.S3(params);
						awsCache.sessionDeferred.resolve(data);
					} else {
						awsCache.sessionDeferred.reject();
					}
				})
				.error(function () {
					awsCache.sessionDeferred.reject();
				});
			return awsCache.sessionDeferred.promise;
		};

		var startNextUpload = function (assetEndpoint) {
			// console.log('START NEXT UPLOAD: ', files.length, ', ', fileIndex, ', ', fileBeingUploaded);
			if (files.length > fileIndex && !fileBeingUploaded) {
				fileBeingUploaded = files[fileIndex];
				if (fileBeingUploaded.type === "") {
					// console.log('ABORTING UPLOAD, COULD NOT DETERMINE FILE TYPE FOR FILE:', fileBeingUploaded);
					deferredUploads[fileIndex].reject('Could not determine file type for file \'' + fileBeingUploaded.name + '\'');
					fileBeingUploaded = null;
					fileIndex++;
					startNextUpload(assetEndpoint);
					return;
				}
				// console.log('files: ', files);
				// console.log('awsSvc uploading file', fileBeingUploaded);
				ensureUniqueFilename().then(function () {
					var fileUploadPromise;
					if (isSmallUpload()) {
						fileUploadPromise = uploadSmallFile();
					} else {
						fileUploadPromise = uploadBigFile();
					}
					fileUploadPromise.then(function () {
							createAsset(assetEndpoint);
						},
						function (reason) {
							deferredUploads[fileIndex].reject(reason);
						},
						function (update) {
							deferredUploads[fileIndex].notify(update);
						});
				});
			}
		};

		var ensureUniqueFilename = function (deferred) {
			deferred = deferred || $q.defer();
			fileBeingUploaded.uniqueName = generateUUID();
			getUploadSession().then(function () {
				// console.log('awsSvc, ensureUniqueFilename: ', fileBeingUploaded.uniqueName);
				//First check for an object with the same name
				var params = {
					Key: awsCache.s3.config.params.Prefix + fileBeingUploaded.uniqueName
				};
				awsCache.s3.headObject(params, function (err) {
					if (err) {
						if (err.statusCode !== 404) {
							console.error(err, err.stack); // an error occurred
							deferred.reject(err);
						} else {
							// Then, if this is going to be a multipart upload, make sure there isn't already a multipart upload with the same name
							if (isSmallUpload()) {
								deferred.resolve();
							} else {
								svc.getMultipartUploads().then(function (data) {

									var findUnique = function (name) {
										// console.log("Looking for a unique name", name);
										for (var i = 0; i < data.Uploads.length; i++) {
											// console.log("trying ", data.Uploads[i].Key);
											if (data.Uploads[i].Key === awsCache.s3.config.params.Prefix + name) {
												// console.log("Not unique; try again");
												return findUnique(generateUUID());
											}
										}
										return name;
									};

									fileBeingUploaded.uniqueName = findUnique(fileBeingUploaded.uniqueName);
									deferred.resolve();
								});
							}
						}
					} else {
						//Had a filename collision, try again
						fileBeingUploaded.uniqueName = generateUUID();
						ensureUniqueFilename(deferred);
					}
				});
			});

			return deferred.promise;
		};

		var generateUUID = function () {
			var d = new Date().getTime();
			var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
				var r = (d + Math.random() * 16) % 16 | 0;
				d = Math.floor(d / 16);
				return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);
			});
			return uuid;
		};

		//var generateUniqueFilename = function(filename) {
		//    var parts = filename.split('.');
		//    var fileExt = "";
		//    if(parts.length > 1) {
		//	fileExt = "."+parts.pop();
		//    }
		//    var basename = parts.join('.');
		//    var date = new Date();
		//    return basename+"_"+date.getTime()+fileExt;
		//};

		var isSmallUpload = function () {
			if (fileBeingUploaded.size <= fiveMB) {
				return true;
			} else {
				return false;
			}
		};

		var uploadSmallFile = function () {
			// console.log('awsSvc uploading small file');
			deferredUpload = $q.defer();
			putObject().then(function (data) {
				console.log('UPLOAD SMALL FILE COMPLETE', data);
			}, function (reason) {
				console.error('UPLOAD SMALL FILE FAILED: ', reason);
			}, function (update) {
				console.log('UPLOAD SMALL FILE UPDATE: ', update);
			});
			return deferredUpload.promise;
		};

		var putObject = function () {
			var defer = $q.defer();
			getUploadSession().then(function putObject() {
				// console.log('awsSvc, putting object with key: ', awsCache.s3.config.params.Prefix + fileBeingUploaded.uniqueName);
				var params = {
					Key: awsCache.s3.config.params.Prefix + fileBeingUploaded.uniqueName,
					ContentType: fileBeingUploaded.type,
					Body: fileBeingUploaded,
					ACL: PUBLIC_READ
				};

				currentRequest = awsCache.s3.putObject(params, function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						deferredUpload.reject();
					} else {
						// console.log('awsSvc, uploaded file!', data);
						deferredUpload.resolve(data); // successful response
					}
				});
				currentRequest.on('httpUploadProgress', function (progress) {
					deferredUpload.notify({
						bytesSent: progress.loaded,
						bytesTotal: progress.total
					});
				}).on('error', function (err, response) {
					console.error('error: ', err, response);
					deferredUpload.reject(err);
				});
			}, function (reason) {
				console.error('PUT OBJECT FAILED: ', reason);
			}, function (update) {
				console.log('PUT OBJECT UPDATE: ', update);
			});
			return defer.promise;
		};

		var uploadBigFile = function () {
			// console.log('awsSvc uploading big file');
			deferredUpload = $q.defer();
			createMultipartUpload().then(prepareUploadParts).then(function startUpload() {
				for (var i = 0; i < MAX_SIMUL_PARTS_UPLOADING; i++) {
					startNextUploadPart();
				}
			});
			return deferredUpload.promise;
		};

		var createMultipartUpload = function () {
			var defer = $q.defer();
			getUploadSession().then(function createMultipartUpload() {
				var params = {
					Key: awsCache.s3.config.params.Prefix + fileBeingUploaded.uniqueName
				};
				awsCache.s3.createMultipartUpload(params, function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						defer.reject();
					} else {
						// console.log('awsSvc, created multipart upload!', data);
						defer.resolve(data); // successful response
					}
				});
			});
			return defer.promise;
		};

		var prepareUploadParts = function (awsMultipartUpload) {
			var defer = $q.defer();
			multipartUpload = awsMultipartUpload;
			chunks = [];
			chunkCount = 0;
			chunksUploaded = 0;
			chunkSearchIndex = 0;
			chunkSize = fiveMB;
			bytesUploaded = 0;
			if (fileBeingUploaded.size > chunkSize * MAX_CHUNKS) {
				chunkSize = Math.ceil(fileBeingUploaded.size / MAX_CHUNKS);
			}
			chunkCount = Math.ceil(fileBeingUploaded.size / chunkSize);
			for (var i = 0; i < chunkCount; i++) {
				var chunk = {};
				chunk.start = i * chunkSize;
				chunk.end = chunk.start + chunkSize;
				chunk.uploaded = 0;
				if (chunk.end > fileBeingUploaded.size) {
					chunk.end = fileBeingUploaded.size;
				}
				chunk.status = PENDING;

				chunks.push(chunk);
			}
			defer.resolve();
			return defer.promise;
		};

		var startNextUploadPart = function () {
			var defer = $q.defer();
			var chunkIndex = chunkSearchIndex;
			var foundNextChunk = false;
			if (!uploadPaused) {
				while (!foundNextChunk && chunkIndex < chunkCount) {
					var chunk = chunks[chunkIndex];
					if (chunk.status === PENDING) {
						foundNextChunk = true;
						chunk.status = UPLOADING;
						var blob = fileBeingUploaded.slice(chunk.start, chunk.end);
						chunk.cancel = function () {
							chunk.request.abort();
							chunk.status = PENDING;
							chunk.uploaded = 0;
						};
						// use $q.all to pass along the part number parameter
						$q.all({
							partNumber: $q.when(chunkIndex + 1),
							eTag: uploadPart(chunkIndex + 1, blob)
						}).then(completePart).then(function (data) {
							defer.resolve(data);
						}, function (reason) {
							defer.reject(reason);
						}, function (update) {
							defer.update(update);
						});
					} else if (chunk.status === COMPLETE && chunkIndex === chunkSearchIndex) {
						chunkSearchIndex++;
					}
					chunkIndex++;
				}
				if (!foundNextChunk) {
					defer.reject("All chunks uploaded");
				}
			} else {
				defer.reject("Upload paused");
			}

			return defer.promise;
		};

		var uploadPart = function (partNumber, blob) {
			// console.log('awsSvc, Uploading part: ', partNumber);
			var defer = $q.defer();
			getUploadSession().then(function uploadPart() {
				var params = {
					Bucket: multipartUpload.Bucket,
					Key: multipartUpload.Key,
					UploadId: multipartUpload.UploadId,
					PartNumber: partNumber,
					Body: blob
				};
				chunks[partNumber - 1].request = awsCache.s3.uploadPart(params, function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						defer.reject();
					} else {
						// console.log('awsSvc, uploadedPart! data.ETag:', data.ETag);
						defer.resolve(data.ETag); // successful response
					}
				});
				chunks[partNumber - 1].request.on('httpUploadProgress', function (progress) {
					bytesUploaded += progress.loaded - chunks[partNumber - 1].uploaded;
					chunks[partNumber - 1].uploaded = progress.loaded;
					deferredUpload.notify({
						bytesSent: bytesUploaded,
						bytesTotal: fileBeingUploaded.size
					});
				}).on('error', function (err, response) {
					console.error('error: ', err, response);
					deferredUpload.reject(err);
				});
			});
			return defer.promise;
		};

		var completePart = function (data) {
			var defer = $q.defer();
			chunks[data.partNumber - 1].status = COMPLETE;
			chunks[data.partNumber - 1].part = {
				ETag: data.eTag,
				PartNumber: data.partNumber
			};
			chunksUploaded++;
			if (chunksUploaded === chunkCount) {
				var parts = [];
				for (var i = 0; i < chunkCount; i++) {
					parts.push(chunks[i].part);
				}
				var params = {
					Bucket: multipartUpload.Bucket,
					Key: multipartUpload.Key,
					UploadId: multipartUpload.UploadId,
					MultipartUpload: {
						Parts: parts
					}
				};
				awsCache.s3.completeMultipartUpload(params, function (err, data) {
					if (err) {
						console.error(err, err.stack); // an error occurred
						deferredUpload.reject(err);
						defer.reject(err);
					} else {
						// console.log('awsSvc, uploadedComplete! data:', data);
						params = {
							Bucket: multipartUpload.Bucket,
							Key: multipartUpload.Key,
							ACL: PUBLIC_READ
						};
						awsCache.s3.putObjectAcl(params, function (err, data) {
							if (err) {
								deferredUpload.reject(err);
								console.error(err, err.stack); // an error occurred
								defer.reject(err);
							} else {
								console.log('awsSvc, set file permissions:', data);
							}
						});
						deferredUpload.resolve(data);
						defer.resolve(data);
					}
				});

			} else {
				startNextUploadPart();
			}

			return defer.promise;
		};

		var cancelCurrentUploadRequests = function () {
			if (isSmallUpload()) {
				currentRequest.abort();
			} else {
				var chunkIndex = chunkSearchIndex;
				var foundAllUploadingChunks = false;
				while (!foundAllUploadingChunks && chunkIndex < chunkCount) {
					var chunk = chunks[chunkIndex];
					if (chunk.status === UPLOADING) {
						// console.log('awsSvc, Cancelling upload of chunk: ', chunkIndex);
						chunk.cancel();
					} else if (chunk.status === PENDING) {
						foundAllUploadingChunks = true;
					}
					chunkIndex++;
				}
			}
		};

		var createAsset = function (assetEndpoint) {
			var deferred = $q.defer();
			var assetData = {
				'url': 'https://s3.amazonaws.com/' + awsCache.s3.config.params.Bucket + '/' + awsCache.s3.config.params.Prefix + fileBeingUploaded.uniqueName,
				'type': fileBeingUploaded.type,
				'size': fileBeingUploaded.size,
				'original_filename': fileBeingUploaded.name
			};

			$http.post(config.apiDataBaseUrl + assetEndpoint, assetData)
				.success(function (data) {
					deferredUploads[fileIndex].resolve(data);
					fileBeingUploaded = null;
					fileIndex++;
					startNextUpload(assetEndpoint);
				})
				.error(function () {
					deferredUploads[fileIndex].reject();
					fileBeingUploaded = null;
					fileIndex++;
					startNextUpload(assetEndpoint);
				});
			return deferred.promise;
		};

		return svc;

	}]);

'use strict';

// TODO: load and resolve categories


/**
 * @ngdoc service
 * @name iTT.service:dataSvc
 * @description
 * Service for hitting API endpoints
 * prior code comments:
 * Cache here is for things we never need to expose to the rest of the app (style, layout, template IDs)
 * the rest gets passed to modelSvc
 * use PUT to update, POST to create new
 * for assets, DELETE then POST
 * to store -- must wrap events in 'event: {}'  same for other things?  template didn't seem to need it
 * @requires $q
 * @requires $http
 * @requires $routeParams
 * @requires $timeout
 * @requires $rootScope
 * @requires config
 * @requires authSvc
 * @requires appState
 * @requires modelSvc
 * @requires errorSvc
 * @requires mockSvc
 * @requires questionAnswersSvc
 */

angular.module('com.inthetelling.story')
	.factory('dataSvc', ["$q", "$http", "$routeParams", "$timeout", "$rootScope", "$location", "ittUtils", "config", "authSvc", "appState", "modelSvc", "errorSvc", "mockSvc", "questionAnswersSvc", function ($q, $http, $routeParams, $timeout, $rootScope, $location, ittUtils, config, authSvc, appState, modelSvc, errorSvc, mockSvc, questionAnswersSvc) {
		var svc = {};

		/* ------------------------------------------------------------------------------ */

		/**
		 * @ngdoc method
		 * @name #checkXFrameOpts
		 * @methodOf iTT.service:dataSvc
		 * @description
		 * Used to check whether or not a website can be iframed by inspecting the x-frame-options header
		 * @param {String} url The target URL of site to inspect
		 * @returns {Boolean} Whether or not we can embed the input URL in an iframe.
         */
		svc.checkXFrameOpts = function(url) {
			//why use a 'post process callback'
			//when you can simply chain promises?

			//check protcol for mixed content??
			var currentOrigin;
			var parseInputUrl;
			var encodedUrl = encodeURIComponent(url);
			return SANE_GET('/x_frame_options_proxy?url=' + encodedUrl)
			.then(function(result) {
				console.log('x-frame-opts: ', result.x_frame_options);
				return _canEmbed(result.x_frame_options);
			});

			function _canEmbed(xFrameOpts) {
				var _noEmbed = true;
				switch(true) {
					case /SAMEORIGIN/i.test(xFrameOpts):
						currentOrigin = $location.host();
						parseInputUrl = document.createElement('a');
						parseInputUrl.href = url;
						//check our origin
						if (currentOrigin === parseInputUrl.hostname) {
							_noEmbed = false;
						}
						break;
					case /ALLOW-FROM/i.test(xFrameOpts):
						//check if we're on the list
						//split on comma to get CSV array of strings; e.g: ["ALLOW-FROM: <url>", " ALLOW-FROM: <url>", ...]
						var xFrameArr = xFrameOpts.split(',');
						currentOrigin = $location.host();
						angular.forEach(xFrameArr, function(i) {
							var url = i.trim().split(' ')[1];
							var aElm = document.createElement('a');
							aElm.href = url;
							if (currentOrigin === aElm.hostname) {
								_noEmbed = false;
							}
						});
						break;
					case /DENY/i.test(xFrameOpts):
						// do nothing
						break;
					case /null/.test(xFrameOpts):
						//ticket to ride
						_noEmbed = false;
						break;
				}
				return _noEmbed;
			}
		};

		// WARN ittNarrative and ittNarrativeTimeline call dataSvc directly, bad practice. At least put modelSvc in between
		svc.getNarrative = function (narrativeId) {
			// Special case here, since it needs to call getNonce differently:
			var defer = $q.defer();

			var cachedNarrative = modelSvc.narratives[narrativeId];
			var subdomain = ittUtils.getSubdomain($location.host());
			var urlParams = '';

			if (ittUtils.existy(cachedNarrative) && ittUtils.existy(cachedNarrative.subDomain) && subdomain !== cachedNarrative.subDomain) {
				urlParams = '?customer=' + cachedNarrative.subDomain;
			}

			authSvc.authenticate("narrative=" + narrativeId).then(function () {
				$http.get(config.apiDataBaseUrl + "/v3/narratives/" + narrativeId + "/resolve" + urlParams)
					.then(function (response) {

						response.data.timelines.sort(function(a, b) {return a.sort_order - b.sort_order;});


						modelSvc.cache("narrative", svc.resolveIDs(response.data));

						defer.resolve(modelSvc.narratives[response.data._id]);
					});
			});
			return defer.promise;
		};

		svc.getNarrativeOverview = function (narrativeId) {
			return GET("/v3/narratives/" + narrativeId);
		};

		var cachedPurchases = false;
		svc.getUserNarratives = function (userId) {
			if (cachedPurchases) {
				var defer = $q.defer();
				defer.resolve(cachedPurchases);
				return defer.promise;
			} else {
				return GET("/v3/users/" + userId + "/narrative_purchases", function (data) {
					cachedPurchases = data;
					return data;
				});

			}
		};

		svc.getCustomerList = function () {
			return GET("/v3/customers/", function (customers) {
				angular.forEach(customers, function (customer) {
					modelSvc.cache("customer", customer);
				});
				return customers;
			});

		};

		svc.getCustomer = function (customerId) {
			if (!(authSvc.userHasRole('admin') || authSvc.userHasRole('customer admin'))) {
				return false;
			}
			if (modelSvc.customers[customerId]) {
				// have it already, or at least already getting it
				return;
			} else {
				// cache a stub:
				modelSvc.cache("customer", {
					_id: customerId
				});
				GET("/v3/customers/" + customerId, function (customer) {
					modelSvc.cache("customer", customer); // the real thing
				});
			}
		};

		// getEpisode just needs to retrieve all episode data from the API, and pass it on
		// to modelSvc.  No promises needed, let the $digest do the work
		svc.getEpisode = function (epId, segmentId) {
			if (!epId) {
				throw ("no episode ID supplied to dataSvc.getEpisode");
			}

			// Removing this as it caused race conditions: sometimes the asset and event data has already been loaded, sometimes not.
			// This will cause epsiode data to be requested from the api every time the page loads, instead of trying to recycle the cache, but that's probably safer anyway
			// if (modelSvc.episodes[epId]) {
			// 	console.log("have episode: ", modelSvc.episodes[epId]);
			// 	$rootScope.$emit("dataSvc.getEpisode.done");
			// 	return; // already requested
			// }
			modelSvc.cache("episode", {
				_id: epId
			}); // init with empty object to be filled by asynch process

			if ($routeParams.local) {
				mockSvc.mockEpisode(epId);
				// console.log("Got all events");
				$rootScope.$emit("dataSvc.getEpisode.done");
			} else {
				authSvc.authenticate()
					.then(function () {
						return getCommon();
					})
					.then(function () {
						return getEpisode(epId, segmentId);
					});
			}
		};
		svc.getEpisodeOverview = function (epId) {
			return GET("/v3/episodes/" + epId);
		};

		svc.getNarrativeList = function () {
			return GET("/v3/narratives/");
		};

		svc.createUserGroup = function (groupName) {
			return POST("/v3/groups", {
				"group": {
					"name": groupName
				}
			});
		};

		svc.createNarrative = function (narrativeData) {
			delete narrativeData.templateUrl;
			return POST("/v3/narratives", narrativeData);
		};
		svc.updateNarrative = function (narrativeData) {
			delete narrativeData.templateUrl;
			return PUT("/v3/narratives/" + narrativeData._id, narrativeData);
		};

		svc.createChildEpisode = function (childData) {
			// console.log("about to create child epsiode", childData);
			return POST("/v3/episodes", {
				"episode": childData
			});
		};

		svc.createEpisodeSegment = function (narrativeId, segmentData) {
			return POST("/v3/timelines/" + narrativeId + "/episode_segments", segmentData);
		};

		svc.storeTimeline = function (narrativeId, origTimeline) {

			var permitted = [
				'sort_order',
				'path_slug',
				'name',
				'description',
				'hidden',
				'timeline_image_id',
				'narrative_id',
				'_id'
			];
			var timeline = ittUtils.pick(origTimeline, permitted);

			if (timeline._id) {
				return PUT("/v3/timelines/" + timeline._id, timeline, function (ret) {
					// TEMPORARY until api stops doing this
					if (typeof ret.name === 'string') {
						ret.name = {
							en: ret.name
						};
					}
					if (typeof ret.description === 'string') {
						ret.description = {
							en: ret.description
						};
					}
					return ret;
				});
			} else {
				return POST("/v3/narratives/" + narrativeId + "/timelines", timeline, function (ret) {
					// TEMPORARY until api stops doing this
					if (typeof ret.name === 'string') {
						ret.name = {
							en: ret.name
						};
					}
					if (typeof ret.description === 'string') {
						ret.description = {
							en: ret.description
						};
					}
					return ret;
				});
			}
		};

		// /v3/timelines/:id
		svc.deleteTimeline = function(tlId) {
			return PDELETE('/v3/timelines/' + tlId).then(function(resp) {
				return resp;
			});
		};

		svc.getSingleAsset = function (assetId) {
			if (assetId) {
				return GET("/v1/assets/" + assetId);
			} else {
				return $q(function(resolve) { resolve(undefined); });
			}
		};

		var dataCache = {
			template: {},
			layout: {},
			style: {}
		};

		// Gets all layouts, styles, and templates
		var gettingCommon = false;
		var getCommonDefer = $q.defer();
		var getCommon = function () {
			// console.log("dataSvc.getCommon");
			if (gettingCommon) {
				return getCommonDefer.promise;

			} else {
				gettingCommon = true;
				$q.all([
						$http.get(config.apiDataBaseUrl + '/v1/templates'),
						$http.get(config.apiDataBaseUrl + '/v1/layouts'),
						$http.get(config.apiDataBaseUrl + '/v1/styles')
					])
					.then(function (responses) {
						svc.cache("templates", responses[0].data);
						svc.cache("layouts", responses[1].data);
						svc.cache("styles", responses[2].data);

						gettingCommon = true;
						getCommonDefer.resolve();
					}, function () {
						// console.error("getCommon failed", failure);
						gettingCommon = false;
						getCommonDefer.reject();
					});
			}
			return getCommonDefer.promise;
		};

		svc.getCommon = getCommon; // TEMPORARY for ittContainer, so it can get the scene template ID.  After template refactor none of this id stuff will be necessary

		svc.cache = function (cacheType, dataList) {
			// console.log("dataSvc.cache", cacheType, dataList);
			angular.forEach(dataList, function (item) {
				if (cacheType === "templates") {
					/* API format:
					_id									"528d17ebba4f65e578000007"
					applies_to_episodes	false  (if true, event_types is empty)
					created_at					"2013-11-20T20:13:31Z"
					event_types					["Scene"]    (or Annotation, Link, Upload)
					name								"Scene 2 columns right"
					updated_at					"2013-11-20T20:13:31Z"
					url									"templates/scene-centered.html"
				*/
					dataCache.template[item._id] = {
						id: item._id,
						url: item.url,
						type: (item.applies_to_episodes ? "Episode" : item.event_types ? item.event_types[0] : undefined),
						displayName: item.name
					};
				} else if (cacheType === "layouts") {
					/* API format:
					_id									"528d17ebba4f65e57800000a"
					created_at					"2013-11-20T20:13:31Z"
					css_name						"videoLeft"
					description					"The video is on the left"
					display_name				"Video Left"
					updated_at					"2013-11-20T20:13:31Z"
				*/
					dataCache.layout[item._id] = {
						id: item._id,
						css_name: item.css_name,
						displayName: item.display_name
					};

				} else if (cacheType === "styles") {
					/* API format:
					_id						"528d17f1ba4f65e578000036"
					created_at		"2013-11-20T20:13:37Z"
					css_name			"typographySerif"
					description		"Controls the fonts and relative text sizes"
					display_name	"Typography Serif"
					updated_at		"2013-11-20T20:13:37Z"
				*/
					dataCache.style[item._id] = {
						id: item._id,
						css_name: item.css_name,
						displayName: item.display_name
					};
				}
			});
		};

		// TODO more template management: add/delete/edit
		svc.createTemplate = function (templateData) {
			// TEMPORARY.  Doesn't check to see if it's adding a duplicate, or do any other sort of data prophylaxis
			/*  sample:
			{
				url: 'templates/item/foo.html',
				name: 'foo',
				event_types: ['Upload'], // Upload, Scene, Plugin, Annotation, Link
				applies_to_episode: false,
				applies_to_narrative: false
			}
			*/
			return POST("/v1/templates", templateData);
		};
		// svc.createStyle = function (styleData) {
		// 	// ALSO TEMPORARY, UNSAFE
		// 	return POST("/v1/styles", styleData);
		// };

		// transform API common IDs into real values
		svc.resolveIDs = function (obj) {
			// console.log("resolving IDs", obj);

			// temporary:
			if (obj.everyone_group && !obj.template_id) {
				obj.templateUrl = "templates/narrative/default.html";
			}

			if (obj.template_id) {
				if (dataCache.template[obj.template_id]) {
					obj.templateUrl = dataCache.template[obj.template_id].url;
					delete obj.template_id;
				} else {
					errorSvc.error({
						data: "Couldn't get templateUrl for id " + obj.template_id
					});
				}
			}
			if (obj.layout_id) {
				var layouts = [];
				angular.forEach(obj.layout_id, function (id) {
					if (dataCache.layout[id]) {
						layouts.push(dataCache.layout[id].css_name);
					} else {
						errorSvc.error({
							data: "Couldn't get layout for id " + id
						});
					}
				});
				if (layouts.length > 0) {
					obj.layouts = layouts;
				}
				//delete obj.layout_id;
			}
			if (obj.style_id) {
				var styles = [];
				angular.forEach(obj.style_id, function (id) {
					if (dataCache.style[id]) {
						styles.push(dataCache.style[id].css_name);
					} else {
						errorSvc.error({
							data: "Couldn't get style for id " + id
						});
					}
				});
				if (styles.length > 0) {
					obj.styles = styles;
				}
				//delete obj.style_id;
			}
			return obj;
		};

		var getAssetIdFromEvent = function (event) {
			if (event.hasOwnProperty("asset_id")) {
				if (event.asset_id) {
					return event.asset_id;
				}
			}
			if (event.hasOwnProperty("annotation_image_id")) {
				if (event.annotation_image_id) {
					return event.annotation_image_id;
				}
			}
			if (event.hasOwnProperty("link_image_id")) {
				if (event.link_image_id) {
					return event.link_image_id;
				}
			}
			if (event.hasOwnProperty("avatar_id")) {
				if (event.avatar_id) {
					return event.avatar_id;
				}
			}
		};

		var getAssetIdsFromEvents = function (events) {
			//asset_id,
			//annotation_image_id
			//link_image_id
			var idsobject = {}; //object is way faster to prevent duplicates
			for (var i = 0, length = events.length; i < length; i++) {
				var id = getAssetIdFromEvent(events[i]);
				if (id) {
					if (!(id in idsobject)) {
						idsobject[id] = 0;
					}
				}
			}
			//now make an array instead of an object
			var ids = Object.keys(idsobject);
			return ids;
		};

		svc.getAssetsByAssetIds = function (assetIds, callback) {
			var endpoint = "/v1/assets";
			var assetIdsObj = {};
			assetIdsObj.asset_ids = assetIds;
			return $http.post(config.apiDataBaseUrl + endpoint, assetIdsObj)
				.success(function (data) {
					callback(data);
				})
				.error(function () {
					callback();
				});
		};

		// auth and common are already done before this is called.  Batches all necessary API calls to construct an episode
		var getEpisode = function (epId, segmentId) {
			// The url and return data differ depending on whether we're getting a (resolved) segment or a normal episode:
			// console.log("dataSvc.getEpisode");
			var url = (segmentId) ? "/v3/episode_segments/" + segmentId + "/resolve" : "/v3/episodes/" + epId;
			$http.get(config.apiDataBaseUrl + url)
				.success(function (ret) {
					var episodeData = {};
					if (ret) {
						episodeData = (ret.episode ? ret.episode : ret); // segment has the episode data in ret.episode; that's all we care about at this point
					}
					if (episodeData.status === "Published" || authSvc.userHasRole("admin") || authSvc.userHasRole('customer admin')) {
						modelSvc.cache("episode", svc.resolveIDs(episodeData));
						getEvents(epId, segmentId)
							.success(function (events) {
								events = events || [];
								getEventActivityDataForUser(events, "Plugin", epId);
								angular.forEach(events, function (eventData) {
									eventData.cur_episode_id = epId; // So the player doesn't need to care whether it's a child or parent episode
									modelSvc.cache("event", svc.resolveIDs(eventData));
								});
								modelSvc.resolveEpisodeEvents(epId);
								var assetIds = getAssetIdsFromEvents(events);
								assetIds = (typeof assetIds !== 'undefined' && assetIds.length > 0) ? assetIds : [];
								// we need to also get the master asset and poster, while we are at it
								assetIds.push(episodeData.master_asset_id);

								if (episodeData.poster_frame_id) {
									assetIds.push(episodeData.poster_frame_id);
								}

								//batch get assets
								svc.getAssetsByAssetIds(assetIds, function (assets) {
									angular.forEach(assets.files, function (asset) {
										modelSvc.cache("asset", asset);
									});
									modelSvc.resolveEpisodeAssets(epId);
									$rootScope.$emit("dataSvc.getEpisode.done");
								});
							})
							.error(function () {
								errorSvc.error({
									data: "API call to get events failed."
								});
							});

					} else {
						errorSvc.error({
							data: "This episode has not yet been published."
						});
					}
				})
				.error(function () {
					errorSvc.error({
						data: "API call to /v3/episodes/" + epId + " failed (bad episode ID?)"
					});
				});
		};

		// calls getContainer, iterates to all parents before finally resolving
		svc.getContainerAncestry = function (containerId, episodeId, defer) {
			defer = defer || $q.defer();
			svc.getContainer(containerId, episodeId)
				.then(function (id) {
					var container = modelSvc.containers[id];
					if (container.parent_id) {
						svc.getContainerAncestry(container.parent_id, episodeId, defer);
					} else {
						defer.resolve(id);
					}
				});
			return defer.promise;
		};

		//getEvents returns the data via a promise, instead of just setting modelSvc
		var getEvents = function (epId, segmentId) {
			var endpoint = (segmentId) ? "/v3/episode_segments/" + segmentId + "/events" : "/v3/episodes/" + epId + "/events";
			return $http.get(config.apiDataBaseUrl + endpoint);
		};

		var getEventActivityDataForUser = function (events, activityType, epId) {
			angular.forEach(events, function (eventData) {
				if (eventData.type === "Plugin") {
					(function (evData) {
						questionAnswersSvc.getUserAnswer(evData._id, appState.user._id)
							.then(function (userAnswer) {

								if (userAnswer.data) {
									evData.data._plugin.hasBeenAnswered = true;
									var i = 0;
									var angularContinue = true;
									angular.forEach(evData.data._plugin.distractors, function (distractor) {
										if (angularContinue) {
											if (distractor.index === userAnswer.data.index) {
												distractor.selected = true;
												evData.data._plugin.selectedDistractor = distractor.index;
												angularContinue = false;
											}
											i++;
										}
									});
									modelSvc.cache("event", svc.resolveIDs(evData));
								} else {
									console.error("Got no user data from getUserAnswer:", userAnswer);
								}
							});
					}(eventData));
				}
			});
			modelSvc.resolveEpisodeEvents(epId);
		};

		/* ------------------------------------------------------------------------------ */

		// PRODUCER
		// a different idiom here, let's see if this is easier to conceptualize.

		// to use GET(), pass in the API endpoint, and an optional callback for post-processing of the results
		var GET = function (path, postprocessCallback) {
			// console.log("GET", path);
			var defer = $q.defer();
			authSvc.authenticate()
				.then(function () {
					$http.get(config.apiDataBaseUrl + path)
						.then(function (response) {
							var ret = response.data;
							if (postprocessCallback) {
								ret = postprocessCallback(ret);
							}
							return defer.resolve(ret);
						});
				});
			return defer.promise;
		};

		var SANE_GET = function(path) {
			//wrapping a method in a promises that is already using functions that return promises
			//is an anti-pattern.
			//simply return this promise
			return authSvc.authenticate()
			.then(function() {
				//then return this promise
				return $http.get(config.apiDataBaseUrl + path)
				.then(function(resp) {
					//SANE_GET will resolve to this
					return resp.data;
				});
			});
		};

		var PUT = function (path, putData, postprocessCallback) {
			var defer = $q.defer();
			$http({
					method: 'PUT',
					url: config.apiDataBaseUrl + path,
					data: putData
				})
				.success(function (response) {
					var ret = response;
					if (postprocessCallback) {
						ret = postprocessCallback(ret);
					}
					defer.resolve(ret);
				});
			return defer.promise;
		};

		var POST = function (path, postData, postprocessCallback) {
			var defer = $q.defer();
			$http({
					method: 'POST',
					url: config.apiDataBaseUrl + path,
					data: postData
				})
				.success(function (response) {
					var ret = response;
					if (postprocessCallback) {
						ret = postprocessCallback(ret);
					}
					defer.resolve(ret);
				});
			return defer.promise;
		};

		var DELETE = function (path) {
			var defer = $q.defer();
			$http({
					method: 'DELETE',
					url: config.apiDataBaseUrl + path,
				})
				.success(function (data) {
					// console.log("Deleted:", data);
					return defer.resolve(data);
				});
			return defer.promise;
		};

		var PDELETE = function(path) {
			return $http({
				method: 'DELETE',
				url: config.apiDataBaseUrl + path
			}).then(function(resp) {
				return resp;
			});
		};

		/*
		Circumstances in which we need containers:
		- start at root, climb down on demand
		- start at episode, need all ancestors

		loading any container should
		- cache its own (complete) data
		- cache its (incomplete) children
		load all of its ancestors if not already present (datasvc will need to keep a list of container_ids it's already requested, to avoid circular refs to modelSvc)

		*/

		svc.getContainerRoot = function () {
			// This is only used by episodelist.  Loads root container, returns a list of root-level container IDs
			return GET("/v3/containers", function (containers) {
				var customerIDs = [];
				angular.forEach(containers, function (customer) {
					// cache the customer data:
					modelSvc.cache("container", customer);
					customerIDs.push(customer._id);
				});
				return customerIDs;
			});
		};

		svc.getContainer = function (id, episodeId) {
			return GET("/v3/containers/" + id, function (containers) {
				modelSvc.cache("container", containers[0]);
				var container = modelSvc.containers[containers[0]._id];

				// Get the container' asset list:
				svc.getContainerAssets(id, episodeId);

				// Ensure container.children refers to items in modelSvc cache:
				if (container.children) {
					for (var i = 0; i < container.children.length; i++) {
						container.children[i] = modelSvc.containers[container.children[i]._id];
					}

					// QUICK HACK to get episode status for inter-episode nav; stuffing it into the container data
					// Wasteful of API calls, discards useful data
					var getSiblings = false;
					if (!episodeId) {
						getSiblings = true; // we're in a container list
					}
					// if (episodeId && modelSvc.episodes[episodeId].navigation_depth > 0) {
					// 	getSiblings = true;
					// }
					if (getSiblings) {
						angular.forEach(container.children, function (child) {
							if (child.episodes[0]) {
								svc.getEpisodeOverview(child.episodes[0])
									.then(function (overview) {
										if (overview) {
											child.status = overview.status;
											child.title = overview.title; // name == container, title == episode
											modelSvc.cache("container", child); // trigger setLang
										} else {
											// This shouldn't ever happen, but apparently it does.
											// (Is this a permissions error? adding warning to help track it down)
											console.error("Got no episode data for ", child.episodes[0]);
										}
									});
							}
						});

					}
				}
				return containers[0]._id;
			});

		};

		svc.getContainerAssets = function (containerId, episodeId) {
			return $http.get(config.apiDataBaseUrl + "/v1/containers/" + containerId + "/assets")
				.success(function (containerAssets) {
					modelSvc.containers[containerId].assetsHaveLoaded = true;
					angular.forEach(containerAssets.files, function (asset) {
						modelSvc.cache("asset", asset);
					});
					modelSvc.resolveEpisodeAssets(episodeId);
				});
		};

		svc.createContainer = function (container) {
			var defer = $q.defer();

			// TODO sanitize
			var newContainer = {
				container: {
					customer_id: container.customer_id,
					name: container.name,
					parent_id: container.parent_id
						// keywords: [] // for now
				}
			};
			// store in API and resolve with results instead of container

			POST("/v3/containers", newContainer)
				.then(function (data) {
					// console.log("CREATED CONTAINER", data);
					modelSvc.cache("container", data);

					var parentId = data.parent_id;

					// add it to the parent's child list (WARN I'm mucking around in modelSvc inappropriately here I think)
					console.log(modelSvc.containers[parentId]);
					modelSvc.containers[parentId].children.push(modelSvc.containers[data._id]);

					defer.resolve(data);
				});
			return defer.promise;
		};

		svc.updateContainer = function (container) {
			//TODO sanitize
			var defer = $q.defer();
			if (!container._id) {
				console.error("Tried to update a container with no id", container);
				defer.reject();
			}
			PUT("/v3/containers/" + container._id, container, function (data) {
				modelSvc.cache("container", data);
				defer.resolve(data);
			});
			return defer.promise;
		};

		svc.deleteContainer = function (containerId) {
			// DANGER WILL ROBINSON incomplete and unsafe.  only for deleting test data for now, don't expose this to the production team.

			// TODO  this will error out if there are assets or child containers attached to the container...
			// definitely it will if there's a child episode.

			delete modelSvc.containers[containerId]; // WARN this assumes success......

			return DELETE("/v3/containers/" + containerId);
		};

		// Create new episodes, c.f. storeEpisode.   TODO mild cruft
		svc.createEpisode = function (episode) {

			//Default the status of the episode to 'Unpublished'
			episode.status = 'Unpublished';

			var defer = $q.defer();
			// console.log("Attempting to create ", episode);
			POST("/v3/episodes", episode)
				.then(function (data) {
					// console.log("Created episode: ", data);
					// muck around in modelSvc.containers again:
					modelSvc.containers[data.container_id].episodes = [data._id];
					modelSvc.containers[data.container_id].status = data.status;
					defer.resolve(data);
				});
			return defer.promise;
		};

		// Update existing episodes, c.f. createEpisode TODO mild cruft
		svc.storeEpisode = function (epData) {
			var preppedData = prepEpisodeForStorage(epData);
			console.log("prepped for storage:", preppedData);
			if (preppedData) {
				return PUT("/v3/episodes/" + preppedData._id, preppedData);
			} else {
				return false;
			}
		};

		svc.deleteEpisode = function (episodeId) {
			// DANGER WILL ROBINSON this is both incomplete and unsafe; I've built just enough to remove some of my own test data. Do not include this in any UI that is available to the production team
			// First remove episode_user_metrics

			// probably first need to remove events etc if there are any
			var deleteEpisodeDefer = $q.defer();
			// delete episode_user_metrics
			GET("/v2/episodes/" + episodeId + "/episode_user_metrics")
				.then(function (metrics) {
					console.log("GOT METRICS: ", metrics);
					if (metrics.length) {
						var deleteMetricsActions = [];

						for (var i = 0; i < metrics.length; i++) {
							deleteMetricsActions.push(DELETE("/v2/episode_user_metrics/" + metrics[i]._id));
						}
						$q.all(deleteMetricsActions)
							.then(function () {
								DELETE("/v3/episodes/" + episodeId);
								deleteEpisodeDefer.resolve();
							});
					} else {
						DELETE("/v3/episodes/" + episodeId);
						deleteEpisodeDefer.resolve();
					}
				});
			return deleteEpisodeDefer.promise;
		};

		svc.deleteItem = function (evtId) {
			return DELETE("/v3/events/" + evtId);
		};
		svc.createAsset = function (containerId, asset) {
			var createAssetDefer = $q.defer();
			console.log("Attempting to create asset ", asset);
			asset.container_id = containerId;
			if (asset._id && asset._id.match(/internal/)) {
				delete asset._id;
			}
			asset = modelSvc.deriveAsset(asset);
			POST("/v1/containers/" + containerId + "/assets", asset)
				.then(function (data) {
					modelSvc.containers[data.file.container_id].episodes = [data.file._id];
					modelSvc.cache("asset", data.file);
					createAssetDefer.resolve(data.file);
					//modelSvc.resolveEpisodeAssets(episodeId);
				});
			return createAssetDefer.promise;
		};

		svc.deleteAsset = function (assetId) {
			return DELETE("/v1/assets/" + assetId);
		};

		// TODO need safety checking here
		svc.storeItem = function (evt) {
			evt = prepItemForStorage(evt);
			if (!evt) {
				return false;
			}
			if (evt && evt._id && !evt._id.match(/internal/)) {
				// update
				return PUT("/v3/events/" + evt._id, {
					event: evt
				});
			} else {
				// create
				return POST("/v3/episodes/" + evt.episode_id + "/events", {
					event: evt
				});
			}
		};

		var prepItemForStorage = function (evt) {
			// Events, that is
			var prepped = {};
			if (evt._id && evt._id.match(/internal/)) {
				delete evt._id;
			}

			//  The data we want to store:
			var fields = [
				"_id",
				//				"producerItemType", // Nope
				"start_time",
				"end_time",
				"episode_id",
				"template_id",
				"templateUrl", // We should get this from template_id, but for now there's a dependency in editController on this existing. TODO remove that dependency
				"stop",
				"required",
				"cosmetic",
				"sxs", // for demos, for now
				"title",
				"url",
				"noEmbed",
				"annotator",
				"annotation",
				"description",
				"data",
				"asset_id",
				"link_image_id",
				"annotation_image_id",
				"avatar_id"
			];

			prepped.type = evt._type;
			for (var i = 0; i < fields.length; i++) {
				if (evt[fields[i]] !== undefined) {
					prepped[fields[i]] = angular.copy(evt[fields[i]]);
				}
			}

			// check that end_time is greater than start time
			if (prepped.start_time && prepped.end_time) {
				var startFloat = parseFloat(prepped.start_time);
				var endFloat = parseFloat(prepped.end_time);
				if (isNaN(startFloat) || isNaN(endFloat)) {
					errorSvc.error({
						data: "Tried to store an invalid start_time or end_time."
					});
					return false;
				}
				if (startFloat > endFloat) {
					errorSvc.error({
						data: "Tried to store a start_time that is after the end_time."
					});
					return false;
				}
			}

			// clean up multiple choice question Plugin data
			if (prepped.data) {
				delete prepped.data._plugin.selectedDistractor;
				delete prepped.data._plugin.hasBeenAnswered;
				delete prepped.data._plugin._type;
				if (prepped.data._plugin.distractors.length) {
					for (i = 0; i < prepped.data._plugin.distractors.length; i++) {
						delete prepped.data._plugin.distractors[i].selected;
					}
				}
			}

			// TODO if Credly badge events are ever authorable in producer we will have to do the same
			// filtering of user data for those here.   Let's not

			prepped.style_id = [];
			prepped.layout_id = [];

			// convert style/layout selections back into their IDs.
			// trust evt.styles[] and evt.layouts[], DO NOT use styleCss (it contains the scene and episode data too!)
			prepped.style_id = get_id_values("style", evt.styles);
			prepped.layout_id = get_id_values("layout", evt.layouts);

			var template = svc.readCache("template", "url", evt.templateUrl);
			if (template) {
				prepped.template_id = template.id;
			} else {
				prepped.template_id = reverseTemplateUpdate(evt.templateUrl);
			}
			if (prepped.template_id) {
				return prepped;
			} else {
				errorSvc.error({
					data: "Tried to store a template with no ID: " + evt.templateUrl
				});
				return false;
			}
		};
		svc.prepItemForStorage = prepItemForStorage;

		// No, we should not be storing episodes with no master asset halfway through editing
		// svc.detachMasterAsset = function (epData) {
		// 	var preppedData = prepEpisodeForStorage(epData);
		// 	preppedData.master_asset_id = null;
		// 	console.log("prepped sans master_asset_id for storage:", preppedData);
		// 	if (preppedData) {
		// 		return PUT("/v3/episodes/" + preppedData._id, preppedData);
		// 	} else {
		// 		return false;
		// 	}
		// };
		svc.detachEventAsset = function (evt, assetId) {
			evt = prepItemForStorage(evt);
			if (!evt) {
				return false;
			}
			if (evt.asset_id === assetId) {
				evt.asset_id = null;
			}
			if (evt.link_image_id === assetId) {
				evt.link_image_id = null;
			}
			if (evt.annotation_image_id === assetId) {
				evt.annotation_image_id = null;
			}
			if (evt && evt._id && !evt._id.match(/internal/)) {
				// update
				return PUT("/v3/events/" + evt._id, {
					event: evt
				});
			} else {
				// create
				return POST("/v3/episodes/" + evt.episode_id + "/events", {
					event: evt
				});
			}
		};

		var prepEpisodeForStorage = function (epData) {
			var prepped = {};
			if (epData._id && epData._id.match(/internal/)) {
				delete epData._id;
			}

			var fields = [
				"_id",
				"title",
				"description",
				"container_id",
				"customer_id",
				"master_asset_id",
				"poster_frame_id",
				"status",
				"languages"
				// "navigation_depth" // (0 for no cross-episode nav, 1 for siblings only, 2 for course and session, 3 for customer/course/session)
			];

			for (var i = 0; i < fields.length; i++) {
				if (epData[fields[i]] || epData[fields[i]] === 0) {
					prepped[fields[i]] = angular.copy(epData[fields[i]]);
				}
			}

			prepped.style_id = get_id_values("style", epData.styles);

			var template = svc.readCache("template", "url", epData.templateUrl);
			if (template) {
				prepped.template_id = template.id;
			} else {
				prepped.template_id = reverseTemplateUpdate(epData.templateUrl);
			}
			if (prepped.template_id) {
				return prepped;
			} else {
				errorSvc.error({
					data: "Tried to store a template with no ID: " + epData.templateUrl
				});
				return false;
			}
		};

		var reverseTemplateUpdate = function (templateUrl) {
			// HACK: this reverses the template versioning done in modelSvc
			// TODO: can I just talk bill into letting me store templateUrls directly and skip the whole ID business?
			var reverseTemplates = {
				// episodes
				"templates/episode/episode.html": "templates/episode-default.html",
				"templates/episode/eliterate.html": "templates/episode-eliterate.html",
				"templates/episode/ewb.html": "templates/episode-ewb.html",
				"templates/episode/gw.html": "templates/episode-gw.html",
				"templates/episode/purdue.html": "templates/episode-purdue.html",
				"templates/episode/story.html": "templates/episode-tellingstory.html",

				// annotation
				"templates/item/transcript.html": "templates/transcript-default.html",
				"templates/item/transcript-withthumbnail.html": "templates/transcript-withthumbnail.html",
				"templates/item/transcript-withthumbnail-alt.html": "templates/transcript-withthumbnail-alt.html",
				"templates/item/text-h1.html": "templates/text-h1.html",
				"templates/item/text-h2.html": "templates/text-h2.html",
				"templates/item/pullquote-noattrib.html": "templates/text-pullquote-noattrib.html",
				"templates/item/pullquote.html": "templates/text-pullquote.html",

				// upload
				"templates/item/image.html": "templates/transmedia-image-default.html",
				"templates/item/image-caption.html": "templates/transmedia-caption.html",
				"templates/item/image-caption-sliding.html": "templates/transmedia-slidingcaption.html",
				"templates/item/image-fill.html": "templates/transmedia-image-fill.html",
				"templates/item/image-plain.html": "templates/transmedia-image-plain.html",
				"templates/item/image-linkonly.html": "templates/transmedia-linkonly.html",
				"templates/item/image-thumbnail.html": "templates/transmedia-thumbnail.html",

				//link
				"templates/item/link.html": "templates/transmedia-link-default.html",
				"templates/item/link-embed.html": "templates/transmedia-link-embed.html",

				//scene
				"templates/scene/1col.html": "templates/scene-1col.html",
				"templates/scene/2colL.html": "templates/scene-2colL.html",
				"templates/scene/2colR.html": "templates/scene-2colR.html",
				"templates/scene/centered.html": "templates/scene-centered.html",
				"templates/scene/cornerH.html": "templates/scene-cornerH.html",
				"templates/scene/cornerV.html": "templates/scene-cornerV.html",

				//question
				"templates/item/question-mc-formative.html": "templates/question-mc-formative.html",
				"templates/item/question-mc-poll.html": "templates/question-mc-poll.html",

				"templates/item/question-mc.html": "templates/question-mc.html",
				"templates/item/question-mc-image-left.html": "templates/question-mc-image-left.html",
				"templates/item/question-mc-image-right.html": "templates/question-mc-image-right.html",

				"templates/item/sxs-question.html": "templates/sxs-question.html",
				"templates/item/sxs-link.html": "templates/sxs-link.html"
			};
			if (reverseTemplates[templateUrl]) {
				var template = svc.readCache("template", "url", reverseTemplates[templateUrl]);
				return template.id;
			} else {
				return false;
			}
		};

		// careful to only use this for guaranteed unique fields (style and layout names, basically)
		svc.readCache = function (cache, field, val) {
			var found = false;
			angular.forEach(dataCache[cache], function (item) {
				if (item[field] === val) {
					found = item;
				}
			});
			if (found) {
				return found;
			}
			return false;
		};
		if (config.debugInBrowser) {
			// console.log("DataSvc:", svc);
			console.log("DataSvc cache:", dataCache);
		}

		var get_id_values = function (cache, realNames) {

			// HACK These values won't have IDs, they're generated inside modelSvc.
			// Can remove this after template config is updated
			var pseudos = [
				"colorEliterate",
				"colorGw",
				"colorGwsb",
				"colorPurdue",
				"colorUsc",
				"colorColumbia",
				"colorColumbiabusiness",
				"typographyEliterate",
				"typographyGw",
				"typographyGwsb",
				"typographyPurdue",
				"typographyUsc",
				"typographyColumbia",
				"typographyColumbiabusiness"
			];

			// convert real styles and layouts back into id arrays. Not for templateUrls!
			var ids = [];

			angular.forEach(realNames, function (realName) {
				if (realName) {
					var cachedValue = svc.readCache(cache, "css_name", realName);
					if (cachedValue) {
						ids.push(cachedValue.id);
					} else {
						// HACK ignore pseudo-styles generated within modelSvc:
						if (pseudos.indexOf(realName) === -1) {
							errorSvc.error({
								data: "Tried to store a " + cache + " with no ID: " + realName
							});
							return false;
						} else {
							console.log("Ignoring ", realName);
						}
					}
				}
			});
			return ids;
		};

		return svc;
	}]);

'use strict';

/* 
to throw explicit errors:
		errorSvc.error({data: "This episode has not yet been published."});
		errorSvc.notify({data: "This hovercraft is full of Monty Python quotes."});

throw() or other js errors also get sent here by $exceptionHandler (though we're ignoring them for now)
*/

angular.module('com.inthetelling.story')
	.factory('errorSvc', ["$location", function ($location) {
		var svc = {};

		// TODO This is a mess.  make the field names less ridiculously inconsistent.  

		svc.init = function () {
			svc.errors = [];
			svc.notifications = [];
		};
		svc.init();

		svc.error = function (exception, cause) {
			if (exception && (exception.status === 401 || exception.status === 403)) {
				// "unauthorized" errors will clear login state for now.
				// TODO in future there may be cases where this isn't desirable (i.e. when we support more roles,
				// it may make sense to keep an existing role in place even if the user attempts to do something they're not allowed to?)
				console.warn(exception.status, " detected");

				// hacky special case for login page
				if ($location.path() === '/') {
					exception = undefined;
				}
			}
			if (exception && exception.data) {
				// API errors go here.

				if (typeof exception.data === "string") {
					// hide ruby stack trace:
					exception.data = exception.data.replace(/\n/g, '').replace(/==/g, '').replace(/-----.*/g, '');
					svc.errors.push({
						"exception": exception
					});
				} else {
					svc.errors.push({
						"exception": exception
					});
				}
			} else {
				// generic thrown javascript error.  TODO show these too, but only in dev environment (they're often not meaningful)
				console.warn("ErrorSvc caught error: ", exception, cause);
			}
		};

		svc.notify = function (note) {
			svc.notifications.push({
				'text': note
			});
		};

		return svc;
	}]);

'use strict';

var DEFAULT_EPISODE_TEMPLATE_URL = 'templates/episode/story.html';

/* Parses API data into player-acceptable format,
 and derives secondary data where necessary for performance/convenience/fun */

angular.module('com.inthetelling.story')
	.factory('modelSvc', ["$interval", "$filter", "$location", "ittUtils", "config", "appState", "youtubeSvc", function ($interval, $filter, $location, ittUtils, config, appState, youtubeSvc) {

		var svc = {};

		svc.episodes = {};
		svc.assets = {};
		svc.events = {}; // NOTE svc.events contains scenes and items -- anything that happens during the episode timeline
		svc.containers = {};
		svc.narratives = {};
		svc.customers = {};

		// receives cacheTypes of episode, event, asset, and container.
		// splits event into scenes and items.  Not sure yet whether we care about containers, discarding them for now.

		// TODO? normalize items before cacheing: (annotation_image_id and link_image_id -> asset_id, etc)
		// TODO discard unused fields before cacheing

		// use angular.extend if an object already exists, so we don't lose existing bindings

		svc.getNarrativeByPathOrId = function(pathOrId) {
			var isMongoId = /^[0-9a-fA-F]{24}$/.test(pathOrId);
			if (isMongoId) {
				return svc.narratives[pathOrId];
			}
			//else loop and find the matching path slug passed in.
			var n;
			for (n in svc.narratives) {
				if (svc.narratives.hasOwnProperty(n)) {
					if (pathOrId === svc.narratives[n].path_slug.en) {
						return svc.narratives[n];
					}
				}

			}
		};

		svc.cache = function (cacheType, item) {
			if (cacheType === 'narrative') {
				// NOTE no deriveNarrative used here, not needed so far

				if (svc.narratives[item._id]) {
					angular.extend(svc.narratives[item._id], item);
				} else {
					svc.narratives[item._id] = angular.copy(item);
				}
			}
			if (cacheType === 'customer') {
				// NOTE no deriveCustomer used here, not needed so far
				if (svc.customers[item._id]) {
					angular.extend(svc.customers[item._id], item);
				} else {
					svc.customers[item._id] = angular.copy(item);
				}
			}
			if (cacheType === 'episode') {
				if (svc.episodes[item._id]) {
					angular.extend(svc.episodes[item._id], svc.deriveEpisode(angular.copy(item)));
				} else {
					svc.episodes[item._id] = svc.deriveEpisode(angular.copy(item));
				}
			} else if (cacheType === 'event') {
				// TEMP fix for events without titles:
				if (!item.title) {
					item.title = {};
				}
				if (svc.events[item._id]) {
					angular.extend(svc.events[item._id], svc.deriveEvent(angular.copy(item)));
				} else {
					svc.events[item._id] = svc.deriveEvent(angular.copy(item));
				}
			} else if (cacheType === 'asset') {
				if (svc.assets[item._id]) {
					angular.extend(svc.assets[item._id], svc.deriveAsset(angular.copy(item)));
				} else {
					svc.assets[item._id] = svc.deriveAsset(angular.copy(item));
				}
			} else if (cacheType === 'container') {
				if (svc.containers[item._id]) {
					angular.extend(svc.containers[item._id], svc.deriveContainer(angular.copy(item)));
				} else {
					svc.containers[item._id] = svc.deriveContainer(angular.copy(item));
				}

			}
		};

		// update template paths from v1.  This is temporary until I have the set of new templates nailed down
		// and have figured out which can be merged or etc; then we can update the values in the database
		var updateTemplates = {
			"templates/episode-default.html": "templates/episode/episode.html",
			"templates/episode-eliterate.html": "templates/episode/eliterate.html",
			"templates/episode-ewb.html": "templates/episode/ewb.html",
			"templates/episode-gw.html": "templates/episode/gw.html",
			"templates/episode-purdue.html": "templates/episode/purdue.html",
			"templates/episode-tellingstory.html": "templates/episode/story.html",

			"templates/scene-1col.html": "templates/scene/1col.html",
			"templates/scene-2colL.html": "templates/scene/2colL.html",
			"templates/scene-2colR.html": "templates/scene/2colR.html",
			"templates/scene-centered.html": "templates/scene/centered.html",
			"templates/scene-cornerH.html": "templates/scene/cornerH.html",
			"templates/scene-cornerV.html": "templates/scene/cornerV.html",

			//annotation:
			"templates/transcript-default.html": "templates/item/transcript.html",
			"templates/transcript-withthumbnail.html": "templates/item/transcript-withthumbnail.html",
			"templates/transcript-withthumbnail-alt.html": "templates/item/transcript-withthumbnail-alt.html",
			"templates/text-h1.html": "templates/item/text-h1.html",
			"templates/text-h2.html": "templates/item/text-h2.html",
			"templates/text-pullquote-noattrib.html": "templates/item/pullquote-noattrib.html",
			"templates/text-pullquote.html": "templates/item/pullquote.html",

			// upload
			"templates/transmedia-caption.html": "templates/item/image-caption.html",
			"templates/transmedia-image-default.html": "templates/item/image.html",
			"templates/transmedia-slidingcaption.html": "templates/item/image-caption-sliding.html",
			"templates/transmedia-image-fill.html": "templates/item/image-fill.html",
			"templates/transmedia-image-plain.html": "templates/item/image-plain.html",
			"templates/transmedia-linkonly.html": "templates/item/image-linkonly.html",
			"templates/transmedia-thumbnail.html": "templates/item/image-thumbnail.html",

			//link
			"templates/transmedia-link-default.html": "templates/item/link.html",
			"templates/transmedia-link-frameicide.html": "templates/item/link.html",
			"templates/transmedia-link-noembed.html": "templates/item/link.html",
			"templates/transmedia-link-embed.html": "templates/item/link-embed.html",
			"templates/transmedia-link-youtube.html": "templates/item/link.html",
			"templates/transmedia-embed-youtube.html": "templates/item/link-embed.html",

			// was used internally in v3 player, never exposed to authors so shouldn't appear BUT YOU NEVER KNOW:
			"templates/transmedia-link-icon.html": "templates/item/link.html",

			// (from old sxs demo; can delete later)
			// "templates/upload-demo-inline.html": "templates/item/debug.html",
			// "templates/upload-demo.html": "templates/item/debug.html",

			//questions
			"templates/question-mc-formative.html": "templates/item/question-mc-formative.html",
			"templates/question-mc-poll.html": "templates/item/question-mc-poll.html",

			"templates/question-mc.html": "templates/item/question-mc.html",
			"templates/question-mc-image-left.html": "templates/item/question-mc-image-left.html",
			"templates/question-mc-image-right.html": "templates/item/question-mc-image-right.html",

			"templates/sxs-question.html": "templates/item/sxs-question.html"
		};

		// svc.deriveFoo() are for efficiency precalculations.
		// Input API data, output API data plus clientside-only convenience variables.
		// Should call this after making any changes to the underlying data.

		svc.deriveEpisode = function (episode) {
			// console.log("deriveEpisode:", episode);

			//If the episode doesn't have a template then assign it the default template
			if (!episode.templateUrl) {
				episode.templateUrl = DEFAULT_EPISODE_TEMPLATE_URL;
			}

			if (updateTemplates[episode.templateUrl]) {
				episode.origTemplateUrl = episode.templateUrl;
				episode.templateUrl = updateTemplates[episode.templateUrl];
			}

			// unpack languages
			angular.forEach(episode.languages, function (lang) {
				if (lang.default) {
					// console.log("FOUND DEFAULT LANGUAGE", lang.code, appState.lang);
					episode.defaultLanguage = lang.code;
				}
			});
			if (episode.defaultLanguage === false) {
				episode.defaultLanguage = "en"; // last resort
			}
			svc.setLanguageStrings();

			// For now, automatically add customer-specific styles to episode if there aren't other selections.
			// (TODO Producer should do this automatically; this is for legacy episodes):
			if (!episode.styles) {
				episode.styles = [];
			}
			angular.forEach(["eliterate", "gw", "gwsb", "purdue", "usc", "columbia", "columbiabusiness"], function (customer) {
				if (episode.templateUrl === "templates/episode/" + customer + ".html") {
					angular.forEach(["color", "typography"], function (styleType) {
						// if the episode doesn't already have styletypeFoo, add styletypeCustomer
						var found = false;
						angular.forEach(episode.styles, function (style) {
							if (style.match(styleType)) {
								found = true;
							}
						});
						if (!found) {
							episode.styles.push(styleType + customer[0].toUpperCase() + customer.substring(1));
						}
					});
				}
			});

			if (episode.title && svc.events["internal:landingscreen:" + episode._id]) {
				svc.events["internal:landingscreen:" + episode._id].title = episode.title;
				svc.events["internal:landingscreen:" + episode._id] = setLang(svc.events["internal:landingscreen:" + episode._id]);
			}

			episode = setLang(episode);
			return episode;
		};

		svc.deriveAsset = function (asset) {
			// console.log("deriveAsset:", asset);
			if (asset._type === "Asset::Video") {
				asset = resolveVideo(asset);
			}
			asset = setLang(asset);
			return asset;
		};

		// TODO there are some hacky dependencies on existing templateUrls which really ought to become
		// separate data fields in their own right:
		//      isTranscript (for Annotations)
		//      allowEmbed, noExternalLink, and targetTop (for Links)

		/* TODO also we should merge the Link and Upload types, split those templates by file type instead of source,
		 and make all these data fields consistent:

		 Upload/link
		 title: Link text
		 (category)
		 required
		 description: Description
		 displayTime: Timestamp
		 allowEmbed: is/isn't frameable
		 targetTop: link should point to window.top (for end-of-episode links back to LTI host)
		 url: primary URL
		 url_type: file type
		 (?) secondary image URL (icon, thumbnail, etc)

		 Annotation
		 Speaker
		 text
		 secondary image URL (speaker icon)
		 */

		svc.deriveContainer = function (container) {

			// console.log("deriving container", container);

			container.haveNotLoadedChildData = false; // not sure yet if this is necessary
			// first sort the children:
			if (container.children && container.children.length > 0) {
				// When we populate sort_order, we can remove this:
				container.children = container.children.sort(function (a, b) {
					return (a.name.en > b.name.en) ? 1 : -1; // WARN always sorted by english
				});
				// This is the real one (for now sort_order always is zero, so this sort will have no effect):
				container.children = container.children.sort(function (a, b) {
					return a.sort_order - b.sort_order;
				});

				var childRefs = [];
				angular.forEach(container.children, function (child) {
					if (svc.containers[child._id]) {
						childRefs.push(svc.containers[child._id]);
					} else {
						child.haveNotLoadedChildData = true; // not sure yet if this is necessary
						svc.containers[child._id] = angular.copy(setLang(child));
					}

				});

				container.loadedChildData = true;
			} else {
				container.children = [];
			}
			return setLang(container);
		};

		var isTranscript = function (item) {
			if (typeof (item) !== 'undefined') {
				if (item._type === 'Annotation' && item.templateUrl.match(/transcript/)) {
					return true;
				} else {
					return false;
				}
			}
		};

		svc.deriveEvent = function (event) {

			event = setLang(event);

			if (event._type !== 'Scene') {

				event.searchableText = (event.display_annotation || event.display_description) + " " + (event.display_title || event.display_annotator);
				if (!event.cosmetic) {
					event.cosmetic = false; // search needs this to be explicit
				}
				if (event.sxs) { // HACK can probably be safely removed?
					event.cosmetic = false;
				}
				if (!event.templateUrl) {
					event.templateUrl = '';
				}

				if (event.avatar_id) {
					if (!svc.assets[event.avatar_id]) { // not sure if necessary here.  Should move this into a getter function for assets anyway
						svc.assets[event.avatar_id] = {};
					}
					event.avatar = svc.assets[event.avatar_id];
				}

				if (svc.episodes[event.cur_episode_id] && svc.episodes[event.cur_episode_id].templateUrl === 'templates/episode/usc.html') {
					// HACKS AHOY
					// USC made a bunch of change requests post-release; this was the most expedient way
					// to deal with them. Sorry!

					// I don't know why this situation occurs, but it does:
					if (event.templateUrl === '') {
						event.templateUrl = 'templates/item/usc-badges.html';
					}

					if (event._type === "Link") {
						if (event.templateUrl === 'templates/transmedia-link-default.html') {
							// they don't want any embedded links (shrug)
							event.templateUrl = 'templates/transmedia-link-noembed.html';
						}
						if (event.display_title.match(/ACTIVITY/)) {
							// Unnecessary explanatory text
							event.display_description = event.display_description + '<div class="uscWindowFgOnly">Remember! You need to complete this activity to earn a Friends of USC Scholars badge. (When youâ€™re finished - Come back to this page and click <b>Continue</b>).<br><br>If youâ€™d rather <b>not</b> do the activity, clicking Continue will take you back to the micro-lesson and you can decide where you want to go from there.</div>';
						}
						if (event.display_title.match(/Haven't Registered/)) {
							// hide this event for non-guest users
							event.styles = event.styles ? event.styles : [];
							event.styles.push("uscHackOnlyGuests"); // will be used in discover mode (so we don't have to explicitly include it in the scene templates)
							event.uscReviewModeHack = "uscHackOnlyGuests"; // ...except the review mode template, because item styles don't show up there
						}
						if (event.display_title.match(/Connect with/)) {
							// hide this event unless episode badge is achieved
							event.styles = event.styles ? event.styles : [];
							event.styles.push("uscHackOnlyBadge"); // will be used in discover mode (so we don't have to explicitly include it in the scene templates)
							event.uscReviewModeHack = "uscHackOnlyBadge"; // ...except the review mode template, because item styles don't show up there
						}
					}
					// END of USC hacks
				}

				//items

				// clear derived flags before re-setting them (in case we're editing an existing item):
				event.isContent = false;
				event.isTranscript = false;
				event.noEmbed = event.noEmbed === undefined ? false : event.noEmbed;
				event.mixedContent = false;
				event.noExternalLink = false;
				event.targetTop = false;

				//console.log("dataSvc event noEmbed", event.noEmbed);
				//console.log("dataSvc event reset", event);

				// determine whether the item is in a regular content pane.
				// items only have one layout (scenes may have more than one...)
				if (event.layouts) {
					event.layoutCss = event.layouts[0];
					if (event.layouts[0] === 'inline' || event.layouts[0].match(/sidebar/) || event.layouts[0].match(/burst/)) {
						event.isContent = true;
					}
				} else {
					// no layout, therefore inline content
					event.isContent = true;
				}

				// Old templates which (TODO) should have been database fields instead:
				if (isTranscript(event)) {
					event.isTranscript = true;
				}
				if (event.templateUrl.match(/noembed/)) {
					event.noEmbed = true;
				}

				var isHttps = $location.protocol() === 'https';
				if (event._type === "Link" && event.url && event.url.match(/^http:\/\//) && isHttps) {
					event.noEmbed = true;
					event.mixedContent = true;
					event.tipText = 'Link Embed is disabled because ' + event.url + ' is not HTTPS';
					event.showInlineDetail = false;
				}

				if (event._type === "Link" && event.url && /mailto/.test(event.url)) {
					event.noEmbed = true;
				}

				if (event.templateUrl.match(/link-youtube/) || event.templateUrl.match(/-embed/)) {
					event.noExternalLink = true;
				}

				if (event.templateUrl.match(/frameicide/)) {
					event.targetTop = true;
					event.noEmbed = true;
				}
			}

			// both scenes and items.  Do this last for now, since we're doing some ugly string matching against the old templateUrl:
			if (updateTemplates[event.templateUrl]) {
				event.origTemplateUrl = event.templateUrl;
				event.templateUrl = updateTemplates[event.templateUrl];

				// coerce old image-plain background images into image-fill:
				if (!event.isContent && event.templateUrl === "templates/item/image-plain.html") {
					event.templateUrl = "templates/item/image-fill.html";
				}
				// hack for old authoring tool quirk:
				if (event.templateUrl === "templates/item/image-plain.html") {
					if (event.styles) {
						event.styles.push("timestampNone");
					} else {
						event.styles = ["timestampNone"];
					}
				}
			} else {
				// console.log("Keeping same templateUrl:", event.templateUrl);
				event.origTemplateUrl = event.templateUrl;
			}

			// Finally one more super-fragile HACK for producer:
			if (!event.producerItemType) {
				if (event._type === 'Scene') {
					event.producerItemType = 'scene';
				} else if (event._type === 'Annotation') {
					if (event.templateUrl.match(/transcript/)) {
						event.producerItemType = 'transcript';
					} else {
						event.producerItemType = 'annotation';
					}
				} else if (event._type === 'Upload') {
					if (event.templateUrl.match(/file/)) { // HACK
						event.producerItemType = 'file';
					} else {
						event.producerItemType = 'image';
					}
				} else if (event._type === 'Link') {
					if (event.templateUrl.match(/video/)) {
						event.producerItemType = 'video';
					} else {
						event.producerItemType = 'link';
					}
				} else if (event._type === 'Plugin') {
					if (event.templateUrl.match(/question/)) {
						event.producerItemType = 'question';
					}
				}
				if (!event.producerItemType) {
					console.warn("Couldn't determine a producerItemType for ", event.templateUrl);
				}
			}

			event.displayStartTime = $filter("asTime")(event.start_time);

			return event;
		};

		var setLang = function (obj) {
			// TODO: keywords, customers/oauth2_message
			// TODO use episode default language instead of 'en'
			var langToSet = (appState.lang) ? appState.lang : "en";
			angular.forEach(["title", "annotator", "annotation", "description", "name"], function (field) {
				if (obj[field]) {
					if (typeof (obj[field]) === 'string') {
						// TODO can delete this after all data has been migrated to object form
						obj["display_" + field] = obj[field];
					} else {
						if (obj[field][langToSet]) {
							obj["display_" + field] = obj[field][langToSet];
						} else {
							obj["display_" + field] = obj[field].en; // TODO use episode default language instead of 'en'
						}
					}
				}
			});
			return obj;
		};

		svc.setLanguageStrings = function () {
			angular.forEach(svc.events, function (evt) {
				evt = setLang(evt);
			});
			angular.forEach(svc.episodes, function (ep) {
				ep = setLang(ep);
			});
			angular.forEach(svc.containers, function (container) {
				container = setLang(container);
			});
			// todo:  containers
		};

		/*  Any changes to any scene or item data must call svc.resolveEpisodeEvents afterwards. It sets:
		 - episode.scenes
		 - episode.items
		 - scene.items
		 - item.scene_id
		 - episode.annotators (for use in producer)

		 NOTE: this currently calls cascadeStyles on episodes and events as a side effect.
		 deriveEvent() and deriveEpisode() would be a theoretically more consistent place for that, but
		 cascadeStyles depends on the episode structure we're building here, so it feels dangerous to separate them.

		 // HACK magic numbers galore:
		 endingscene cuts the duration of the last scene by 0.1 seconds
		 startingscreen extends from below zero to 0.01s

		 */
		svc.resolveEpisodeEvents = function (epId) {
			// console.log("resolveEpisodeEvents");
			//Build up child arrays: episode->scene->item
			var scenes = [];
			var items = [];
			var episode = svc.episodes[epId];
			angular.forEach(svc.events, function (event) {
				if (event.cur_episode_id !== epId) {
					return;
				}

				if (event._type === 'Scene') {
					scenes.push(event);
				} else {
					items.push(event);
				}

			});

			// collect a list of all the speakers/annotators in the episode.
			// Try to merge partially-translated annotator names into the more fully-translated versions.
			// This is imperfect -- a few will slip through if there is a missing translation in the default language -- but good enough for now
			// TODO replace all of this, have the API keep track of each annotator as a real, separate entity
			var annotators = {};
			angular.forEach(items, function (event) {
				if (event._type === 'Annotation' && event.annotator) {
					// This is kind of a mess
					// Use the default language as the key; merge any other languages into that key
					var defaultLanguage = episode.defaultLanguage || 'en';
					var key = event.annotator[defaultLanguage];

					if (key === undefined) {
						// this annotator doesn't have a translation in the default language, so use its first language instead
						key = event.annotator[Object.keys(event.annotator)
							.sort()[0]];
					}

					if (annotators[key]) {
						// merge other translations of the same name into this one
						annotators[key].name = angular.extend(annotators[key].name, event.annotator);
						if (!annotators[key].annotation_image_id) {
							annotators[key].annotation_image_id = event.annotation_image_id;
						}
					} else {
						annotators[key] = {
							"name": event.annotator,
							"annotation_image_id": event.annotation_image_id
						};
					}

					// construct a description containing all languages, starting with the default
					var langs = Object.keys(annotators[key].name)
						.sort();
					var longKey = annotators[key].name[defaultLanguage] || '(untranslated)';
					for (var i = 0; i < langs.length; i++) {
						if (langs[i] !== defaultLanguage) {
							longKey = longKey + " / " + annotators[key].name[langs[i]];
						}
					}
					annotators[key].key = longKey;
				}
			});
			episode.annotators = annotators;

			// WARN Chrome doesn't stable sort!   Don't depend on simultaneous events staying in the same order
			// attach array of scenes to the episode.
			// Note these are references to objects in svc.events[]; to change item data, do it in svc.events[] instead of here.
			var duration = 0;
			if (episode.masterAsset) {
				duration = episode.masterAsset.duration;
				angular.forEach(episode.scenes, function (scene) {
					if (scene.start_time > duration) {
						scene.start_time = duration - 0.2; // last resort HACK to catch bad scene data
					}
				});
			}

			episode.scenes = scenes.sort(function (a, b) {
				if (a._id.indexOf('internal:start') > -1 || b._id.indexOf('internal:end') > -1) {
					return -1;
				}
				if (b._id.indexOf('internal:start') > -1 || a._id.indexOf('internal:end') > -1) {
					return 1;
				}
				return a.start_time - b.start_time;
			});

			// and a redundant array of child items to the episode for convenience (they're just references, so it's not like we're wasting a lot of space)

			// Fix bad event timing data.  (see also svc.deriveEvent())
			angular.forEach(items, function (event) {

				// We have some events whose start time is beyond the episode duration; they were winding up attached to the endingscene (and therefore invisible)
				// HACK just shove those into the end of the last (real) scene with a short duration
				if (duration > 0) {
					if (event.start_time > duration - 0.11) { // the -0.11 ensures they don't get attached to the ending screen
						event.start_time = duration - 0.2;
						event.end_time = duration - 0.1;
					}
				}

				// HACK keep events from being attached to landing screen if there is one
				if (event.start_time < 0.01) {
					event.start_time = 0.01;
					if (event.end_time < 0.01) {
						event.end_time = 0.01;
					}
				}

				// Some events have been stored with end times before their start times.
				if (event.start_time > event.end_time) {
					event.end_time = event.start_time;
				}
			});


			//for items with the same time, ensure hierarchy of items
			//in the following order:
			// 1. Annotations:
			//  	- H1 > H2 > isTranscript
			// 3. Links
			// 4. Uploads
			//		- Document > Image
			//5. all other annotations
			episode.items = items.sort(function (a, b) {
				if (a.start_time === b.start_time) {
					if (a.templateUrl === 'templates/item/text-h1.html') {
						return -1;
					} else if (b.templateUrl === 'templates/item/text-h1.html') {
						return 1;
					} else if (a.templateUrl === 'templates/item/text-h2.html') {
						return -1;
					} else if (b.templateUrl === 'templates/item/text-h2.html') {
						return 1;
					} else if (a.isTranscript) {
						return -1;
					} else if (b.isTranscript) {
						return 1;
					} else if (a._type === 'Link') {
						return -1;
					} else if (b._type === 'Link') {
						return 1;
					} else if (a._type === 'Upload') {
						if (a.producerItemType === 'file' || b._type === 'Annotation' ) {
							return -1;
						} else {
							return 1;
						}
					} else if (b._type === 'Upload') {
						return 1;
					} else {
						return -1;
					}

				} else {
					return a.start_time - b.start_time;
				}
			});


			// console.log('after sort \n', items);
			// ensure scenes are contiguous. Including the ending scene as end_times are relied on in producer in any editable scene.
			// Note that this means we explicitly ignore scenes' declared end_time; instead we force it to the next scene's start (or the video end)
			for (var i = 1, len = episode.scenes.length; i < len; i++) {
				if (i === len - 1) {
					if (duration !== 0) {
						episode.scenes[i].end_time = duration;
					}
				} else {
					episode.scenes[i].end_time = episode.scenes[i + 1].start_time;
				}
			}

			var itemsIndex = 0;
			// assign items to scenes (give them a scene_id and attach references to the scene's items[]:
			//angular.forEach(scenes, function (scene) {
			for (var y = 0, scenesLength = scenes.length; y < scenesLength; y++) {
				var scene = scenes[y];
				var sceneItems = [];
				var previousTranscript = {};
				for (var x = itemsIndex, itemsLength = items.length; x < itemsLength; x++) {
					var event = items[x];

					//angular.forEach(items, function (event) {
					/* possible cases:
					 start and end are within the scene: put it in this scene
					 start is within this scene, end is after this scene:
					 if item start is close to the scene end, change item start to next scene start time. The next loop will assign it to that scene
					 if item start is not close to the scene end, change item end to scene end, assign it to this scene.
					 start is before this scene, end is within this scene: will have already been fixed by a previous loop
					 start is after this scene: let the next loop take care of it
					 */
					if (event.start_time >= scene.start_time && event.start_time < scene.end_time) {
						if (isTranscript(event)) {
							// console.log('transcript event', event);
							//the current event is a transcript and we have a transcript (in this scene) before it that has incorrectly set its end_time to the scene end_time.
							if (previousTranscript.end_time === scene.end_time) {
								// console.log('adjusting according to previousTranscript');
								//end_time may have been empty before the last itter of loop
								previousTranscript.end_time = event.start_time;
							}
							previousTranscript = event;
						}

						if (event.end_time <= scene.end_time) {
							// entirely within scene
							svc.events[event._id].scene_id = scene._id;
							sceneItems.push(event);
						} else {

							// end time is in next scene.  Check if start time is close to scene end, if so bump to next scene, otherwise truncate the item to fit in this one
							if (scene.end_time - 0.25 < event.start_time) {
								if (y !== scenesLength - 1) {
									// bump to next scene
									event.start_time = scene.end_time;
								} else {
									//in last scene
									event.end_time = scene.end_time;
									event.scene_id = scene._id;
									sceneItems.push(event);
								}
							} else {
								// truncate and add to this one
								event.end_time = scene.end_time;
								event.scene_id = scene._id;
								sceneItems.push(event);
							}
						}
					}
					// This optimization was dropping some events:
					// if (event.start_time > scene.end_time) {
					// 	itemsIndex = x; //set the current index to i, no need to loop through things we've already seen
					// 	break; // no need to continue checking events after this point as no events will be added to this scene after this point
					// }

				}
				// attach array of items to the scene event:
				// Note these items are references to objects in svc.events[]; to change item data, do it in svc.events[] instead of here.
				svc.events[scene._id].items = sceneItems.sort(function (a, b) {

					if (a.start_time !== b.start_time || !b.layouts) {
						return a.start_time - b.start_time;
					} else {
						// put simultaneous sidebar items first:
						if (b.layouts.indexOf("sidebarL") > -1 || b.layouts.indexOf("sidebarR") > -1) {
							return 1;
						} else {
							return 0;
						}
					}

				});
			}
			// Now that we have the structure, calculate event styles (for scenes and items:)
			episode.styleCss = cascadeStyles(episode);
			angular.forEach(svc.events, function (event) {
				if (event.cur_episode_id !== epId) {
					return;
				}
				event.styleCss = cascadeStyles(event);
				if (event.layouts) {
					event.styleCss = event.styleCss + " " + event.layouts.join(' ');
				}
			});
		};

		svc.resolveEpisodeContainers = function (epId) {
			// Constructs the episode's parents[] array, up to its navigation depth plus (skipping the episode container itself)
			// Also sets the episode's nextEpisodeContainer and prevEpisodeContainer

			// all parent containers should have been loaded by the time this is called, so we don't need to worry about asynch at each step
			// console.log("resolveEpisodeContainers", epId);
			var episode = svc.episodes[epId];
			episode.parents = [];
			delete episode.previousEpisodeContainer;
			delete episode.nextEpisodeContainer;
			// if (episode.navigation_depth > 0) {
			// 	setParents(Number(episode.navigation_depth) + 1, epId, episode.container_id);
			// } else {
			episode.navigation_depth = 0;
			// }
		};

		/*
		 var setParents = function (depth, epId, containerId) {


		 // console.log("setParents", depth, epId, containerId);
		 var episode = svc.episodes[epId];

		 // THis will build up the parents array backwards, starting at the end
		 if (depth <= episode.navigation_depth) { // skip the episode container
		 episode.parents[depth - 1] = svc.containers[containerId];
		 }

		 if (depth === episode.navigation_depth) {
		 // as long as we're at the sibling level, get the next and previous episodes
		 // (But only within the session: this won't let us find e.g. the previous episode from S4E1; that's TODO)
		 for (var i = 0; i < svc.containers[containerId].children.length; i++) {
		 var c = svc.containers[containerId].children[i];
		 if (c.episodes[0] === epId) {
		 if (i > 0) {
		 // find the previous 'Published' episode
		 for (var j = i - 1; j > -1; j--) {
		 if (svc.containers[svc.containers[containerId].children[j]._id].status === 'Published') {
		 episode.previousEpisodeContainer = svc.containers[svc.containers[containerId].children[j]._id];
		 break;
		 }
		 }
		 }
		 if (i < svc.containers[containerId].children.length - 1) {
		 for (var k = i + 1; k < svc.containers[containerId].children.length; k++) {
		 if (svc.containers[svc.containers[containerId].children[k]._id].status === 'Published') {
		 episode.nextEpisodeContainer = svc.containers[svc.containers[containerId].children[k]._id];
		 break;
		 }
		 }
		 }
		 }
		 }
		 }

		 // iterate
		 if (depth > 1) {
		 setParents(depth - 1, epId, svc.containers[containerId].parent_id);
		 }

		 };
		 */

		svc.episode = function (epId) {
			if (!svc.episodes[epId]) {
				console.warn("called modelSvc.episode for a nonexistent ID", epId);
			}
			return svc.episodes[epId];
		};

		// returns all scenes and items for a given episode
		svc.episodeEvents = function (epId) {
			// console.log("modelSvc.episodeEvents");
			var ret = [];
			angular.forEach(svc.events, function (event) {
				if (event.cur_episode_id !== epId) {
					return;
				}
				ret.push(event);
			});
			return ret;
		};

		// returns whichever scene is current for the given time.
		svc.sceneAtEpisodeTime = function (epId, t) {
			t = t || appState.time;
			var scenes = svc.episodes[epId].scenes;
			for (var i = 0; i < scenes.length; i++) {
				if (scenes[i].start_time <= t && scenes[i].end_time > t) {
					return scenes[i];
				}
			}
		};

		svc.scene = function (sceneId) {
			// console.log("modelsvc.scene: ", sceneId);
			if (!svc.events[sceneId]) {
				console.warn("called modelSvc.scene for a nonexistent ID", sceneId);
			}
			return svc.events[sceneId];
		};

		// Squish an episode, scene or item's episode styles, scene styles, and styles into a single styleCss string.
		// Styles with these prefixes are the only ones that get passed down to children, and only if there isn't
		// one with the same prefix on the child.
		// typography, color, highlight, timestamp, transition
		var cascadeStyles = function (thing) {
			var styleCategories = { // used to keep track of what categories the thing is already using:
				"typography": false,
				"color": false,
				"highlight": false,
				"timestamp": false,
				"transition": false
			};
			var cssArr = [];

			// start with the thing's own styles

			angular.forEach(thing.styles, function (style) {
				cssArr.push(style); // keep all styles; not just the ones in a styleCategory
				angular.forEach(styleCategories, function (categoryValue, categoryName) {
					if (style.indexOf(categoryName) === 0) {
						styleCategories[categoryName] = style;
					}
				});
			});

			// add each sceneStyle, only if it is in a styleCategory the thing isn't already using
			if (thing.scene_id) {
				var sceneStyles = svc.events[thing.scene_id].styles;
				angular.forEach(sceneStyles, function (style) {
					angular.forEach(styleCategories, function (categoryValue, categoryName) {
						if (!styleCategories[categoryName] && style.indexOf(categoryName) === 0) {
							cssArr.push(style);
							styleCategories[categoryName] = style;
						}
					});
				});
			}

			// add each episodeStyle, only if it is in a styleCategory the thing isn't already using
			if (thing.cur_episode_id) {
				var episodeStyles = svc.episodes[thing.cur_episode_id].styles;
				angular.forEach(episodeStyles, function (style) {
					angular.forEach(styleCategories, function (categoryValue, categoryName) {
						if (!styleCategories[categoryName] && style.indexOf(categoryName) === 0) {
							cssArr.push(style);
						}
					});
				});
			}

			// TEMPORARY: force bg items to transitionFade
			if ((thing._type !== 'Scene') && !thing.isContent && thing.layouts && thing.layouts[0].match(/Bg/)) {
				for (var i = 0; i < cssArr.length; i++) {
					if (cssArr[i].match(/transition/) && cssArr[i] !== 'transitionNone') {
						cssArr[i] = "transitionFade";
					}
				}
			}

			return cssArr.join(' ');
		};

		svc.resolveEpisodeAssets = function (episodeId) {
			// console.log("resolveEpisodeAssets");
			// attaches assets to svc.events
			angular.forEach(svc.events, function (item) {
				if (item.cur_episode_id !== episodeId) {
					return;
				}
				var assetId = item.asset_id || item.link_image_id || item.annotation_image_id;
				if (!assetId) {
					return;
				}
				if (svc.assets[assetId]) {
					svc.events[item._id].asset = svc.assets[assetId];
				}
			});
			// Do episode's master asset and poster, too.  If they're not here, do nothing; this will get called again after assets load
			if (svc.episodes[episodeId]) {
				var master_asset_id = svc.episodes[episodeId].master_asset_id;
				if (master_asset_id) {
					if (svc.assets[master_asset_id]) {
						svc.episodes[episodeId].masterAsset = svc.assets[master_asset_id];
					}
				}
				var poster_frame_id = svc.episodes[episodeId].poster_frame_id;
				if (poster_frame_id) {
					if (svc.assets[poster_frame_id]) {
						svc.episodes[episodeId].poster = svc.assets[poster_frame_id];
					}
				}
			}
		};

		// TODO: Future episodes should have this as an available scene template instead
		svc.addLandingScreen = function (episodeId) {
			// console.log("add landing screen", episodeId);
			// create a new scene event for this episode
			svc.events["internal:landingscreen:" + episodeId] = {
				"_id": "internal:landingscreen:" + episodeId,
				"_type": "Scene",
				"_internal": true,
				"templateUrl": "templates/scene/landingscreen.html",
				"cur_episode_id": episodeId,
				"episode_id": episodeId,
				"start_time": -0.01, // enforce its firstness; a start time of zero might sort after the first scene which also starts at zero
				"end_time": 0.01
			};
		};

		// Don't call this until the master asset exists and episode events have loaded!
		svc.addEndingScreen = function (episodeId) {
			// console.log("addEndingScreen", svc.episodes[episodeId].scenes);
			var episode = svc.episodes[episodeId];

			if (!episode || !episode.scenes) {
				console.warn("addEndingScreen called on an episode without scenes");
				return;
			}

			if (!episode.masterAsset) {
				console.warn("No master asset in episode...");
				return;
			}

			//may not be sorted... so sort them
			episode.scenes = episode.scenes.sort(function (a, b) {
				return a.start_time - b.start_time;
			});
			var lastScene = episode.scenes[episode.scenes.length - 1];
			if (lastScene._id.match(/internal:endingscreen/)) {
				console.error("Attempted to add an ending screen twice");
				return;
			}

			var duration = parseFloat(episode.masterAsset.duration); // HACK

			//coerce end of last scene (and its items) to match video duration:
			lastScene.end_time = duration - 0.1;
			angular.forEach(lastScene.items, function (item) {
				if (item.end_time > duration - 0.1) {
					item.end_time = duration - 0.1;
				}
			});
			// create a new scene event for this episode
			svc.events["internal:endingscreen:" + episodeId] = {
				"_id": "internal:endingscreen:" + episodeId,
				"_type": "Scene",
				"_internal": true,
				"templateUrl": "templates/scene/endingscreen.html",
				"cur_episode_id": episodeId,
				"start_time": duration - 0.1,
				"end_time": duration
			};
			svc.events["internal:endingscreen:" + episodeId] = setLang(svc.events["internal:endingscreen:" + episodeId]);
			svc.resolveEpisodeEvents(episodeId);
		};

		var resolveVideo = function (videoAsset) {
			var videoObject = {
				youtube: [],
				mp4: [],
				webm: [],
				m3u8: []
			};

			var extensionMatch = /\.(\w+)$/;

			if (videoAsset.alternate_urls) {
				// Sort them out by file extension first:
				for (var i = 0; i < videoAsset.alternate_urls.length; i++) {
					if (videoAsset.alternate_urls[i].match(/youtube/)) {
						if (youtubeSvc.embeddableYoutubeUrl(videoAsset.alternate_urls[i])) {
							videoObject.youtube.push(youtubeSvc.embeddableYoutubeUrl(videoAsset.alternate_urls[i]));
						}
					} else {
						videoObject[videoAsset.alternate_urls[i].match(extensionMatch)[1]].push(videoAsset.alternate_urls[i]);
					}
				}
				if (videoAsset.you_tube_url && youtubeSvc.embeddableYoutubeUrl(videoAsset.you_tube_url)) {
					videoObject.youtube.push(youtubeSvc.embeddableYoutubeUrl(videoAsset.you_tube_url));
				}
				// now by size:
				// most video files come from the API with their width and height in the URL as blahblah123x456.foo:
				var videoPixelSize = /(\d+)x(\d+)\.\w+$/; // [1]=w, [2]=h
				angular.forEach(Object.keys(videoObject), function (key) {
					videoObject[key] = videoObject[key].sort(function (a, b) {
						// There shouldn't ever be cases where we're comparing two non-null filenames, neither of which have a
						// WxH portion, but fill in zero just in case so we can at least continue rather than erroring out
						var aTest = a.match(videoPixelSize) || [0, 0];
						var bTest = b.match(videoPixelSize) || [0, 0];
						return aTest[1] - bTest[1]; // compare on width
					});
				});
			}

			// Old-school episodes, or linked youtube assets
			// Use the you_tube_url,  if it's not present in alternate_urls:
			if (videoObject.youtube.length === 0) {
				if (videoAsset.url) {
					if (youtubeSvc.embeddableYoutubeUrl(videoAsset.url)) {
						videoAsset.you_tube_url = youtubeSvc.embeddableYoutubeUrl(videoAsset.url);
					}
				}
				if (videoAsset.you_tube_url) {
					if (youtubeSvc.embeddableYoutubeUrl(videoAsset.you_tube_url)) {
						videoObject.youtube = [youtubeSvc.embeddableYoutubeUrl(videoAsset.you_tube_url)];
					}
				}
			}

			// Same for other types (we used to put the .mp4 in videoAsset.url and just swapped out the extension for other types, which was silly, which is why we stopped doing it, but some old episodes never got updated)
			if (!videoAsset.alternate_urls) {
				angular.forEach(["mp4", "webm", "m3u8"], function (ext) {
					if (videoObject[ext].length === 0 && !(videoAsset.url.match(/youtube/))) {
						videoObject[ext].push(videoAsset.url.replace("mp4", ext));
					}
				});
			}

			if (config.youtube.disabled) {
				delete videoObject.youtube;
			}

			// Only Safari supports m3u8 at the moment
			var isSafari = /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor);
			if (!isSafari) {
				delete videoObject.m3u8;
			}

			// Chrome won't allow the same video to play in two windows, which interferes with our 'escape the iframe' button.
			// Therefore we trick Chrome into thinking it is not the same video:
			var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
			if (isChrome) {
				var tDelimit;
				var tParam = "t=" + new Date().getTime();
				angular.forEach(["mp4", "webm"], function (ext) {
					if (videoObject[ext].length > 0) {
						for (var i = 0; i < videoObject[ext].length; i++) {
							tDelimit = videoObject[ext][i].match(/\?/) ? "&" : "?";
							videoObject[ext][i] = videoObject[ext][i] + tDelimit + tParam;
						}
					}
				});
			}

			videoAsset.urls = videoObject;

			// We need to know if the video has been transcoded or not in the template,
			// so let's centralize the logic for that here
			videoAsset.isTranscoded = function () {
				return svc.isTranscoded(this);
			};

			return videoAsset;
		};

		// TODO get rid of this; really wasteful to be checking this constantly, it's only useful
		//  right after a master asset upload  (put it in ittVideo pollInterval() instead)
		svc.isTranscoded = function (video) {
			if (video.urls && video.urls.youtube && video.urls.youtube.length) {
				return true;
			}
			if (video.alternate_urls) {
				return true;
			}
			return false;
		};

		if (config.debugInBrowser) {
			console.log("Event cache:", svc.events);
			console.log("Asset cache:", svc.assets);
			console.log("Container cache:", svc.containers);
			console.log("Episode cache:", svc.episodes);
			console.log("Narrative cache:", svc.narratives);
			console.log("Customer cache:", svc.customers);
		}
		return svc;

	}]);

'use strict';

/*
Son of cuePointScheduler, with a smattering of video controls.    

This needs a bit of a rewrite before it can safely handle more than one episode at a time:
stepEvent (and probably other things too) currently depends on video time matching timeline time;
we'll need to have a way to calculate one from the other (which will get especially complicated when 
we allow skipping scenes in SxS...)


keeps an sorted-by-time array of timed events.
	Events are (item/scene id) enter or exit, (timeline) pause or play

There are two separate loops here:
clock() just updates appState.time on a tight interval, purely for time display.
stepEvent() runs on a slower interval, watches the current video's reported current time,
            and handles any events since it was last called.  If one of them is
            a stop event, it will 'rewind' the timeline to that time (and stop handling events past it.)

appState.time is the current playhead position
timeMultiplier is the playback speed. No negative values or zero.


injectEvents(events, t) receives a list of timed events (i.e. an episode) to be injected into the timeline at a given point.
For now that point has to be zero. In future this will support injecting episodes inside of other episodes.

TODO: support sequential episodes
TODO: support injecting into the middle of an episode
TODO: have a way to delete a portion of the timeline (so sXs users can skip scenes)

*/

angular.module('com.inthetelling.story')
	.factory('timelineSvc', ["$window", "$timeout", "$interval", "$rootScope", "$filter", "config", "modelSvc", "appState", "analyticsSvc", function ($window, $timeout, $interval, $rootScope, $filter, config, modelSvc, appState, analyticsSvc) {

		var svc = {};

		svc.timelineEvents = []; // each entry consists of {t:n, id:eventID|timeline, action:enter|exit|pause|play}. Keep sorted by t.
		svc.markedEvents = []; // time, title of marked events (scenes, currently)

		var clock;
		var eventTimeout;
		var videoScope;

		var timeMultiplier;

		svc.registerVideo = function (newVideoScope) {
			// console.log("timelineSvc.registerVideo", newVideoScope);
			if (videoScope !== undefined) {
				// Route changes weren't always seeking to the correct time; this forces it on next $digest:
				$timeout(function () {
					svc.seek(appState.time);
				});
			}
			videoScope = newVideoScope;
		};

		svc.unregisterVideo = function () {
			videoScope = undefined;
		};

		svc.setSpeed = function (speed) {
			// console.log("timelineSvc.setSpeed", speed);
			timeMultiplier = speed;
			appState.timeMultiplier = timeMultiplier; // here, and only here, make this public. (an earlier version of this tweaked the private timeMultiplier variable if the video and timeline fell out of synch.  Fancy.  Too fancy.  Didn't work. Stopped doing it.)
			videoScope.setSpeed(speed);
			stepEvent();
		};

		svc.play = function (nocapture) {
			// console.log("timelineSvc.play", videoScope);
			// On first play, we need to check if we need to show help menu instead; if so, don't play the video:
			// (WARN this is a bit of a sloppy mixture of concerns.)

			if (!appState.duration || appState.duration < 0.1) {
				console.error("This episode has no duration");
				return;
			}

			if (!appState.hasBeenPlayed) {
				appState.hasBeenPlayed = true; // do this before the $emit, or else endless loop
				$rootScope.$emit("video.firstPlay");
				return; // playerController needs to catch this and either show the help pane or trigger play again 
			}

			if (appState.time > appState.duration - 0.1) {
				svc.seek(0.1); // fudge the time a bit to skip the landing scene
				svc.play();
			}

			// wait until the video is ready:
			if (videoScope === undefined) {
				var unwatch = $rootScope.$watch(function () {
					return videoScope !== undefined;
				}, function (itIsReady) {
					if (itIsReady) {
						unwatch();
						svc.play();
					}
				});
				return;
			}

			// console.log("timelineSvc.play (passed preflight)");
			appState.videoControlsActive = true;
			appState.show.navPanel = false;
			appState.timelineState = "buffering";

			// For episodes embedded within episodes:
			if ($window.parent !== $window) {
				$window.parent.postMessage('pauseEpisodePlayback', '*'); // negligible risk in using a global here
			}

			videoScope.play().then(function () {
				appState.timelineState = "playing";
				startTimelineClock();
				startEventClock();
				if (!nocapture) {
					analyticsSvc.captureEpisodeActivity("play");
				}
			});
		};

		if (!svc.enforceSingletonPauseListener) {
			$window.addEventListener('message', function (e) {
				if (e.data === 'pauseEpisodePlayback') {
					svc.pause();
				}
			}, false);
		}
		svc.enforceSingletonPauseListener = true; // this is probably unnecessary paranoia

		svc.pause = function (nocapture) {
			// console.log("timelineSvc.pause");
			appState.videoControlsActive = true;
			$interval.cancel(clock);
			stopEventClock();
			clock = undefined;
			lastTick = undefined;

			appState.timelineState = "paused";
			if (videoScope) {
				videoScope.pause();
			}
			// TODO we're not using timed pauses yet...
			// if (n) {
			// 	$timeout(svc.play, (n * 1000 * Math.abs(timeMultiplier)));
			// }

			if (!nocapture) {
				analyticsSvc.captureEpisodeActivity("pause");
			}
		};

		svc.stall = function () {
			console.warn("timelineSvc.stall");
			// called by videoController when video stalls.  Essentially similar to pause() but sets different states
			// (and doesn't tell the video to pause)
			$interval.cancel(clock);
			stopEventClock();
			clock = undefined;
			lastTick = undefined;
			svc.wasPlaying = (appState.timelineState === "playing");
			appState.timelineState = "buffering";
		};

		svc.unstall = function () {
			// videoController will call this when ready
			console.warn("timelineSvc.unstall");
			if (svc.wasPlaying) {
				appState.timelineState = "playing";
				svc.play();
			} else {
				appState.timelineState = "paused";
			}
			svc.wasPlaying = undefined;
		};

		svc.startAtSpecificTime = function (t) {
			if (!videoScope || appState.duration === 0) {
				// if duration = 0, we're trying to seek to a time from a url param before the events 
				// have loaded.  Just poll until events load, that's good enough for now.
				// TODO throw error and stop looping if this goes on too long
				$timeout(function () {
					svc.startAtSpecificTime(t);
				}, 300);
				return;
			}

			// Youtube on touchscreens can't auto-seek to the correct time, we have to wait for the user to init youtube manually.
			if (appState.isTouchDevice && appState.hasBeenPlayed === false && videoScope.videoType === 'youtube') {
				//TODO in future it might be possible to trick YT into starting at the correct time even 
				//return;
			}

			t = parseTime(t);
			if (t < 0) {
				t = 0;
			}
			if (t > appState.duration) {
				t = appState.duration;
			}

			appState.time = t;
			svc.updateEventStates();
			videoScope.startAtTime(t);

			analyticsSvc.captureEpisodeActivity("seek", {
				method: "URLParameter"
			});

		};

		// "method" and "eventID" are for analytics purposes
		svc.seek = function (t, method, eventID) {
			// console.log("timelineSvc.seek ", t, method, eventID);
			if (!videoScope || appState.duration === 0) {
				// if duration = 0, we're trying to seek to a time from a url param before the events 
				// have loaded.  Just poll until events load, that's good enough for now.
				// TODO throw error and stop looping if this goes on too long
				$timeout(function () {
					// console.log("waiting for video to be ready");
					svc.seek(t, method, eventID);
				}, 300);
				return;
			}

			var oldT = appState.time; // for analytics

			t = parseTime(t);
			if (t < 0) {
				t = 0;
			}
			if (t > appState.duration) {
				t = appState.duration;
			}

			// Lots of synch issues caused by seek during playback. Temporary workaround: pause, then seek, then play.
			var wasPlaying = (appState.timelineState === "playing");
			if (wasPlaying) {
				// console.log("pausing playback before seek");
				svc.pause(true);
			}

			stopEventClock();

			appState.time = t;
			// youtube depends on an accurate appState.timelineState here, so don't modify that by calling svc.stall() before the seek:
			videoScope.seek(t, true);

			svc.updateEventStates();
			// capture analytics data:
			if (method) {
				var captureData = {
					"method": method,
					"seekStart": oldT
				};
				if (eventID) {
					captureData.event_id = eventID;
				}
				// console.log("capture", captureData);
				analyticsSvc.captureEpisodeActivity("seek", captureData);
			} else {
				console.warn("timelineSvc.seek called without method.  Could be normal resynch, could be a bug");
			}

			// Restart playback after seek, unless they seeked (sought?) to a stop event
			if (wasPlaying) {
				var doRestart = true,
					allowedLag = 150;
				// make sure they didn't seek to a stop event:
				for (var i = 0; i < svc.timelineEvents.length; i++) {
					var evt = svc.timelineEvents[i];
					if (evt.t > (t - allowedLag) && evt.action === 'pause') {
						doRestart = false;
					}
					if (evt.t > t) {
						break;
					}
				}
				if (doRestart) {
					$timeout(function () {
						svc.play();
					}, allowedLag);
				}
			}
		};

		svc.prevScene = function () {
			for (var i = svc.markedEvents.length - 1; i >= 0; i--) {
				var now = appState.time;
				if (appState.timelineState === 'playing') {
					now = now - 3; // leave a bit of fudge when skipping backwards in a video that's currently playing
				}
				if (svc.markedEvents[i].start_time < now) {
					// console.log("Seeking to ", svc.markedEvents[i].start_time);
					//scope.enableAutoscroll(); // TODO in playerController
					svc.seek(svc.markedEvents[i].start_time, "prevScene");

					break;
				}
			}

		};

		svc.nextScene = function () {
			var found = false;
			for (var i = 0; i < svc.markedEvents.length; i++) {
				if (svc.markedEvents[i].start_time > appState.time) {
					// console.log("Seeking to ", svc.markedEvents[i].start_time);
					//scope.enableAutoscroll(); // TODO in playerController
					svc.seek(svc.markedEvents[i].start_time, "nextScene");
					found = true;
					break;
				}
			}
			if (!found) {
				svc.pause();
				svc.seek(appState.duration - 0.01, "nextScene");
				//scope.enableAutoscroll(); // in playerController
			}
		};

		// - - - - - - - - - - - - - - - - - - - - - - - - - -

		// WHY IS THIS AUDIO CHOCOLATE IN MY TIMELINE PEANUT BUTTER?
		// to make it easier to maintain state for these across multiple videos, when there are multiple videos.
		// Also because there isn't an obviously better place for it.  If this is dumb, TODO: be less dumb

		svc.toggleMute = function () {
			appState.muted = !appState.muted;
			videoScope.toggleMute();
		};
		svc.setVolume = function (vol) { // 0..100
			appState.volume = vol;
			videoScope.setVolume(vol);
		};

		// - - - - - - - - - - - - - - - - - - - - - - - - - -
		// Event clock

		/* 
		  If timeline is playing, 
			(TODO 1. find out how long since last checked, compare videotime delta to timeline delta, adjust timeline if necessary)
			2. check for timeline events since the last time stepEvent ran, handle them in order
			3. if any were stop events, 
				rewind the timeline and the video to that time (and stop handling events)
			otherwise
				set a timeout for a bit after the next event in the queue, up to some maximum amount of time, to run again
				(the 'up to some maximum' bit is for 1., so the timeline and video time don't fall out of synch)
		*/

		var eventClockData;

		var resetEventClock = function () {
			eventClockData = {
				lastTimelineTime: 0,
				lastVideoTime: 0
			};
		};
		resetEventClock();

		var startEventClock = function () {
			eventClockData.lastTimelineTime = appState.time;
			eventClockData.lastVideoTime = appState.time; // TODO this should be relative to episode, not timeline
			stepEvent();
		};

		var stopEventClock = function () {
			$timeout.cancel(eventTimeout);
			resetEventClock();
		};

		var stepEvent = function (ignoreStopEvents) {
			$timeout.cancel(eventTimeout);
			if (appState.timelineState !== 'playing') {
				return;
			}
			var vidTime = videoScope.currentTime();
			var ourTime = appState.time;

			// TODO check video time delta, adjust ourTime as needed (most likely case is that video stalled
			// and timeline has run ahead, so we'll be backtracking the timeline to match the video before we handle the events.)

			// find timeline events since last time stepEvent ran, handle them in order until one is a stop or a seek
			for (var i = 0; i < svc.timelineEvents.length; i++) {
				var evt = svc.timelineEvents[i];
				if (evt.t >= eventClockData.lastTimelineTime) {
					if (evt.t > ourTime) {
						break; // NOTE! next event should be this one; let i fall through as is
					}
					// Don't let stop events stop us before we even start.
					// (if the stop event and lastTimelineTime match, that stop event is what stopped us in the first place)
					if (evt.action === "pause" && (ignoreStopEvents || evt.t === eventClockData.lastTimelineTime)) {
						// console.log("Skipping pause event");
					} else {
						handleEvent(evt);
						if (evt.action === "pause") {
							// TODO: check for multiple simultaneous pause actions, skip to the last one
							i++;
							break; //NOTE! next event should be the one AFTER the stop event, so let i++ fall through
						}
					}
				}
			}
			var nextEvent = svc.timelineEvents[i]; // i falls through from the break statements above

			// console.log("Next event is  ", svc.timelineEvents[i]);

			eventClockData.lastVideoTime = vidTime;
			eventClockData.lastTimelineTime = ourTime;

			if (nextEvent && appState.timelineState === "playing") { // need to check timelineState in case there were stop events above
				// Find out how long until the next event, and aim for just a bit after it.
				var timeToNextEvent = (svc.timelineEvents[i].t - ourTime) * 1000 / timeMultiplier;
				// console.log("next event in ", timeToNextEvent);
				eventTimeout = $timeout(stepEvent, timeToNextEvent + 10);
			}
		};

		// "event" here refers to a timelineEvents event, not the modelSvc.event:
		var handleEvent = function (event) {
			//console.log("handle event: ", event);
			if (event.id === 'timeline') {
				//console.log("TIMELINE EVENT");
				if (event.action === 'pause') {
					appState.time = event.t;
					svc.pause(); // TODO handle pause with duration too
				} else {
					svc.play();
				}
			} else {
				if (event.action === "enter") {
					modelSvc.events[event.id].state = "isCurrent";
					modelSvc.events[event.id].isCurrent = true;
				} else if (event.action === "exit") {
					modelSvc.events[event.id].state = "isPast";
					modelSvc.events[event.id].isCurrent = false;
				} else if (event.action === "preload") {
					preloadImageAsset(modelSvc.events[event.id]);
				} else {
					console.warn("Unknown event action: ", event, event.action);
				}
			}
		};

		// This is ONLY used to update appState.time in "real" time.  Events are handled by stepEvent.
		var lastTick;
		var startTimelineClock = function () {
			lastTick = undefined;
			$interval.cancel(clock); // safety belt, in case we're out of synch
			clock = $interval(_tick, 20);
		};

		var _tick = function () {
			var thisTick = new Date();
			var delta = (isNaN(thisTick - lastTick)) ? 0 : (thisTick - lastTick);
			var newTime = parseFloat(appState.time) + (delta / 1000 * timeMultiplier);
			// check for out of bounds:
			if (newTime < 0) {
				newTime = 0;
				svc.pause();
			}

			// console.log(newTime, appState.time);
			if (newTime > appState.duration) {
				newTime = appState.duration;
				svc.pause();
			}
			appState.time = newTime;
			lastTick = thisTick;
		};

		svc.init = function (episodeId) {
			// console.log("timelineSvc.init", episodeId);
			svc.timelineEvents = [];
			svc.markedEvents = [];
			timeMultiplier = 1;
			appState.duration = 0;
			appState.timelineState = 'paused';

			svc.injectEvents(modelSvc.episodeEvents(episodeId), 0);
			$interval.cancel(clock);
			stopEventClock();
		};

		svc.injectEvents = function (events, injectionTime) {

			// console.log("timelineSvc.injectEvents: has ", svc.timelineEvents.length, " adding ", events.length);
			// events should be an array of items in modelSvc.events
			// for now this only supports adding events starting at injectionTime=0,
			// which does not shift existing events later in time.

			// in future will be able to inject episode events at injectionTime=whatever, shifting any later events
			// to their new time (based on the total duration of the injected group)
			// (which we'll need to get probably by passing in episode.duration along with the events?)

			if (events.length === 0) {
				return;
			}
			if (!injectionTime) {
				injectionTime = 0;
			}
			angular.forEach(events, function (event) {
				event.start_time = Number(event.start_time);
				event.end_time = Number(event.end_time);
				// add scenes to markedEvents[]:
				if (event._type === "Scene") {
					if (appState.product === 'producer') {
						// producer gets all scenes, even 'hidden' ones
						addMarkedEvent(event);
					} else {
						// sxs and player just get scenes with titles
						if (event.display_title) {
							addMarkedEvent(event);
						}
					}
				}
				if (event.start_time === 0 && !event._id.match('internal')) {
					event.start_time = 0.01;
					modelSvc.events[event._id].start_time = 0.01;
				}
				// add start and end to timelineEvents array
				if (event.stop) {
					addMarkedEvent(event); // give all stop items a timeline marker

					svc.timelineEvents.push({
						t: event.start_time + injectionTime,
						id: "timeline",
						eventId: event._id, //Need to store the event id in case this event needs to get removed from the timeline
						action: "pause"
					});
					svc.timelineEvents.push({
						t: event.start_time + injectionTime,
						id: event._id,
						action: "enter"
					});
					// For now, ignore end_time on stop events; they always end immediately after user hits play again.
					// TODO: In future we may allow durations on stop events so the video will start automatically after that elapses.
					svc.timelineEvents.push({
						t: (event.start_time + injectionTime + 0.01),
						id: event._id,
						action: "exit"
					});
				} else {
					// not a stop event.
					svc.timelineEvents.push({
						t: event.start_time + injectionTime,
						id: event._id,
						action: "enter"
					});
					if (event.end_time || event.end_time === 0) {
						svc.timelineEvents.push({
							t: event.end_time + injectionTime,
							id: event._id,
							action: "exit"
						});
					} else {
						// TODO: handle missing end times.  For transcript items, create an end time matching the start of the next transcript or the end of the scene or the duration (whichever comes first)
						// For other items, create an end time matching the next scene start or the duration, whichever comes first
						// For scenes, create an end time matching the start of the next scene or the duration, whichever comes first.
						// That's complex logic, may be better handled in a second pass.... or, duh,  during authoring
						console.warn("Missing end_time on event ", event);
					}
				}

				// allow preload of event assets:
				if (event.asset_id || event.annotation_image_id || event.link_image_id) {
					svc.timelineEvents.push({
						t: (event.start_time < 3) ? 0 : event.start_time - 3, // 3 seconds early
						id: event._id,
						action: "preload"
					});
				}

			});

			svc.sortTimeline();
		};

		var addMarkedEvent = function (newEvent) {
			// scan through existing markedEvents; if the new event is already there, replace it; otherwise add it
			var wasFound = false;
			for (var i = 0; i < svc.markedEvents.length; i++) {
				if (svc.markedEvents[i]._id === newEvent._id) {
					// replace existing event
					svc.markedEvents[i] = angular.copy(newEvent);
					wasFound = true;
				}
			}

			// wasn't found, so add it:
			if (!wasFound) {
				svc.markedEvents.push(newEvent);
			}
			//console.log(svc.markedEvents);
		};

		svc.removeEvent = function (removeId) {
			// delete anything corresponding to this id from the timeline:
			// console.log("timelineSvc.removeEvent");
			svc.timelineEvents = $filter('filter')(svc.timelineEvents, function (timelineEvent) {
				//Remove the timeline event if it's _id or eventId  equal the removeId
				if (timelineEvent.id === removeId || timelineEvent.eventId === removeId) {
					return false;
				}
				return true;
			});
			// and from the markedEvents, with its inexplicably inconsistent ID naming:
			svc.markedEvents = $filter('filter')(svc.markedEvents, {
				_id: '!' + removeId
			});

			svc.updateEventStates();
		};

		svc.updateEventTimes = function (event) {
			// remove old references, as in removeEvent, then re-add it with new times 
			// (not calling removeEvent here since it would do a redundant updateEventStates)
			svc.timelineEvents = $filter('filter')(svc.timelineEvents, function (timelineEvent) {
				//Remove the timeline event if it's _id or eventId  equal the removeId
				if (timelineEvent.id === event._id || timelineEvent.eventId === event._id) {
					return false;
				}
				return true;
			});
			svc.injectEvents([event], 0);
		};

		svc.updateSceneTimes = function (episodeId) {
			// HACK(ish): since editing a scene's timing has side effects on other scenes, need to updateEventTimes for each scene in the episode when one changes
			angular.forEach(modelSvc.episodes[episodeId].scenes, function (scene) {
				svc.updateEventTimes(scene);
			});
		};

		svc.sortTimeline = function () {

			// keep events sorted by time.
			// Simultaneous events should be sorted as exit, then enter, then stop.
			// (sort order of 'preload' events doesn't matter.)
			svc.timelineEvents = svc.timelineEvents.sort(function (a, b) {
				if (a.t === b.t) {
					if (a.action === b.action) {
						return 0;
					}
					// This is overly verbose, but I keep running into differences in 
					// how Safari and FF sort when I try to simplify it:
					if (a.action === 'enter') {
						if (b.action === 'pause') {
							return -1;
						}
						if (b.action === 'exit') {
							return 1;
						}
					}
					if (a.action === 'exit') {
						return -1;
					}
					if (a.action === 'pause') {
						return 1;
					}
					return 0;
				} else {
					return a.t - b.t;
				}
			});

			svc.markedEvents = svc.markedEvents.sort(function (a, b) {
				return a.start_time - b.start_time;
			});

			// for (var i = 0; i < svc.timelineEvents.length; i++) {
			// 	console.log(svc.timelineEvents[i].t, svc.timelineEvents[i].action);
			// }

			// Find the latest end_time in the timeline, set that as the duration.
			// TODO this will need to change when we support multiple episodes in one timeline

			if (svc.timelineEvents.length > 0) {
				appState.duration = svc.timelineEvents[svc.timelineEvents.length - 1].t;
			}
			svc.updateEventStates();
		};

		svc.updateEventStates = function () {
			// console.log("timelineSvc.updateEventStates", appState.time);
			// Sets past/present/future state of every event in the timeline.  
			// TODO performance check (though this isn't done often, only on seek and inject.)

			// DO NOT check event start and end times directly; they're relative to the episode, not the timeline!
			// instead preset everything to the future, then scan the timeline events up to now and set state based on enter/exit events per the timeline
			var now = appState.time;
			// put everything in the future state:
			angular.forEach(svc.timelineEvents, function (tE) {
				if (tE.id !== "timeline") {
					var event = modelSvc.events[tE.id];
					if (event) { // cancelling adding an event can leave "internal:editing" in the event list; TODO keep that from happening but for now just ignore it if it doesn't exist
						event.state = "isFuture";
						event.isCurrent = false;
					}
				}
			});

			// 2nd pass, step through all events before now:
			angular.forEach(svc.timelineEvents, function (tE) {
				if (tE.t <= now) {
					var event = modelSvc.events[tE.id];
					if (event) {
						if (tE.action === 'enter') {
							event.state = "isCurrent";
							event.isCurrent = true;
						} else if (tE.action === 'exit') {
							event.state = "isPast";
							event.isCurrent = false;
						}
					}
				}
			});
		};

		var alreadyPreloadedImages = {};
		var preloadImageAsset = function (event) {
			if (event.asset && event.asset._type === 'Asset::Image') {
				if (!alreadyPreloadedImages[event.asset.url]) {
					// console.log("Preloading ", event.asset.url);
					alreadyPreloadedImages[event.asset.url] = new Image();
					alreadyPreloadedImages[event.asset.url].src = event.asset.url;
				}
			}
		};

		// supports these formats: "1:10", 1m10s", "1m", "10s", or a plain number (in seconds)
		var parseTime = function (t) {
			if (!isNaN(parseFloat(t)) && isFinite(t)) {
				return t;
			}
			var parse = t.match(/^(\d+)[m:]([\d\.]+)s?$/);
			if (parse) {
				return (parseFloat(parse[1] * 60) + parseFloat(parse[2]));
			}
			parse = t.match(/^([\d\.]+)s$/);
			if (parse) {
				return parseFloat(parse[1]);
			}
			parse = t.match(/^([\d\.]+)m$/);
			if (parse) {
				return parseFloat(parse[1] * 60);
			}
			console.error("Tried to parse invalid time string: ", t);
		};

		if (config.debugInBrowser) {
			console.log("timelineSvc: ", svc);
		}

		return svc;
	}]);

'use strict';

/* 
There are two separate types of user activity to capture, which go to separate API endpoints.
Some types must contain additional info in a "data" object:

episode activity:
	episodeLoad					triggered immediately when episode is loaded
	episodeEnd					triggered when user reaches end of episode
	play								triggered when user hits play
	pause								triggered when user hits pause
	seek								triggered whenever user changes the playhead position.
												seekFrom:	timestamp of origin
												method:		"scrubTimeline", "sceneMenu", "nextScene", "prevScene", "clickedOnEvent".
												eventID:	include if method was "clickedOnEvent"
	modeChange					triggered when episode is loaded (since default isn't always the same), and on user changes of mode
												mode: "watch","discover","review"
	playbackRateChange	triggered when user changes the playback speed
												playbackRate: 1
	stall								triggered when video playback stalls unintentionally
	lowBandwidth				triggered when we switch to a lower-bandwidth video stream due to too many stall events
	search (TODO)				(search is incremental, so will have to think about how/when to capture this)

event activity: captures interaction with specific transmedia items ("events").
Different types of event can define their own interactions, but the core ones will be
	viewed							player reached the event's start_time by any method
	interacted					user clicked a transmedia link, for example
	completed						up to the transmedia item to define what constitutes "completion"
	question-answered		for quiz questions.  Data field should be {answer: 'answer text', correct: t/f}
*/

angular.module('com.inthetelling.story')
	.factory('analyticsSvc', ["$q", "$http", "$routeParams", "$interval", "config", "appState", function ($q, $http, $routeParams, $interval, config, appState) {
		// console.log('analyticsSvc factory');
		var svc = {};

		svc.activityQueue = []; // contains events not yet sent to the server.

		var flusher = $interval(function () {
			svc.flushActivityQueue();
		}, 10000);

		// don't try to capture when running from local data or if it's disabled in config:
		if ($routeParams.local || config.disableAnalytics) {
			// console.log("No analytics for local data; cancelling activity queue");
			$interval.cancel(flusher);
		}

		// for episode-related activity
		svc.captureEpisodeActivity = function (name, data) {
			if (config.disableAnalytics) {
				return;
			}
			if (
				(appState.user && appState.user._id) &&
				(!appState.user.track_episode_metrics)
			) {
				return;
			}
			var userActivity = {
				"name": name,
				"walltime": new Date(),
				"timestamp": appState.time, // TODO this is timeline time, we want episode time!
			};
			if (data) {
				userActivity.data = data;
			}

			svc.activityQueue.push(userActivity);
		};

		// for transmedia-related activity
		svc.captureEventActivity = function (name, eventID, data, force) {
			if (!force) {
				if (config.disableAnalytics || (appState.user._id && !appState.user.track_event_actions)) {
					return;
				}
			}
			if (data === undefined) {
				console.warn("captureEventActivity called with no data for event ", eventID);
			}
			// console.log(data);
			svc.activityQueue.push({
				"name": name,
				"event_id": eventID,
				"walltime": new Date(),
				"data": data
			});
		};

		svc.forceCaptureEventActivityWithPromise = function (name, eventID, data) {
			//we know this is syncronous
			svc.captureEventActivity(name, eventID, data, true);
			return svc.flushActivityQueue(); //this is async, and returns a promise.	
		};
		svc.captureEventActivityWithPromise = function (name, eventID, data) {
			//we know this is syncronous
			svc.captureEventActivity(name, eventID, data);
			return svc.flushActivityQueue(); //this is async, and returns a promise.	
		};

		// read from API:
		svc.readEpisodeActivity = function (epId) {
			// console.log("analyticsSvc readEpisodeActivity");
			var defer = $q.defer();
			$http({
					method: 'GET',
					url: config.apiDataBaseUrl + '/v2/episodes/' + epId + '/episode_user_metrics'
				})
				.success(function (respData) {
					// console.log("read episode activity SUCCESS", respData, respStatus, respHeaders);
					defer.resolve(respData);
				})
				.error(function () {
					// console.log("read episode activity ERROR", respData, respStatus, respHeaders);
					defer.reject();
				});
			return defer.promise;
		};

		// if activityType is omitted, returns all user data for that event id
		// if it's included, returns true if the user has at least once triggered that activityType, false if not
		svc.readEventActivity = function (eventId, activityType) {
			// console.log("analyticsSvc.readEventActivity", "eventId", "activityType");
			var defer = $q.defer();
			$http({
					method: 'GET',
					url: config.apiDataBaseUrl + '/v2/events/' + eventId + '/event_user_actions'
				})
				.success(function (respData) {
					// console.log("read event activity SUCCESS", respData, respStatus, respHeaders);
					if (activityType) {
						var matchedType = false;
						for (var i = 0; i < respData.length; i++) {
							var activity = respData[i];
							if (activity.name === activityType) {
								matchedType = true;
							}
						}
						defer.resolve(matchedType);
					} else {
						// no activityType specified so return everything:
						defer.resolve(respData);
					}
				})
				.error(function () {
					// console.log("read event activity ERROR", respData, respStatus, respHeaders);
					defer.reject();
				});
			return defer.promise;
		};

		svc.flushActivityQueue = function () {
			var defer = $q.defer();
			if (svc.activityQueue.length === 0) {
				defer.resolve("");
			}
			if (!appState.episodeId) {
				defer.resolve(); // iOS with ?t= param is trying to post metrics before it has an episode ID. TODO figure out wtf is causing that...
			}

			var actions = angular.copy(svc.activityQueue);
			svc.activityQueue = [];

			var now = new Date();
			var episodeUserMetrics = [];
			var eventUserActions = [];

			angular.forEach(actions, function (action) {
				action.age = (now - action.walltime) / 1000;
				delete action.walltime;
				if (action.event_id) {
					eventUserActions.push(action);
				} else {
					episodeUserMetrics.push(action);
				}
			});
			episodeUserMetrics = svc.dejitter(episodeUserMetrics);

			var posts = [];
			if (eventUserActions.length > 0) {
				posts.push($http.post(config.apiDataBaseUrl + '/v2/episodes/' + appState.episodeId + '/event_user_actions', {
					"event_user_actions": eventUserActions
				}));
			}
			if (episodeUserMetrics.length > 0) {
				posts.push($http.post(config.apiDataBaseUrl + '/v2/episodes/' + appState.episodeId + '/episode_user_metrics', {
					"episode_user_metrics": episodeUserMetrics
				}));
			}
			$q.all(posts).then(function () {
				defer.resolve();
			});

			return defer.promise;
		};

		svc.dejitter = function (events) {
			// Consolidate repeated seek events into one single seek event before sending to API.
			// TODO prevent this happening in the first place :)
			if (events.length === 0) {
				return [];
			}
			var ret = [];
			for (var i = 0; i < events.length - 1; i++) {
				// if this event and the next one are both seek events, and this event's timestamp matches
				// the next event's seekStart, skip this event and set the next event's seekStart to this one's.
				// otherwise just put it into the queue.
				var a = events[i];
				var b = events[i + 1];
				if (a.name === "seek" && b.name === "seek" &&
					(a.timestamp === b.data.seekStart)) {
					b.data.seekStart = a.data.seekStart;
				} else {
					ret.push(events[i]);
				}
			}
			ret.push(events[events.length - 1]);
			return ret;
		};

		return svc;
	}]);

'use strict';
angular.module('com.inthetelling.story')
	.factory('youtubeSvc', ["$q", "$http", "$timeout", "config", function ($q, $http, $timeout, config) {
		var svc = {};

		var getVideoMetaData = function (id) {
			var url = "https://www.googleapis.com/youtube/v3/videos?id=" + id + "&part=contentDetails,snippet&key=" + config.youtube.apikey;
			var defer = $q.defer();

			var timeoutPromise = $timeout(function () {
				defer.reject("Youtube API request timed out");
			}, config.youtube.timeout);

			$http({
					method: 'GET',
					url: url,
					transformRequest: function (data, headersGetter) {
						var headers = headersGetter();
						delete headers.Authorization; // youtube no likey
						return headers;
					}
				})
				.success(function (respData) {
					$timeout.cancel(timeoutPromise);
					defer.resolve(respData);
				})
				.error(function () {
					defer.reject();
				});
			return defer.promise;
		};

		svc.extractYoutubeId = function (origUrl) {
			if (!origUrl) {
				return false;
			}
			origUrl = origUrl.replace(/%3F/, '?');
			origUrl = origUrl.replace(/%26/, '&');
			var getYoutubeID = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})/i;
			var ytMatch = origUrl.match(getYoutubeID);
			return (ytMatch && ytMatch[1]) ? ytMatch[1] : false;
		};

		svc.isYoutubeUrl = function(origUrl) {
			if (!origUrl) {
				return false;
			}
			origUrl = origUrl.replace(/%3F/, '?');
			origUrl = origUrl.replace(/%26/, '&');
			var getYoutubeID = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})/i;
			return getYoutubeID.test(origUrl);
		};

		svc.embedParams = function (outgoing) {
			// kept separate from createEmbedLinkFromYoutubeId for convenience in unit tests.
			// TODO move these into videoController, as playerVar params, instead of embedding them in the url.  (Will need to init youtube as a div instead of as an iframe)
			// WARN dont remove the wmode param, it works around an IE z-index bug

			if (outgoing === false) {
				//supported params available at https://developers.google.com/youtube/player_parameters
				return "?controls=1&autoplay=1&modestbranding=1&showinfo=1&rel=0&iv_load_policy=3&wmode=transparent";
			}

			return "?enablejsapi=1&controls=0&modestbranding=1&showinfo=0&rel=0&iv_load_policy=3&wmode=transparent";
		};

		svc.createEmbedLinkFromYoutubeId = function (ytid, suppressParams) {
			if (!ytid) {
				return false;
			}
			return "//www.youtube.com/embed/" + ytid + (suppressParams ? "" : svc.embedParams(suppressParams));
		};

		svc.embeddableYoutubeUrl = function (origUrl, suppressParams) {
			if (!origUrl) {
				return false;
			}
			var ytid = svc.extractYoutubeId(origUrl);
			return svc.createEmbedLinkFromYoutubeId(ytid, suppressParams);
		};

		var parseRidiculousDurationFormat = function (input) {
			var duration = 0;
			if (input.match(/(\d*)D/)) {
				duration = duration + parseInt((input.match(/(\d*)D/)[1] * 86400), 10);
			}
			if (input.match(/(\d*)H/)) {
				duration = duration + parseInt((input.match(/(\d*)H/)[1] * 3600), 10);
			}
			if (input.match(/(\d*)M/)) {
				duration = duration + parseInt((input.match(/(\d*)M/)[1] * 60), 10);
			}
			if (input.match(/(\d*)S/)) {
				duration = duration + parseInt((input.match(/(\d*)S/)[1]), 10);
			}
			return duration;
		};

		svc.getVideoData = function (id) {
			var defer = $q.defer();
			getVideoMetaData(id)
				.then(
					function (respData) {
						if (respData.items[0]) {
							//shelter ourselves from youtube api changes, by adapting their return to an internal format
							var videoMetadata = {
								id: id,
								//thumbnail: "//img.youtube.com/vi/"+id+"/default.jpg",   (might be useful someday)
								title: respData.items[0].snippet.title,
								description: respData.items[0].snippet.description,
								duration: parseRidiculousDurationFormat(respData.items[0].contentDetails.duration)
							};
							defer.resolve(videoMetadata);
						} else {
							console.log("Bad response data from youtube getVideoData", respData);
							defer.reject("Bad response data from youtube getVideoData");
						}
					},
					function (reason) {
						console.log("Youtube getVideoData failed:" + reason);
						defer.reject(reason);
					}
				);
			return defer.promise;
		};

		return svc;
	}]);

/**
 * Created by githop on 12/1/15.
 */
(function(){
	"use strict";
	angular.module('com.inthetelling.story')
		.service('YoutubePlayerApi', YoutubePlayerApi);

	function YoutubePlayerApi($timeout, $q) {
		this.$q = $q;
		this.$timeout = $timeout;
		//this.timesRan = 0;
	}
	YoutubePlayerApi.$inject = ["$timeout", "$q"];

	YoutubePlayerApi.prototype.load = function() {
		this.dfd = this.$q.defer();
		//pass the promise where it can be resolved when onYoutubeIframeReady cb fires.
		this.onYouTubeIframeAPIReady(this.dfd);
		if (this.checkForScriptTag(this.dfd) === false) {
			var url = '//www.youtube.com/iframe_api';
			var tag = document.createElement('script');
			tag.src = url;
			tag.id  = 'yt-iframe-api';
			var firstScriptTag = document.getElementsByTagName('script')[0];
			firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
		}

		this.cancelIframe = this.$timeout(function(){
			//attempting to call reject after promise resolves results in a noop.
			this.dfd.reject('too long!');
		}.bind(this), 2000);

		return this.dfd.promise;
	};

	YoutubePlayerApi.prototype.onYouTubeIframeAPIReady = function(dfd) {
		window.onYouTubeIframeAPIReady = function() {
			dfd.resolve();
			this.$timeout.cancel(this.cancelIframe);
		}.bind(this);
	};

	//for testing purposes
	//YoutubePlayerApi.prototype.fails = function(times, dfd) {
	//	if (this.timesRan < times) {
	//		this.timesRan++;
	//		dfd.reject();
	//	}
	//};

	YoutubePlayerApi.prototype.checkForScriptTag = function(dfd) {
		var scriptTags = document.getElementsByTagName('script');
		var firstIframe = document.getElementById('yt-iframe-api');
		var found = false;
		var i = 0, len = scriptTags.length;
		for (i; i < len; i++) {
			if (scriptTags[i].getAttribute('id') === 'www-widgetapi-script') {
				found = true;
				dfd.resolve();
				break;
			}
		}

		if(firstIframe) {
			return;
		}

		return found;
	};
})();

/**
 * Created by githop on 12/3/15.
 */

(function () {
	'use strict';
	/**
	 * @ngdoc service
	 * @name iTT.service:youTubePlayerManager
	 * @description
	 * A service for working with youtube iframes
	 * {@link https://github.com/InTheTelling/client/blob/master/app/scripts/services/YouTubePlayerManager.svc.js source}
	 * @requires $q
	 * @requires $location
	 * @requires appState
	 * @requires timelineSvc
	 * @requires YoutubePlayerApi
	 * @requires errorSvc
	 */
	angular.module('com.inthetelling.story')
		.factory('youTubePlayerManager', youTubePlayerManager);

	function youTubePlayerManager($q, $location, appState, timelineSvc, YoutubePlayerApi, errorSvc) {

		var _youTubePlayerManager;
		var _players = {};
		var _mainPlayerId;

		_youTubePlayerManager = {
			create: create,
			destroy: destroy,
			play: play,
			playerState: playerState,
			pause: pause,
			pauseEmbeds: pauseEmbeds,
			stop: stop,
			reset: reset,
			pauseOtherEmbeds: pauseOtherEmbeds,
			setPlaybackQuality: setPlaybackQuality,
			setPlayerId: setPlayerId,
			getVideoLoadedFraction: getVideoLoadedFraction,
			seekTo: seekTo,
			getCurrentTime: getCurrentTime,
			isMuted: isMuted,
			mute: mute,
			unMute: unMute,
			setVolume: setVolume
		};

		//private methods

		function _createInstance(divId, videoID, stateChangeCB, qualityChangeCB, onReadyCB, onError) {

			var _controls = 1;
			if (divId === _mainPlayerId) {
				_controls = 0;
			}

			var host = $location.host();
			return YoutubePlayerApi.load().then(function() {
				return new YT.Player(divId, {
					videoId: videoID,
					//enablejsapi=1&controls=0&modestbranding=1&showinfo=0&rel=0&iv_load_policy=3&wmode=transparent
					playerVars: {
						'controls': _controls,
						'enablejsapi': 1,
						'modestbranding': 1,
						'showinfo': 0,
						'rel': 0,
						'iv_load_policy': 3,
						'origin': host,
						'wmode': 'transparent'
					},
					events: {
						onReady: onReadyCB,
						onStateChange: stateChangeCB,
						onPlaybackQualityChange: qualityChangeCB,
						onError: onError
					}
				});
			});
		}
		/**
		 * @private
		 * @ngdoc
		 * @name _getYTInstance
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to retrieve an instance of the YT player out of the _players object.
		 * @param {String} pid the ID of the instance to retrieve
		 * player that emitted it.
		 * @returns {Object} Youtube Player Instance Object.
		 */
		function _getYTInstance(pid) {
			if (_players[pid] && _players[pid].ready === true) {
				return _players[pid].yt;
			}
		}

		function _existy(x) {
			return x != null;  // jshint ignore:line
		}
		/**
		 * @private
		 * @ngdoc
		 * @name _getPidFromInstance
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to retrieve a PID from a YT Instance
		 * @params {Object} ytInstance
		 * @returns {String} PID of YT Instance
		 */
		function _getPidFromInstance(ytInstance) {
			var _key;
			//for some reason, angular.equals was not working in this context.
			//context: when embedding two identical youtube videos seemed to break
			angular.forEach(_players, function(p, key) {
				if (p.yt === ytInstance) {
					return _key = key; // jshint ignore:line
				}
			});

			return _key;
		}

		//public methods
		/**
		 * @ngdoc method
		 * @name #create
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to create an instance of the YT object which is necessary to
		 * interface with the youtube Iframe API
		 * @param {String} divId Unique ID of Div element to append iframe into
		 * @param {String} videoId The youtube Video ID
		 * @param {Function} [stateCb=noop] Optional control flow callback
		 * @param {Function} [qualityChangeCB=noop] Optional quality change callback
         * @param {Function} [onReadyCB=noop] Optional onReady callback
		 * @returns {Void} has no return value
         */
		function create(divId, playerId, videoId, stateCb, qualityChangeCB, onReadyCB) {
			_createInstance(divId, videoId, onPlayerStateChange, onPlayerQualityChange, onReady, onError)
				.then(handleSuccess)
				.catch(tryAgain);


			function handleSuccess(ytInstance) {
				_players[playerId].yt = ytInstance;
				_players[playerId].ready = false;

			}

			function tryAgain() {
				return _createInstance(divId, videoId, onPlayerStateChange, onPlayerQualityChange, onReady, onError)
					.then(handleSuccess)
					.catch(lastTry);
			}

			function lastTry(e) {
				var errorMsg = 'Network timeout initializing video player. Please try again.';
				errorSvc.error({data: errorMsg}, e);
			}

			//available 'states'
			//YT.PlayerState.ENDED
			//YT.PlayerState.PLAYING
			//YT.PlayerState.PAUSED
			//YT.PlayerState.BUFFERING
			//YT.PlayerState.CUED


			/**
			 * @private
			 * @ngdoc
			 * @name onPlayerStateChange
			 * @methodOf iTT.service:youTubePlayerManager
			 * @description
			 * Event handler responsible responsible for handling events emitted from a youtube player instance
			 * Responsible for interaction between our app and youtube iframes. Toggles playback
			 * between main and embedded videos
			 * @param {Object} event an object with target and data properties with metadata regarding the event and
			 * player that emitted it.
			 * @returns {Void} has no return value
             */
			function onPlayerStateChange(event) {
				//console.log("player state change!", event);
				var main = _mainPlayerId;
				var embed;
				var state = event.data;
				var pid = _getPidFromInstance(event.target);

				if (pid !== _mainPlayerId) {
					embed = pid;
				}
				var embedPlayerState = playerState(embed);
				var mainPlayerState = playerState(main);

				if (pid === main) {
					if (mainPlayerState === YT.PlayerState.PLAYING) {
						pauseEmbeds();
					}

					if (state === YT.PlayerState.ENDED) {
						console.log('thanks for watching!!!');
						//stop in the manager on the emitting player
						stop(pid);
					}
				}

				if (pid === embed) {
					if (appState.timelineState === 'playing') {
						timelineSvc.pause();
						pauseOtherEmbeds(embed);
					}

					if (embedPlayerState === YT.PlayerState.PLAYING) {
						pauseOtherEmbeds(embed);
					}
				}

				//html5 main video w youtube embed
				if (_players[embed] !== undefined &&
					_players[main] === undefined &&
					state !== YT.PlayerState.UNSTARTED) {
					if (appState.timelineState === 'playing' && appState.embedYTPlayerAvailable) {
						timelineSvc.pause();
					}
				}

				stateCb(event);

			}
			/**
			 * @private
			 * @ngdoc
			 * @name onReady
			 * @methodOf iTT.service:youTubePlayerManager
			 * @description
			 * Event Handler called when YT instance is ready
			 * @param {Object} event an object with target and data properties with metadata regarding the event and
			 * player that emitted it.
			 * @returns {Void} has no return value
			 */
			function onReady(event) {

				var pid = _getPidFromInstance(event.target);


				if (pid === _mainPlayerId) {
					appState.mainYTPlayerReady = true;
				}

				if (pid !== _mainPlayerId) {
					appState.embedYTPlayerReady = true;
					appState.embedYTPlayerAvailable = true;
				}

				_players[pid].ready = true;

				onReadyCB(event);
			}

			/**
			 * @private
			 * @ngdoc
			 * @name onPlayerQualityChange
			 * @methodOf iTT.service:youTubePlayerManager
			 * @description
			 * Event Handler called when changing playback quality
			 * @param {Object} event an object with target and data properties with metadata regarding the event and
			 * player that emitted it.
			 * @returns {Void} has no return value
			 */
			function onPlayerQualityChange(event) {
				var pid = _getPidFromInstance(event.target);
				if (event.data === 'medium' && /Safari/.test(navigator.userAgent) && /Apple Computer/.test(navigator.vendor)) {
					setPlaybackQuality(pid, 'large');
				}

				qualityChangeCB(event);

			}
			/**
			 * @private
			 * @ngdoc
			 * @name onError
			 * @methodOf iTT.service:youTubePlayerManager
			 * @description
			 * Error Handler for youtube iframe API errors
			 * @param {Object} event an object with target and data properties with metadata regarding the event and
			 * player that emitted it.
			 * @returns {Void} has no return value
			 */
			function onError(event) {
				var brokePlayerPID = _getPidFromInstance(event.target);
				if (event.data === 5) {
					//only reset for HTML5 player errors
					console.warn('resetting for chrome!!!');
					reset(brokePlayerPID);
				}
			}
		}
		/**
		 * @ngdoc method
		 * @name #getCurrentTime
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to get the current time of youtube video.
		 * @param {String} pid The ID of the YT instance
         * @returns {Number} The current time of video in seconds.
         */
		function getCurrentTime(pid) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				return p.getCurrentTime();
			}
		}
		/**
		 * @ngdoc method
		 * @name #playerState
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to get the playerState of a YT instance. Possible states:
		 * -1 = unstarted
		 * 0 = ended,
		 * 1 = playing,
		 * 2 = paused,
		 * 3 = buffering,
		 * 5 = video cued
		 * @param {String} pid The ID of the YT instance
		 * @returns {Number} Int representing current player state.
		 */
		function playerState(pid) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				return p.getPlayerState();
			}
		}
		/**
		 * @ngdoc method
		 * @name #play
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to resume playback
		 * @param {String} pid The ID of the YT instance
         * @returns {Void} no return value
         */
		function play(pid) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				return p.playVideo();
			}
		}
		/**
		 * @ngdoc method
		 * @name #pause
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to pause playback
		 * @param {String} pid The ID of the YT instance
		 * @returns {Void} no return value
		 */
		function pause(pid) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				return p.pauseVideo();
			}
		}
		/**
		 * @ngdoc method
		 * @name #stop
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Stops video playback and download of video stream
		 * @params pid The id of the player
		 * @returns {Void} no return value
		 */
		function stop(pid) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				return p.stopVideo();
			}
		}
		/**
		 * @ngdoc method
		 * @name #reset
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to reset the player after detecting
		 * onError event.
		 * @params pid The id of the player
		 * @returns {Void} no return value
		 */
		function reset(pid) {

			var obj = _players[pid];
			var instance = _players[pid].yt;

			if (_existy(instance)) {
				console.log('debug info', instance.getDebugText());
				var videoId = instance.getVideoData().video_id;
				var lastTime = instance.getCurrentTime();

				if (obj.isMainPlayer) {
					instance.cueVideoById(videoId, lastTime);
					timelineSvc.play();
				} else {
					instance.loadVideoById(videoId, lastTime);
				}
			}
		}
		/**
		 * @ngdoc method
		 * @name #setPlaybackQuality
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to pick a desired video quality
		 * @param {String} pid The ID of the YT instance
		 * @returns {Void} no return value
		 */
		function setPlaybackQuality(pid, size) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				p.setPlaybackQuality(size);
			}
		}
		/**
		 * @ngdoc method
		 * @name #getVideoLoadedFraction
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to determine the percent of buffered video
		 * @param {String} pid The ID of the YT instance
		 * @returns {Number} Numerical value representing
		 * percent of video that is currently buffered
		 */
		function getVideoLoadedFraction(pid) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				return p.getVideoLoadedFraction();
			}
		}
		/**
		 * @ngdoc method
		 * @name #seekTo
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to seek the video to a desired time in seconds
		 * @param {String} pid The ID of the YT instance
		 * @param {Number} t The desired time to seek to
		 * @param {Boolean} allowSeekAhead Determines whether the player will make a new request to
		 * the server if the t (seconds) parameter specifies a time outside of the currently
		 * buffered video data
		 * @returns {Void} no return value
		 */
		function seekTo(pid, t, allowSeekAhead) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				p.seekTo(t, allowSeekAhead);
			}
		}
		/**
		 * @ngdoc method
		 * @name #isMuted
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Getter to determine mute state
		 * @param {String} pid The ID of the YT instance
		 * @returns {Boolean} Bool representing mute state
		 */
		function isMuted(pid) {
			var p = _getYTInstance(pid);

			if (_existy(p)) {
				return p.isMuted();
			}
		}
		/**
		 * @ngdoc method
		 * @name #mute
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Sets isMuted to true
		 * @param {String} pid The ID of the YT instance
		 * @returns {Void} No return value.
		 */
		function mute(pid) {
			var p = _getYTInstance(pid);

			if (_existy(p)) {
				return p.mute();
			}
		}
		/**
		 * @ngdoc method
		 * @name #unMute
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Sets isMuted to false
		 * @param {String} pid The ID of the YT instance
		 * @returns {Void} No return value.
		 */
		function unMute(pid) {
			var p = _getYTInstance(pid);

			if (_existy(p)) {
				return p.unMute();
			}
		}
		/**
		 * @ngdoc method
		 * @name #setVolume
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Setter for volume level
		 * @param {String} pid The ID of the YT instance
		 * @param {Number} v Number between 1 and 100
		 * @returns {Void} No return value.
		 */
		function setVolume(pid, v) {
			var p = _getYTInstance(pid);

			if (_existy(p)) {
				p.setVolume(v);
			}
		}
		/**
		 * @ngdoc method
		 * @name #pauseEmbeds
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Loops through all YT instances except main player and calls
		 * pause() on each one.
		 * @returns {Void} No return value.
		 */
		function pauseEmbeds() {
			for (var p in _players) {
				if (p !== _mainPlayerId) {
					var curPlayerState = playerState(p);
					if (curPlayerState !== YT.PlayerState.UNSTARTED &&
						curPlayerState !== YT.PlayerState.PAUSED &&
						curPlayerState !== YT.PlayerState.CUED) {
						pause(p);
					}
				}
			}
		}
		/**
		 * @ngdoc method
		 * @name #pauseOtherEmbeds
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Loops through all YT instances except main player and
		 * player with same PID as the id param and calls
		 * pause() on each one. In other words, will pause all
		 * embeds except the one you interacted with.
		 * @param {String} pid The ID of the YT instance
		 * @returns {Void} No return value.
		 */
		function pauseOtherEmbeds(pid) {
			for (var p in _players) {
				if (p !== _mainPlayerId && p !== pid) {
					var curPlayerState = playerState(p);
					if (curPlayerState !== YT.PlayerState.UNSTARTED &&
						curPlayerState !== YT.PlayerState.PAUSED &&
						curPlayerState !== YT.PlayerState.CUED) {
						pause(p);
					}
				}
			}
		}
		/**
		 * @ngdoc method
		 * @name #destroy
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to destroy YT instances and clear them from the _players object
		 * @param {String} pid The ID of the YT instance
		 * @returns {Void} No return value.
		 */
		function destroy(pid) {
			var p = _getYTInstance(pid);
			if (_existy(p)) {
				p.destroy();
				delete _players[pid];
			}
		}
		/**
		 * @private
		 * @ngdoc
		 * @name _guid
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to generate an 8 digit 'unique' string in order to guarantee
		 * uniqueness for embedded YT instances div ID's
		 * @returns {string} 8 digit 'unique' identifier.
         */
		function _guid() {
			/* jshint ignore:start */
			var d = new Date().getTime();
			var uuid = 'xxxxxxxx'.replace(/[xy]/g, function (c) {
				var r = (d + Math.random() * 16) % 16 | 0;
				d = Math.floor(d / 16);
				return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);
			});
			return uuid;
			/* jshint ignore:end */
		}
		/**
		 * @ngdoc method
		 * @name #setPlayer
		 * @methodOf iTT.service:youTubePlayerManager
		 * @description
		 * Used to set the PID / divID for a YT instance, is called prior to create()
		 * @param {String} id Main Video Asset ID or Event ID (for embeds)
		 * @param {Boolean} mainPlayer Determines type of player, embed or main
		 * @returns {String} Div ID of YT instance.
		 */
		function setPlayerId(id, mainPlayer) {
			var dfd = $q.defer();
			var _id;
			if (mainPlayer) {
				// clear out players obj in the case that we are main player
				// do not want stale players staying around.
				_players = {};
				_id = id;
				_mainPlayerId = _id;
				_players[_id] = { isMainPlayer: true };
			} else {
				//the resolved _id is used for the ID of the actual player element
				//it needs to be unique
				//the _id passed to the YT constructor to set the divID (see _create() above,
				//setPlayer is always called prior to create() - see ittYoutubeEmbed )
				//YT will search the dom for the above _id and insert the iframe player.
				_id = _guid() + id;
				_players[id] = { isMainPlayer: false };

			}

			dfd.resolve(_id);
			return dfd.promise;
		}

		return _youTubePlayerManager;

	}
	youTubePlayerManager.$inject = ["$q", "$location", "appState", "timelineSvc", "YoutubePlayerApi", "errorSvc"];

})();

'use strict';
angular.module('com.inthetelling.story')
	.factory('questionAnswersSvc', ["$q", "analyticsSvc", "appState", function ($q, analyticsSvc, appState) {
		var svc = {};
		svc.saveAnswer = function (name, eventID, data) {
			return analyticsSvc.forceCaptureEventActivityWithPromise(name, eventID, data);
		};
		svc.getAnswers = function (eventId) {
			var defer = $q.defer();
			analyticsSvc.readEventActivity(eventId)
				.then(function (activityData) {
					var answers = activityData.filter(function (activity) {
						return (
							(activity.name === "question-answered" || activity.name === "question-answered-updated") &&
							 activity.episode_id === appState.episodeId
						);
					});
					defer.resolve(answers);
				});
			return defer.promise;
		};
		svc.getUserAnswer = function (eventId, userId) {
			var defer = $q.defer();
			svc.getAnswers(eventId)
				.then(function (data) {
					if (data) {
						var userAnswer = data.filter(function (item) {
							return item.user_id === userId;
						});
						if (userAnswer.length > 0) {
							defer.resolve(userAnswer[0]);
						} else {
							defer.reject();
						}
					} else {
						return defer.reject();
					}
				});
			return defer.promise;
		};

		svc.calculateCounts = function (events) {
			var grouped;
			angular.forEach(events, function (event) {
				grouped[event.data.index] ++;
			});
			return grouped;
		};
		svc.incrementAnswerCount = function (answerCounts, answerIndex) {
			answerCounts[answerIndex] = (answerCounts[answerIndex] || 0) + 1;
		};

		/* This never gets used (flot calculates percentages for us) and was I think incorrect anyway (the chart was displaying the percentage as the answer count)
				svc.calculatePercentages = function (grouped) {
					console.log("CalcPercentages", grouped);
					var totalAnswers = 0;
					for (var answerIndex in grouped) {
						if (grouped.hasOwnProperty(answerIndex)) {
							totalAnswers += grouped[answerIndex];
						}
					}
					var chartData = [];
					var x = 0;
					for (answerIndex in grouped) {
						if (grouped.hasOwnProperty(answerIndex)) {
							chartData.push({
								data: ((grouped[answerIndex] / totalAnswers) * 100),
								//						data: [
								//							[x, ((grouped[answertext] / totalAnswers) * 100)]
								//						],
								label: answerIndex
							});

						}
						x++;
					}
					console.log("returning ", chartData);
					return chartData;
				};
		*/

		return svc;
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.factory('recursionHelper', ["$compile", function ($compile) {
		return {
			// snarfed this from a SO answer.  Allows a directive to include itself without endless loops

			compile: function (element, link) {
				// Normalize the link parameter
				if (angular.isFunction(link)) {
					link = {
						post: link
					};
				}

				// Break the recursion loop by removing the contents
				var contents = element.contents().remove();
				var compiledContents;
				return {
					pre: (link && link.pre) ? link.pre : null,
					/**
					 * Compiles and re-adds the contents
					 */
					post: function (scope, element) {
						// Compile the contents
						if (!compiledContents) {
							compiledContents = $compile(contents);
						}
						// Re-add the compiled contents to the element
						compiledContents(scope, function (clone) {
							element.append(clone);
						});

						// Call the post-linking function, if any
						if (link && link.post) {
							link.post.apply(null, arguments);
						}
					}
				};
			}
		};
	}]);

'use strict';

// for quick debugging of templates.

// TODO: figure out how to get grunt to omit this from the build

angular.module('com.inthetelling.story')
	.factory('mockSvc', ["modelSvc", function (modelSvc) {
		var svc = {};
		svc.keepJsLintHappy = function () {
			var noop = modelSvc.episodes.noop;
			noop = undefined;
		};
		svc.mockEpisode = function (epId) {
			// FOR DEV TESTING

			modelSvc.cache("episode", {
				"_id": epId,
				"created_at": "2014-04-10T02:02:15Z",
				"description": {
					en: "The Business Case for Sustainability"
				},
				"master_asset_id": "masterasset",
				"title": {
					en: "Test Episode"
				},
				"languages": [{
					code: 'en',
					default: true
				}],

				"status": "Published",
				"templateUrl": "templates/episode/gwsb.html",
				"styles": [
					"", "", ""
				]
			});
			modelSvc.cache("asset", {
				"_id": "masterasset",
				"_type": "Asset::Video",
				"alternate_urls": [
					"https://www.youtube.com/watch?v=dTAAsCNK7RA&list=RDHCffYp01sXKH8",
					"https://s3.amazonaws.com/itt.uploads/development/Test%20Customer/SLIC/The%20Business%20Case/Sustainability%20Pays%20sXs/9aPKP5AJNJdH-UEQ2EB9jg.m3u8",
					"https://s3.amazonaws.com/itt.uploads/development/Test%20Customer/SLIC/The%20Business%20Case/Sustainability%20Pays%20sXs/9aPKP5AJNJdH-UEQ2EB9jg_416x234.webm",
					"https://s3.amazonaws.com/itt.uploads/development/Test%20Customer/SLIC/The%20Business%20Case/Sustainability%20Pays%20sXs/9aPKP5AJNJdH-UEQ2EB9jg_960x540.webm",
					"https://s3.amazonaws.com/itt.uploads/development/Test%20Customer/SLIC/The%20Business%20Case/Sustainability%20Pays%20sXs/9aPKP5AJNJdH-UEQ2EB9jg_416x234.mp4",
					"https://s3.amazonaws.com/itt.uploads/development/Test%20Customer/SLIC/The%20Business%20Case/Sustainability%20Pays%20sXs/9aPKP5AJNJdH-UEQ2EB9jg_960x540.mp4"
				],
				"attachment": "Sustainability_Pays_for_Demo_1.mp4",
				"base_path": "development/Test Customer/SLIC/The Business Case/Sustainability Pays sXs",
				"content_type": "video/mp4",
				"duration": "443.199313",
				"extension": "mp4",
				"file_size": 338886327,
				"filename": "Sustainability_Pays_for_Demo_1.mp4",
				"frame_rate": "10000000/417083",
				"frame_rate_d": 417083,
				"frame_rate_n": 10000000,
				"height": 720,
				"name": "Sustainability Pays for Demo 1",
				"original_filename": "Sustainability_Pays_for_Demo_1.mp4",
				"start_time": "0.000000",
				"status": "complete",
				"url": "https://s3.amazonaws.com/itt.uploads/development/Test%20Customer/SLIC/The%20Business%20Case/Sustainability%20Pays%20sXs/Sustainability_Pays_for_Demo_1.mp4",
				"width": 1280
			});

			var sceneStub = {
				"_id": "-",
				"_type": "Scene",
				"description": {
					en: "Scene <b>description</b> Description"
				},
				"keywords": [],
				"start_time": 0,
				"end_time": 200,
				"type": "Scene",
				"episode_id": epId,
				"cur_episode_id": epId,
				//"templateUrl": "templates/scene/centered.html",
				"layouts": ["", ""],
				"styles": ["transitionSlideL"]
			};

			var scenetemplateurls = [
				"templates/scene/cornerH.html",
				"templates/scene/cornerV.html",
				"templates/scene/2colL.html",
				"templates/scene/2colR.html",
				"templates/scene/centered.html",
				"templates/scene/1col.html"
			];

			for (var i = 0; i < 10; i++) {
				var scene = angular.copy(sceneStub);
				scene._id = "scene-" + i;
				scene.title = (i / 2 === Math.floor(i / 2)) ? {
					en: "Scene " + (i + 1) + " Title"
				} : {
					en: ""
				};
				scene.start_time = (i * 20);
				scene.end_time = (i * 20 + 20);
				scene.templateUrl = scenetemplateurls[i % scenetemplateurls.length];
				modelSvc.cache("event", scene);
			}

			var annotationStub = {
				"_id": "",
				"_type": "Annotation",
				"annotation": {
					en: "Transcript text: <b>html</b> included!"
				},
				"annotation_image_id": "asset3",
				"annotator": {
					en: "Speaker Name"
				},
				"cosmetic": false,
				"episode_id": epId,
				"cur_episode_id": epId,
				"required": false,
				"stop": false,
				"type": "Annotation",
				"templateUrl": "templates/item/transcript-withthumbnail.html",
				"styles": ["colorInvert"]
			};

			var testLayouts = [
				"sidebarL",
				"sidebarR", "inline"
			];

			var annotationTemplates = [
				"templates/item/text-h1.html",
				"templates/item/pullquote.html",
				"templates/item/text-h2.html"
			];

			for (i = 0; i < 30; i++) {
				var transcript = angular.copy(annotationStub);
				transcript._id = "transcript-" + i;
				transcript.annotation = {
					en: "Transcript block number " + (i + 1)
				};
				transcript.start_time = (i * 5);
				transcript.end_time = (i * 5 + 5);
				transcript.layouts = [testLayouts[i % testLayouts.length]];
				//				modelSvc.cache("event", transcript);
			}
			for (i = 0; i < 10; i++) {
				var annotation = angular.copy(annotationStub);
				annotation._id = "annotation-" + i;
				annotation.start_time = i * 6;
				annotation.end_time = i * 6 + 3;
				annotation.templateUrl = annotationTemplates[i % annotationTemplates.length];
				modelSvc.cache("event", annotation);
			}

			for (i = 0; i < 10; i++) {
				var longtext = angular.copy(annotationStub);
				longtext._id = "longtext-" + i;
				longtext.start_time = i * 7;
				longtext.end_time = i * 7 + 7;
				longtext.styles = ["timestampNone"];
				longtext.annotation = {
					en: "A way a long a last a loved along the riverrun, past Eve and Adam's, from swerve of shore to bend of bay, brings us by a commodius vicus of recirculation back to Howth Castle and Environs. Sir Tristram, <i>violer d'amores</i>, fr'over the short sea, had passencore rearrived from North Armorica on this side the scraggy isthmus of Europe Minor to wielderfight his penisolate war"
				};
				longtext.templateUrl = "templates/item/text-transmedia.html";

				modelSvc.cache("event", longtext);
			}

			modelSvc.cache("asset", {
				"_id": "asset1",
				"_type": "Asset::Image",
				"url": "https://s3.amazonaws.com/itt.uploads/development/Test%20Customer/SLIC/The%20Business%20Case/Sustainability%20Pays/Sustainability_Scorecard_1.jpg",
				"extension": "jpg",
				"name": "Sustainability Scorecard 1",
			});
			modelSvc.cache("asset", {
				"_id": "asset2",
				"_type": "Asset::Image",
				"url": "http://placehold.it/350x350",
				"extension": "jpg",
				"name": "350x350 placeholder",
			});
			modelSvc.cache("asset", {
				"_id": "asset3",
				"_type": "Asset::Image",
				"url": "http://placehold.it/64x64",
				"extension": "jpg",
				"name": "64x64 placeholder",
			});
			modelSvc.cache("asset", {
				"_id": "asset4",
				"_type": "Asset::Image",
				"url": "http://placehold.it/900x900",
				"extension": "jpg",
				"name": "900x900 placeholder",
			});

			var linkStub = {
				"_id": "",
				"_type": "Link",
				"link_image_id": "asset1",
				"url": "https://luminarydigitalmedia.com",
				"title": {
					en: "Link Title"
				},
				"description": {
					en: "Link Description <i>lorem</i> ipsum dolor frog a frog oh lord it's amet lorem ipsum buddy lorem ipsum dolor frog a frog oh lord it's amet lorem ipsum buddy lorem ipsum dolor frog a frog oh lord it's amet lorem ipsum buddy"
				},
				"cosmetic": false,
				"stop": false,
				"type": "Link",
				"episode_id": epId,
				"cur_episode_id": epId,
				"templateUrl": "templates/item/link-withimage.html",
				"layouts": ["inline"],
				"styles": ["timestampNone"],
				"isContent": true,
			};

			for (i = 0; i < 30; i++) {
				var link = angular.copy(linkStub);
				link._id = "link-" + i;
				link.required = (Math.random() > 0.5);
				link.start_time = i * 3;
				link.end_time = i * 3 + 3;

				link.layouts = [testLayouts[i % testLayouts.length]];

				// if (Math.random() > 0.1) {
				// 	link.title = {en: "NO EMBED link"};
				// 	link.templateUrl = "templates/transmedia-link-noembed.html";
				// } else if (Math.random() < 0.1) {
				// 	link.title = {en: "FRAMEICIDE link"};
				// 	link.templateUrl = "templates/transmedia-link-frameicide.html";
				// }
				modelSvc.cache("event", link);
			}

			var questionFormativeStub = {
				"_id": "",
				"_type": "Plugin",

				"producerItemType": "question",
				"episode_id": epId,
				"cur_episode_id": epId,
				"templateUrl": "templates/item/question-mc.html",
				"style_id": [],
				"layout_id": [],
				"title": {},
				"data": {
					"_id": "",
					"_pluginType": "question",
					"_version": 2,
					"_plugin": {
						"questiontext": "Some question text?",
						"questiontype": "mc-formative",
						"distractors": [{
							"text": "a",
							"index": 1,
						}, {
							"text": "b",
							"index": 2
						}, {
							"text": "c",
							"correct": true,
							"index": 3,
						}, {
							"text": "",
							"index": 4
						}],
						"correctfeedback": "Great!",
						"incorrectfeedback": "Doh!",
						"_type": "question"
					}
				}
			};

			for (i = 0; i < 10; i++) {
				var question = angular.copy(questionFormativeStub);
				question._id = "question-" + i;
				question.required = (Math.random() > 0.5);
				question.start_time = i * 5;
				question.end_time = i * 5 + 5;

				question.layouts = [testLayouts[i % testLayouts.length]];
				modelSvc.cache("event", question);
			}

			var questionPollStub = {
				"_id": "",
				"_type": "Plugin",
				"type": "Plugin",
				"producerItemType": "question",
				"episode_id": epId,
				"cur_episode_id": epId,
				"templateUrl": "templates/item/question-mc.html",
				"style_id": [],
				"layout_id": [],
				"data": {
					"_id": "",
					"_pluginType": "question",
					"_version": 2,
					"_plugin": {
						"questiontext": "Some question text?",
						"questiontype": "mc-poll",
						"distractors": [{
							"text": "a",
							"index": 1,
						}, {
							"text": "b",
							"index": 2
						}, {
							"text": "c",
							"index": 3,
						}, {
							"text": "",
							"index": 4
						}],
						"_type": "question"
					}
				}
			};

			for (i = 0; i < 10; i++) {
				var questionTemp = angular.copy(questionPollStub);
				questionTemp._id = "question-" + i;
				questionTemp.required = (Math.random() > 0.5);
				questionTemp.start_time = i * 6;
				questionTemp.end_time = i * 6 + 6;

				questionTemp.layouts = [testLayouts[i % testLayouts.length]];
				modelSvc.cache("event", questionTemp);
			}

			var uploadStub = {
				"_type": "Upload",

				"description": {
					en: "Description of an upload item"
				},
				"required": false,
				"cosmetic": true,
				"stop": false,
				"type": "Upload",
				"episode_id": epId,
				"cur_episode_id": epId,
				"templateUrl": "templates/item/image-caption.html",
				"styles": [
					"transitionFade", "tl"
				],
				"layouts": [
					"inline"
				]
			};
			for (i = 0; i < 30; i++) {
				var upload = angular.copy(uploadStub);
				upload._id = "upload-" + i;
				upload.asset_id = "asset2"; // + (i % 3 + 2);
				upload.title = {
					en: "Upload number " + (i % 3 + 1)
				};
				upload.start_time = i * 4;
				upload.end_time = i * 4 + 4;
				upload.layouts = [testLayouts[i % testLayouts.length]];

				modelSvc.cache("event", upload);
			}

			var layouts = ["mainFg", "altFg", "videoOverlay"];
			for (i = 0; i < 8; i++) {
				var filltest = angular.copy(uploadStub);
				filltest.layouts = [layouts[i % layouts.length]];
				filltest._id = "filltest-" + i;
				filltest.asset_id = "asset2";
				filltest.start_time = i * 2;
				filltest.end_time = i * 2 + 2;
				filltest.templateUrl = "templates/item/image-fill.html";
				filltest.styles.push("cover");
				modelSvc.cache("event", filltest);

			}

			modelSvc.resolveEpisodeEvents(epId);
			modelSvc.resolveEpisodeAssets(epId);

		};
		return svc;
	}]);

/**
 *
 * Created by githop on 3/23/16.
 */
(function() {
	'use strict';

	/**
	 * @ngdoc service
	 * @name iTT.service:imageResize
	 * @requires $q
	 * @description
	 * Resize images and convert File Objects into images. Used in practice to resize images client side prior
	 * to uploading to AWS. Basic Idea is to resize images client side with HTML5 Canvas. The resized image
	 * is converted back into a File object so it can be passed to the AWS service.
	 * {@link https://github.com/InTheTelling/client/blob/master/app/scripts/services/imageResize.js source}
	 */
	angular.module('com.inthetelling.story')
		.factory('imageResize', imageResize);

	function imageResize($q) {
		return {
			createFileFromDataURL: createFileFromDataURL,
			readFileToImg: readFileToImg,
			resizeImg: resizeImg
		};
		/**
		 * @ngdoc method
		 * @name #createFileFromDataURL
		 * @methodOf iTT.service:imageResize
		 * @description
		 * Creates a File object from a data url.
		 * @param {String} url base64 encoded string as url
		 * @param {String} fileName name of file
		 * @returns {Object} File object containing an image.
		 * @example
		 * <pre>
		 *     var file = imageResize.createFileFromDataURL(dataUrl);
		 * </pre>
		 */
		function createFileFromDataURL(url, fileName) {
			var _blob = _dataURLToBlob(url);
			_blob.name = 'resized' + fileName;
			_blob.lastModifiedDate = new Date();
			return _blob;
		}
		/**
		 * @ngdoc method
		 * @name #readFileToImg
		 * @methodOf iTT.service:imageResize
		 * @description
		 * Creates an Image from a File Object
		 * @param {Object} file File Object
		 * @returns {Object} Promise that resolves to an Image
		 * @example
		 * <pre>
		 *     imageResize.readFileToImg(file).then(function(file) {
		 *     		//do stuff with file
		 *     }));
		 * </pre>
		 */
		function readFileToImg(file) {
			var _reader = new FileReader();
			var _img = new Image();
			return $q(function(resolve, reject) {
				_reader.onloadend = function() {
					console.log('onloadend fileReader!!');
					resolve(_reader.result);
				};
				_reader.onerror = function() {
					console.log('FIleReader Err', _reader.error);
					reject(_reader.error);
				};
				_reader.readAsDataURL(file);
			}).then(function(imgUrl) {
				_img.src = imgUrl;
				console.log('image preload', _img);
				return $q(function(resolve, reject) {
					_img.onload = function() {
						resolve(_img);
					};
					_img.onerror = function() {
						reject('Error Loading Image');
					};
				}).then(function(img) {
					return img;
				});
			});
		}
		/**
		 * @ngdoc method
		 * @name #resizeImg
		 * @methodOf iTT.service:imageResize
		 * @description
		 * Resize image by reducing width/height by factor of 2
		 * @param {Object} img Image to resize.
		 * @param {Number} maxWidth target with of image resize.
		 * @param {Number} maxHeight target height of image resize.
		 * @param {Boolean} center Toggle image centering
		 * @returns {String} Promise that resolves to a data url.
		 * @example
		 * <pre>
		 *     imageResize.resizeImg(img, 60, 60, true)
		 *     .then(function(resizedImg) {
		 *     //do stuff with resizedImg
		 *     });
		 * </pre>
		 */
		function resizeImg(img, maxWidth, maxHeight, center) {
			return $q(function(resolve) {
				var _canvas = document.createElement('canvas');
				var _ctx = _getContext(_canvas);
				var _dx = 0, _dy = 0;

				var _tmpCvsWidth  = img.width,
					_tmpCvsHeight = img.height;

				_setCanvasWH(_canvas, _tmpCvsWidth, _tmpCvsHeight);

				_ctx.drawImage(img, 0, 0, _tmpCvsWidth, _tmpCvsHeight);

				//step down the image size by half for a smoother overall resize.
				//break here because we want our final resize out of the loop
				//to still be a down step.
				while ((_tmpCvsWidth > maxWidth || _tmpCvsHeight > maxHeight) &&
				!((_tmpCvsWidth * 0.5) < maxWidth || (_tmpCvsHeight * 0.5) < maxHeight)) {
					img.width  = img.width  * 0.5;
					img.height = img.height * 0.5;
					_tmpCvsWidth  = img.width;
					_tmpCvsHeight = img.height;
					_canvas = _resizeImgWithCanvas(_canvas, _tmpCvsWidth, _tmpCvsHeight);
				}

				var _finalWH = _calculateNewDimensions(_canvas.width, _canvas.height, maxWidth, maxHeight);

				//handle centering of non-square resized images
				if (center) {
					//image is taller than it is wide
					//center it vertically
					if (_finalWH.height < maxHeight) {
						_dy = (maxHeight - _finalWH.height) / 2;
					}

					//image is wider than it is tall
					//center it horizontally
					if(_finalWH.width < maxWidth) {
						_dx = (maxWidth- _finalWH.width) / 2;
					}
				}

				//console.log('final draw params: ', 'cvs', _canvas, 'finalWH', _finalWH, 'dx dy', _dx, _dy);
				_canvas = _resizeImgWithCanvas(_canvas, _finalWH.width, _finalWH.height, maxWidth, maxHeight, _dx, _dy);
				resolve(_canvas.toDataURL('image/png', 1.0));
			});
		}
		/**
		 * @private
		 * @ngdoc
		 * @methodOf iTT.service:imageResize
		 * @name _setCanvasWH
		 * @description
		 * sets the width and height on a given canvas.
		 * @param {Object} canvas HTML5 Canvas Element
		 * @param {Number} width Width to set.
		 * @param {Number} height Height to set.
		 * @returns {Void} returns undefined.
		 */
		function _setCanvasWH(canvas, width, height) {
			canvas.width = width;
			canvas.height = height;
		}
		/**
		 * @private
		 * @ngdoc
		 * @methodOf iTT.service:imageResize
		 * @name _resizeImgWithCanvas
		 * @description
		 * Resize an image rendered in an HTML5 canvas element to given dimensions
		 * @param {Object} c HTML5 Canvas Element
		 * @param {Number} w Target width to resize image to.
		 * @param {Number} h Target height to resize image to.
		 * @param {Number} [cW=w] Optional param, Target width of canvas, defaults to image width.
		 * @param {Number} [cH=h] Optional param, Target height of canvas, defaults to image height.
		 * @param {Number} [dx=0] Optional param, Amount to horizontally offset the image inside the canvas element, defaults to 0.
		 * @param {Number} [dy=0] Optional param, Amount to vertically offset the image inside the canvas element, defaults to 0.
		 * @returns {Object} HTML5 canvas element.
		 */
		function _resizeImgWithCanvas(c, w, h, cW, cH, dx, dy) {
			if (dy === undefined) {
				dy = 0;
			}
			if (dx === undefined) {
				dx = 0;
			}
			//console.log('drawImage inputs: ', 'c', c, 'dx', dx, 'dy', dy, 'w', w, 'h', h);
			var _resizeCvs = document.createElement('canvas');
			var _resizeCtx = _getContext(_resizeCvs);
			_resizeCvs.width = cW !== undefined ? cW : w;
			_resizeCvs.height = cH !== undefined ? cH : h;
			_resizeCtx.drawImage(c, dx, dy, w, h);

			return _resizeCvs;
		}
		/**
		 * @private
		 * @ngdoc
		 * @methodOf iTT.service:imageResize
		 * @name _getContext
		 * @description
		 * Method to get the Context from an HTML5 canvas element and set anti-aliasing properties
		 * @param {Object} canvas HTML5 Canvas Element
		 * @returns {Object} HTML5 Canvas Context object.
		 */
		function _getContext (canvas) {
			var context = canvas.getContext('2d');
			context.imageSmoothingEnabled       = true;
			context.mozImageSmoothingEnabled    = true;
			context.oImageSmoothingEnabled      = true;
			context.webkitImageSmoothingEnabled = true;
			return context;
		}
		/**
		 * @private
		 * @ngdoc
		 * @methodOf iTT.service:imageResize
		 * @name _dataURLToBlob
		 * @description
		 * Converts data url to Blob object which can be used as data for a File object
		 * Taken from https://github.com/ebidel/filer.js/blob/master/src/filer.js#L137
		 * @param {String} dataURL base64 encoded string containing image
		 * @returns {Object} Blob Object
		 */
		function _dataURLToBlob(dataURL) {
			var BASE64_MARKER = ';base64,';
			if (dataURL.indexOf(BASE64_MARKER) == -1) {  //jshint ignore:line
				var parts = dataURL.split(',');
				var contentType = parts[0].split(':')[1];
				var raw = decodeURIComponent(parts[1]);

				return new Blob([raw], {type: contentType});
			}

			var parts = dataURL.split(BASE64_MARKER); //jshint ignore:line
			var contentType = parts[0].split(':')[1]; //jshint ignore:line
			var raw = window.atob(parts[1]); //jshint ignore:line
			var rawLength = raw.length;

			var uInt8Array = new Uint8Array(rawLength);

			for (var i = 0; i < rawLength; ++i) {
				uInt8Array[i] = raw.charCodeAt(i);
			}

			return new Blob([uInt8Array], {type: contentType});
		}
		/**
		 * @private
		 * @ngdoc method
		 * @methodOf iTT.service:imageResize
		 * @name _calculateNewDimensions
		 * @description
		 * Calculates the dimensions of a rectangle (for an image) while maintaining the original aspect ratio.
		 * @param {Number} srcWidth Input width of rectangle.
		 * @param {Number} srcHeight Input height of rectangle.
		 * @param {Number} maxWidth Target width of rectangle.
		 * @param {Number} maxHeight Target height of rectangle.
		 * @returns {Object} Object with width and height properties as integers.
		 */
		function _calculateNewDimensions(srcWidth, srcHeight, maxWidth, maxHeight) {
			var _ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);

			return { width: Math.floor(srcWidth * _ratio), height: Math.floor(srcHeight * _ratio) };
		}
	}
	imageResize.$inject = ["$q"];


})();

/**
 * Created by githop on 4/22/16.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.service('ittUtils', IttUtils);

	function IttUtils() { }

	IttUtils.prototype = {
		getSubdomain: getSubdomain,
		existy: existy,
		truthy: truthy,
		generateUUID: generateUUID,
		isValidURL: isValidURL,
		stripHtmlTags: stripHtmlTags,
		pick: pick,
		bitwiseCeil: bitwiseCeil
	};

	//using bitwise operators up to 20% faster than Math.ceil (js hint not a fan of bitwise operators)
	function bitwiseCeil(n) {
		return n + (n < 0 ? 0 : 1) >> 0; // jshint ignore:line
	}

	function pick(obj, arr) {
		return arr.reduce(function(accm, field) {
			if (existy(obj[field])) {
				accm[field] =  angular.copy(obj[field]);
			}
			return accm;
		}, {});
	}

	function stripHtmlTags(str) {
		return String(str).replace(/<\/?[^>]*>/gm, '');
	}

	function getSubdomain(host) {
		if (host.indexOf('.') < 0) {
			return null;
		} else {
			return host.split('.')[0];
		}
	}

	function existy(x) {
		return x != null; //jshint ignore:line
	}

	/*
	 e.g. [null, undefined, '', 0, 1, false true].map(truthy)
	 -> [false, false, false, false, true, false, true]
	 */
	function truthy (x) {
		return (x != false) && existy(x); //jshint ignore:line
	}

	function generateUUID() {
		//js hint does not like the bitwise operators in use below.
		/* jshint ignore:start */
		var d = new Date().getTime();
		var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
			var r = (d + Math.random() * 16) % 16 | 0;
			d = Math.floor(d / 16);
			return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);
		});
		return uuid;
		/* jshint ignore:end */
	}

	function isValidURL(url) {
		var URL_REGEXP = /^(((?:http)s?:\/\/)|(?:\/\/))(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+(?:[A-Z]{2,6}\.?|[A-Z0-9-]{2,}\.?)|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})(?::\d+)?(?:\/?|[\/?]\S+)$/i;
		return URL_REGEXP.test(url);
	}



})();

'use strict';

// TODO make up my mind about 'foo' versus 'isFoo'

angular.module('com.inthetelling.story')

/* List filters */
.filter('itemLayout', function () {
		return function (items, layout) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item.layouts && item.layouts[0] === layout) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('mainCol', function() {
		return function (items) {
			var ret = [];
			angular.forEach(items, function(item) {
				if (item.layouts && (item.layouts[0] === 'mainBg' || item.layouts[0] === 'mainFg')) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('altCol', function() {
		return function (items) {
			var ret = [];
			angular.forEach(items, function(item) {
				if (item.layouts && (item.layouts[0] === 'altBg' || item.layouts[0] === 'altFg')) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('annotation', function () {
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item._type === 'Annotation' && !item.templateUrl.match(/(transmedia|definition)/)) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('transmedia', function () {
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item._type !== 'Annotation' || item.templateUrl.match(/(transmedia|definition)/)) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('transcript', function () {
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item.isTranscript) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('isCurrent', function () {
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item.isCurrent) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('isContent', function () {
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item.isContent) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('reviewMode', ["appState", function (appState) {
		return function (items) {
			var ret = [];
			var isProducer = (appState.product === 'producer');
			// player, sxs: non-cosmetic, and isContent or windowFg.
			// producer: everything.
			angular.forEach(items, function (item) {
				if (
					isProducer ||
					(!item.cosmetic &&
						(item.isContent || item.layouts.indexOf('windowFg') > -1)
					)
				) {
					ret.push(item);
				}
			});
			return ret;
		};
	}])
	.filter('transcriptandrequired', function () {
		// returns transcript AND required transmedia:
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item.isTranscript || item.required) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('transcriptandoptional', function () {
		// returns transcript AND optional transmedia
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (item.isTranscript || (!item.isTranscript && !item.required)) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('required', function () {
		// returns only required transmedia (no transcript):
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (!item.isTranscript && item.required) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	.filter('optional', function () {
		// returns only optional transmedia (no transcript)
		return function (items) {
			var ret = [];
			angular.forEach(items, function (item) {
				if (!item.isTranscript && !item.required) {
					ret.push(item);
				}
			});
			return ret;
		};
	})
	/* Single filters */

/*
.filter('trustAsHtml', function($sce) {
	return function(val) {
		return $sce.trustAsHtml(val);
	};
})
*/
.filter('highlightSubstring', function () {
		return function (text, search) {
			// console.log("Search highlight",text,search);
			if (!text) {
				return;
			}
			if (search || angular.isNumber(search)) {
				return text.toString().replace(new RegExp(search.toString(), 'gi'), '<span class="ui-match">$&</span>');
			} else {
				return text;
			}
		};
	})
	.filter('pretty', function () {
		return function (json) {
			return JSON.stringify(json, undefined, 2);
		};
	})
	.filter('i18n', ["appState", function (appState) {
		// Used for plugin data only; other fields precalculate into display_foo.
		// let's see if this is a huge performance hit, if not maybe we'll skip the precalc...
		return function (input) {
			if (!input) {
				return "";
			}
			if (typeof (input) === 'object') {
				return input[appState.lang] || input.en || "";
			}
			return input;
		};
	}])
	.filter('asBytes', function () {
		// quick + sloppy
		return function (b) {
			if (!b) {
				return "";
			}
			var kb = Math.floor(b / 1024);
			if (kb < 1024) {
				return kb + "Kb";
			}
			var mb = Math.floor(kb / 10.24) / 100;
			return mb + "Mb";
		};
	})
	.filter('asPercent', function () {
		return function (n) {
			return isNaN(n) ? (Math.floor(n * 100)) + "%" : '0%';
		};
	})
	.filter('stripParams', function () {
		return function (x) {
			return x.substr(0, x.indexOf('?'));
		};
	})
	.filter('asTime', function () {
		return function (t) {
			if (isNaN(t)) {
				return "0:00";
			}
			if (t < 0) {
				return "0:00";
			}
			return Math.floor(t / 60) + ":" + ("0" + Math.floor(t) % 60).slice(-2);
		};
	})
	.filter('alpha', function () {
		// To label ng-repeats by letter, use {{$index | alpha}}
		return function (n) {
			return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('')[n % 26];
		};
	});

'use strict';

angular.module('com.inthetelling.story')
	.controller('ErrorController', ["$scope", "$http", "config", "errorSvc", "appState", "authSvc", function ($scope, $http, config, errorSvc, appState, authSvc) {
		// console.log("errorController", $scope);

		$scope.errorSvc = errorSvc;
		$scope.logout = authSvc.logout;
		$scope.user = appState.user;

		// probably should split this into separate functions for errors and notifications, but good enough for now
		$scope.dismiss = function (cur) {
			// this use of splice to remove items from the middle of the array in place works here
			// only because we're only removing a single item.  For multiple removes in one pass, will need to  scan backwards through the array
			for (var i = 0; i < errorSvc.errors.length; i++) {
				if (errorSvc.errors[i] === cur) {
					errorSvc.errors.splice(i, 1);
					i = errorSvc.errors.length; // break loop since we already removed our item
				}
			}
			for (i = 0; i < errorSvc.notifications.length; i++) {
				if (errorSvc.notifications[i] === cur) {
					errorSvc.notifications.splice(i, 1);
					i = errorSvc.notifications.length;
				}
			}
		};

	}]);

'use strict';

angular.module('com.inthetelling.story')
	.controller('TimelineController', ["$scope", "timelineSvc", "modelSvc", "appState", function ($scope, timelineSvc, modelSvc, appState) {

		$scope.play = timelineSvc.play;
		$scope.pause = timelineSvc.pause;

		$scope.changeSpeed = function (n) {
			// console.log("timelineController.changeSpeed");
			// Limit speed to between 0.5 and 2 inclusive
			var newSpeed = appState.timeMultiplier + n;
			if (newSpeed < 0.5) {
				newSpeed = 0.5;
			}
			if (newSpeed > 2) {
				newSpeed = 2;
			}
			timelineSvc.setSpeed(newSpeed);
		};
		$scope.resetSpeed = function () {
			timelineSvc.setSpeed(1);
		};

		$scope.markerPercent = function (t) {
			return (t === undefined ? 0 : t / appState.duration * 100);
		};

		// Yeah, this is a little odd.  Letting timelineSvc manage all video-related functions,
		// including sound, so we can maintain state across multiple videos.
		$scope.toggleMute = function () {
			timelineSvc.toggleMute();
		};
		$scope.setVolume = function (volume) {
			timelineSvc.setVolume(volume);
		};

		/* DEAD CODE
		$scope.toggleFullscreen = function () {
			if (isInFullscreenMode()) {
				exitFullscreen();
			} else {
				enterFullscreen();
			}
		};

		var isInFullscreenMode = function () {
			return ((document.fullScreenElement && document.fullScreenElement !== null) || // alternative standard methods
				document.mozFullScreen || document.webkitIsFullScreen); // current working methods
		};

		var fullscreenWatcher = $scope.$watch(function () {
			return isInFullscreenMode();
		}, function (newVal) {
			appState.isInFullscreenMode = newVal;
		});
		$scope.$on('$destroy', function () {
			fullscreenWatcher();
		});

		var exitFullscreen = function () {
			if (document.exitFullscreen) {
				document.exitFullscreen();
			} else if (document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if (document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			}
		};

		var enterFullscreen = function () {
			var element = document.getElementById('CONTAINER');
			if (element.requestFullScreen) {
				element.requestFullScreen();
			} else if (element.mozRequestFullScreen) {
				element.mozRequestFullScreen();
			} else if (element.webkitRequestFullScreen) {
				element.webkitRequestFullScreen();
			}
		};
*/

		$scope.$on('$destroy', function () {
			// Make sure that the clock and event timers are destroyed too
			timelineSvc.pause();
		});
	}]);

'use strict';

//TODO Some of this could be split into separate controllers (though that may not confer any advantage other than keeping this file small...)

angular.module('com.inthetelling.story')
	.controller('PlayerController', ["config", "$scope", "$location", "$rootScope", "$routeParams", "$timeout", "$interval", "appState", "dataSvc", "modelSvc", "timelineSvc", "analyticsSvc", "errorSvc", "authSvc", "youTubePlayerManager", function (config, $scope, $location, $rootScope, $routeParams, $timeout, $interval, appState, dataSvc, modelSvc, timelineSvc, analyticsSvc, errorSvc, authSvc, youTubePlayerManager) {
		// console.log("playerController", $scope);

		// $scope.tmp = function () {
		// 	dataSvc.createTemplate({
		// 		url: 'templates/episode/regis.html',
		// 		name: 'Regis',
		// 		// event_types: ['Plugin'], // Upload, Scene, Plugin, Annotation, Link
		// 		applies_to_episode: true,
		// 		applies_to_narrative: false
		// 	});
		// };

		$scope.viewMode = function (newMode) {
			appState.viewMode = newMode;
			analyticsSvc.captureEpisodeActivity("modeChange", {
				"mode": newMode
			});

			appState.producerEditLayer = 0;

			if (newMode === 'review') {
				// magnet animation looks too choppy when loading review mode; skip it:
				$timeout(function () {
					$rootScope.$emit('magnet.jumpToMagnet');
				});
				appState.autoscroll = true;
				appState.autoscrollBlocked = false;
				startScrollWatcher();
				$timeout(handleAutoscroll); // timeout is for edge case where user loads review mode first, before handleAutoscroll is defined below...
			} else {
				appState.autoscroll = false;
				// appState.autoscrollBlocked = true;
			}

			if (newMode === 'watch') {
				$scope.endSearch();
			}

			$timeout(function () {
				$(window)
					.trigger('resize'); // possible fix for unreproducible-by-me layout issue in review mode
			});
		};

		if ($routeParams.viewMode) {
			$timeout(function () {
				$scope.viewMode($routeParams.viewMode);
			});
		}

		if ($routeParams.t) {
			timelineSvc.startAtSpecificTime($routeParams.t);
		}

		// $scope.changeProducerEditLayer = function (newLayer) {
		// 	appState.producerEditLayer = appState.producerEditLayer + newLayer;
		// 	// I'm sure there's a fancier way to do this but
		// 	if (appState.producerEditLayer === 2) {
		// 		appState.producerEditLayer = 1;
		// 	}
		// 	if (appState.producerEditLayer === -2) {
		// 		appState.producerEditLayer = -1;
		// 	}
		// };

		$scope.toggleProducerPreview = function () {
			appState.product = (appState.product === 'producer') ? 'player' : 'producer';
		};

		/* LOAD EPISODE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

		if ($routeParams.epId) { // if this is missing we're in a narrative, which will init appstate and episodeID for us
			appState.init();
			appState.episodeId = $routeParams.epId;
		} else {
			$scope.narrativeId = $routeParams.narrativeId;
		}

		if (appState.isFramed) {
			/*
			 workaround for when instructure canvas fails to size our iframe correctly
			 This will be harmless in other platforms:
			 */
			if (Math.max(document.documentElement.clientHeight, window.innerHeight || 0) < 151) {
				window.parent.postMessage(JSON.stringify({
					subject: 'lti.frameResize',
					height: "650px"
				}), '*');
			}
		}

		var wileyNag = function () {
			// HACK design-by-committee TS-829 for framed Wiley episodes.
			// (If localStorage is blocked, default to not showing the overlay to avoid annoying them with repeats.)
			if (!appState.isFramed || (modelSvc.episodes[appState.episodeId].templateUrl.indexOf('wiley') === -1)) {
				return;
			}
			var localStorageAllowed = true;
			try {
				localStorage.setItem("iCanHazStorage", 1);
			} catch (e) {
				localStorageAllowed = false;
			}
			if (localStorageAllowed) {
				localStorage.removeItem("iCanHazStorage");
			}
			if (localStorageAllowed && !(localStorage.getItem("noWileyNag"))) {
				appState.show.wileyNag = true;
				var nagWatch = $scope.$watch('appState.time', function (n) {
					if (n) {
						appState.show.wileyNag = false;
						nagWatch();
					}
				});
			}
			$scope.noWileyNag = function () {
				appState.show.wileyNag = false;
				localStorage.setItem("noWileyNag", "1");
			};
			// END WILEY HACK
		};

		var getEpisodeWatcher = $rootScope.$on("dataSvc.getEpisode.done", function () {
			getEpisodeWatcher();
			// Wait until we have both the master asset and the episode's items; update the timeline and current language when found
			appState.lang = ($routeParams.lang) ? $routeParams.lang.toLowerCase() : modelSvc.episodes[appState.episodeId].defaultLanguage;
			modelSvc.setLanguageStrings();
			wileyNag(); // HACK
			document.title = modelSvc.episodes[appState.episodeId].display_title; // TODO: update this on language change
			// console.log("getEpisode.done fired", modelSvc.episodes[appState.episodeId]);
			// producer needs the episode container:
			dataSvc.getContainer(modelSvc.episodes[appState.episodeId].container_id, appState.episodeId).then(function () {
				if (modelSvc.episodes[appState.episodeId].master_asset_id) {
					// watch for the master asset to exist, so we know duration; then call addEndingScreen and timelineSvc.init.
					// HACK this is a weird place for this.
					var watch = $scope.$watch(function () {
						return modelSvc.assets[modelSvc.episodes[appState.episodeId].master_asset_id];
					}, function (masterAsset) {
						if (masterAsset && Object.keys(masterAsset).length > 1) {
							watch();
							modelSvc.addEndingScreen(appState.episodeId); // needs master asset to exist so we can get duration
							timelineSvc.init(appState.episodeId);
							$scope.loading = false;
						}
					});
				} else {
					// Episode has no master asset
					$scope.loading = false;
					// TODO add help screen for new users. For now, just pop the 'edit episode' pane:
					if (appState.product === 'producer') {
						appState.editEpisode = modelSvc.episodes[appState.episodeId];
					}
					appState.videoControlsActive = true; // TODO see playerController showControls; this may not be sufficient on touchscreens
					appState.videoControlsLocked = true;
				}

				if (appState.productLoadedAs === 'producer' && !(authSvc.userHasRole('admin') || authSvc.userHasRole('customer admin'))) {
					// TODO redirect instead?
					appState.product = 'player';
					appState.productLoadedAs = 'player';
				}

			});
		});

		if (modelSvc.episodes[appState.episodeId]) {
			// recycle existing episode data.   TODO: DRY the repeated code below from inside getEpisodeWatcher
			appState.lang = ($routeParams.lang) ? $routeParams.lang.toLowerCase() : modelSvc.episodes[appState.episodeId].defaultLanguage;
			document.title = modelSvc.episodes[appState.episodeId].display_title; // TODO: update this on language change
			if (modelSvc.episodes[appState.episodeId].master_asset_id) {
				timelineSvc.init(appState.episodeId);
			} else {
				// TODO add help screen for new users. For now, just pop the 'edit episode' pane:
				if (appState.product === 'producer') {
					appState.editEpisode = modelSvc.episodes[appState.episodeId];
				}
				appState.videoControlsActive = true; // TODO see playerController showControls; this may not be sufficient on touchscreens
				appState.videoControlsLocked = true;
			}
			if (appState.productLoadedAs === 'producer' && !(authSvc.userHasRole('admin') || authSvc.userHasRole('customer admin'))) {
				// TODO redirect instead?
				appState.product = 'player';
				appState.productLoadedAs = 'player';
			}
		} else {
			$scope.loading = true;
			modelSvc.addLandingScreen(appState.episodeId);
			dataSvc.getEpisode(appState.episodeId, appState.episodeSegmentId);
		}

		$scope.appState = appState;
		$scope.show = appState.show; // yes, slightly redundant, but makes templates a bit easier to read
		$scope.now = new Date();

		$scope.newWindowUrl = config.apiDataBaseUrl + "/v1/new_window";
		if (appState.narrativeId) {
			$scope.newWindowUrl = $scope.newWindowUrl + "?narrative=" + appState.narrativeId + "&timeline=" + appState.timelineId;
		} else {
			$scope.newWindowUrl = $scope.newWindowUrl + "?episode=" + appState.episodeId;
		}

		// put this in template instead
		// if (appState.user.access_token) {
		// 	$scope.newWindowUrl = $scope.newWindowUrl + "&access_token=" + appState.user.access_token;
		// } else {
		// 	// HACK wait for user info to finish loading
		// 	$timeout(function () {
		// 		$scope.newWindowUrl = $scope.newWindowUrl + "&access_token=" + appState.user.access_token;
		// 	}, 500);
		// }

		/* END LOAD EPISODE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

		/* BEGIN TOOLBAR HIDE/REVEAL- - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
		// TODO put this in own controller

		// Bottom toolbar starts out hidden.  5s after using a control or leaving the pane, fade out controls.
		//   If mouse re-enters pane, keep the controls visible.

		appState.videoControlsActive = false;
		var controlTimer;
		var keepControls;

		var videoControlsWatcher = $scope.$watch(function () {
			return appState.videoControlsActive;
		}, function (isActive) {
			if (isActive) {
				$timeout.cancel(controlTimer);
				controlTimer = $timeout(function () {
					if (!keepControls) { // <-- this is why we're not just calling allowControlsExit here
						appState.videoControlsActive = false;
					}
				}, 5000);
			}
		});

		$scope.showControls = function () {
			// console.log("showControls");
			$timeout.cancel(controlTimer);
			appState.videoControlsActive = true;
			if (appState.isTouchDevice) {
				$scope.allowControlsExit(); // otherwise it sticks permanently on touchscreens. TODO find a better way
			}
		};

		// $scope.keepControls = function () {
		// 	console.log("keepControls");
		// 	appState.videoControlsLocked = true;
		// };

		$scope.allowControlsExit = function () {
			// console.log("allowControlsExit. Locked state is ", appState.videoControlsLocked);
			// appState.videoControlsLocked = false;
			$timeout.cancel(controlTimer);
			controlTimer = $timeout(function () {
				if (!appState.videoControlsLocked) {
					appState.videoControlsActive = false;
				}
			}, 5000);
		};

		/* END TOOLBAR HIDE/REVEAL- - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

		// Misc toolbars too small to rate their own controllers
		$scope.toggleSearchPanel = function () {
			appState.show.searchPanel = !appState.show.searchPanel;
			console.log('toggle search pane!', appState.show.searchPanel);
			if (appState.windowWidth < 480) {
				$scope.viewMode('review');
			} else {
				$scope.viewMode(appState.show.searchPanel ? 'review' : 'discover');
			}

			appState.searchText = '';
			if (appState.show.searchPanel) {
				$timeout(function () {
					document.getElementById('searchtext').focus();
				});
			} else {
				//pause any videos which could be playing in search mode
				if (appState.embedYTPlayerAvailable) {

					youTubePlayerManager.pauseOtherEmbeds();
				}
			}
		};

		$scope.endSearch = function () {
			appState.searchText = '';
			appState.show.searchPanel = false;
		};

		$scope.toggleNavPanel = function () {
			// console.log("toggleNavPanel");
			timelineSvc.pause();
			appState.show.navPanel = !appState.show.navPanel;
		};

		$scope.seek = function (t) {
			// triggered by nav panel
			timelineSvc.seek(t, "sceneMenu");
			appState.show.navPanel = false;
		};

		$scope.pause = function () {
			timelineSvc.pause();
		};

		// Intercepts the first play of the video and decides whether to show the help panel beforehand.
		// Disabling this,since we're not showing a help panel anymore, but keeping it in case we change our minds on that
		var firstplayWatcher = $rootScope.$on("video.firstPlay", function () {
			// if (localStorageAllowed && appState.time === 0 && !(localStorage.getItem("noMoreHelp"))) {
			// 	// appState.show.helpPanel = true;
			// } else {
			timelineSvc.play();
			// }
		});

		$scope.hidePanel = function (panel) {
			// console.log("hidePanel", panel);
			appState.show[panel] = false;
			// console.log(appState);
		};

		$scope.hidePanels = function () {
			// dismiss ALL THE THINGS
			appState.show.navPanel = false;
			appState.show.profilePanel = false;
			appState.itemDetail = false;
			$rootScope.$emit("player.dismissAllPanels");
		};

		$scope.play = function () {
			timelineSvc.play();
		};

		$scope.continue = function () {
			// console.log("continue", modelSvc.episodes[appState.episodeId].masterAsset.duration, appState.time);
			// If we're close to the end, jsut move to the ending screen and stop.
			if (modelSvc.episodes[appState.episodeId].masterAsset.duration - appState.time < 0.2) {
				timelineSvc.pause();
				timelineSvc.seek(modelSvc.episodes[appState.episodeId].masterAsset.duration - 0.01);
			} else {
				timelineSvc.play();
			}
		};

		$scope.userHasRole = function (role) {
			return authSvc.userHasRole(role);
		};

		$scope.logout = function () {
			return authSvc.logout();
		};

		// - - - - - - - - -  - - - - - - - - - - - - - - -
		// Autoscroll
		// Some jQuery dependencies here (namespaced bindings, animated scroll)

		// appstate.autoscroll = we are in a mode which wants autoscroll
		// appstate.autoscrollBlocked = user has disabled autoscroll (by scrolling manually)
		// (Those are in modelSvc instead of $scope becuase in future we'll want scenes to be able to autoscroll too)

		// isn't it weird how we read the scrollTop from (window), but have to animate it on (body,html)?

		// NOTE: When we had the #CONTAINER position:fixed hack for fullscreen safari, this needed to be configurable to point to
		// #CONTAINER instead of window.  Have removed that, but leaving this here in case we bring it back:

		//console.log("AppState scroll stuff", "scroll:", appState.autoscroll, "blocked:", appState.autoscrollBlocked, appState.isTouchDevice);

		if (appState.isTouchDevice && appState.viewMode === 'review') {
			appState.autoscroll = true;
		}

		var autoscrollableNode = $(window);
		var animatableScrollNode = $('html,body');
		var autoscrollTimer = false;

		var startScrollWatcher = function () {
			//console.log("startScrollWatcher");
			if (autoscrollTimer) {
				return;
			}
			autoscrollTimer = $interval(handleAutoscroll, 400);
			autoscrollableNode.bind("scroll", function () {
				// User-initiated scrolling should block autoscroll.
				// console.log("user scrolled");
				animatableScrollNode.stop();
				stopScrollWatcher();
				appState.autoscrollBlocked = true;
			});
			// handleAutoscroll();
		};

		var stopScrollWatcher = function () {
			console.log("stopScrollWatcher");
			autoscrollableNode.unbind("scroll");
			$interval.cancel(autoscrollTimer);
			autoscrollTimer = false;

		};

		$scope.enableAutoscroll = function () {
			// console.log("Enabling autoscroll");
			if (appState.autoscrollBlocked) {
				appState.autoscrollBlocked = false;
				startScrollWatcher();
			}
		};

		// TODO this is a relatively expensive watch.  Could greatly increase its $interval if we
		// support directly triggering it from timeline on seek()...
		var handleAutoscroll = function () {
			//console.log("handleAutoscroll", "scroll:", appState.autoscroll, "blocked:", appState.autoscrollBlocked);
			// if autoscroll is true and autoscrollBlocked is false,
			// find the topmost visible current item and scroll to put it in the viewport.
			// WARNING this may break if item is inside scrollable elements other than #CONTAINER
			if (appState.autoscrollBlocked || !appState.autoscroll) {
				return;
			}

			// find topmost visible current items.
			// Limiting search to .reviewMode for now, because it was matching and trying to scroll to modals;
			// when we add more generalized autoscroll support within scenes that will need to change of course
			var top = Infinity;
			var curScroll = autoscrollableNode.scrollTop();

			// HACK. Need to limit this to search within a pane
			angular.forEach($('.isCurrent:visible'), function (item) {
				var t = item.getBoundingClientRect()
						.top + curScroll;
				if (t < top) {
					top = t;
				}
			});
			if (top === Infinity) {
				return;
			}

			// There's a visible current item; is it within the viewport?
			var slop = 180;
			if (
				(top > curScroll + slop) && // below top of viewport
				((top - curScroll) < (document.documentElement.clientHeight - slop)) // above bottom of viewport
			) {
				return;
			}
			if (top < slop && curScroll < slop) {
				return; // too close to top of window to bother
			}

			// Okay, we got past all those returns; it must be time to scroll
			// console.log("handleAutoscroll triggering a scroll");
			stopScrollWatcher();
			animatableScrollNode.animate({
				"scrollTop": top - slop
			}, 1500);

			// Don't use jQuery's animation callback; this would get called twice because animatableScrollNode is two nodes...
			$timeout(function () {
				startScrollWatcher();
			}, 1750); // allow extra time; iPad was still capturing the tail end of the animated scroll

		};

		startScrollWatcher();

		// - - - - - - - - -  - - - - - - - - - - - - - - -

		var escWatcher = $rootScope.$on("userKeypress.ESC", $scope.hidePanels);

		$scope.$on('$destroy', function () {
			videoControlsWatcher();
			getEpisodeWatcher();
			firstplayWatcher();
			escWatcher();
		});
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.controller('EpisodeController', function () {

	});

'use strict';

angular.module('com.inthetelling.story')
	.controller('SceneController', ["$scope", "$filter", function ($scope, $filter) {
		$scope.byPullquoteOrH2 = byPullquoteOrH2;
		$scope.setBgImgUrl = setBgImgUrl;
		$scope.precalculateSceneValues = function () {
			// console.log("precalcSceneValues");

			// clear out old calculations in case we're re-precalculating
			delete $scope.mainContentHasLeftSidebar;
			delete $scope.mainContentHasRightSidebar;
			delete $scope.mainContentHasBothSidebars;
			delete $scope.altContentHasLeftSidebar;
			delete $scope.altContentHasRightSidebar;
			delete $scope.altContentHasBothSidebars;

			// some scene templates let you specify showCurrent for one or more columns; others do it automatically (that will be in the template)
			$scope.showCurrent = ($.inArray("showCurrent", $scope.scene.layouts) > -1);

			// Precalculate each fg, bg, and content pane on scene creation for performance.
			$scope.contentItems = $filter("isContent")($scope.scene.items);
			$scope.mainFgItems = $filter("itemLayout")($scope.scene.items, "mainFg");
			$scope.mainBgItems = $filter("itemLayout")($scope.scene.items, "mainBg");
			$scope.altFgItems = $filter("itemLayout")($scope.scene.items, "altFg");
			$scope.altBgItems = $filter("itemLayout")($scope.scene.items, "altBg");
			// Content is a little trickier:
			// * splitRequired:
			//   main = transcript + optional   / alt=required - transcript
			// * splitOptional:
			//   main=transcript + required / alt=optional - transcript
			// * splitTransmedia (default):
			//   main=annotation except text-transmedia or text-definition, alt=inverse

			// (Note splitRequired and splitOptional are legacy)

			// Main content pane:
			if ($.inArray("splitRequired", $scope.scene.layouts) > -1) {
				$scope.mainContentItems = $filter("transcriptandoptional")($scope.contentItems);
			} else if ($.inArray("splitOptional", $scope.scene.layouts) > -1) {
				$scope.mainContentItems = $filter("transcriptandrequired")($scope.contentItems);
			} else {
				$scope.mainContentItems = $filter("annotation")($scope.contentItems);
			}

			// alt content pane is inverse of main:
			if ($.inArray("splitRequired", $scope.scene.layouts) > -1) {
				$scope.altContentItems = $filter("required")($scope.contentItems);
			} else if ($.inArray("splitOptional", $scope.scene.layouts) > -1) {
				$scope.altContentItems = $filter("optional")($scope.contentItems);
			} else {
				$scope.altContentItems = $filter("transmedia")($scope.contentItems);
			}

			// Check for left and right sidebars
			for (var i = 0; i < $scope.mainContentItems.length; i++) {
				if ($.inArray("burstL", $scope.mainContentItems[i].layouts) > -1 ||
					$.inArray("sidebarL", $scope.mainContentItems[i].layouts) > -1 ||
					$.inArray("burst", $scope.mainContentItems[i].layouts) > -1) {
					$scope.mainContentHasLeftSidebar = true;
				}
				if ($.inArray("burstR", $scope.mainContentItems[i].layouts) > -1 ||
					$.inArray("sidebarR", $scope.mainContentItems[i].layouts) > -1 ||
					$.inArray("burst", $scope.mainContentItems[i].layouts) > -1) {
					$scope.mainContentHasRightSidebar = true;
				}
				if ($scope.mainContentHasLeftSidebar && $scope.mainContentHasRightSidebar) {
					$scope.mainContentHasBothSidebars = true;
					i = $scope.mainContentItems.length; // no need to keep checking the rest
				}
			}

			for (i = 0; i < $scope.altContentItems.length; i++) {
				if ($.inArray("burstL", $scope.altContentItems[i].layouts) > -1 ||
					$.inArray("sidebarL", $scope.altContentItems[i].layouts) > -1 ||
					$.inArray("burst", $scope.altContentItems[i].layouts) > -1) {
					$scope.altContentHasLeftSidebar = true;
				}
				if ($.inArray("burstR", $scope.altContentItems[i].layouts) > -1 ||
					$.inArray("sidebarR", $scope.altContentItems[i].layouts) > -1 ||
					$.inArray("burst", $scope.altContentItems[i].layouts) > -1) {
					$scope.altContentHasRightSidebar = true;
				}
				if ($scope.altContentHasLeftSidebar && $scope.altContentHasRightSidebar) {
					$scope.altContentHasBothSidebars = true;
					i = $scope.altContentItems.length; // no need to keep checking the rest
				}
			}
		};

		function byPullquoteOrH2(item) {
			var isPullQuote = item.templateUrl === 'templates/item/pullquote.html';
			var isPullQuoteAttrib = item.templateUrl === 'templates/item/pullquote-noattrib.html';
			var isH2 = item.templateUrl === 'templates/item/text-h2.html';
			return (isPullQuote || isH2 || isPullQuoteAttrib) ? item : false;
		}

		function setBgImgUrl(items, col) {
			var currItems = $filter('isCurrent')(items);
			var mainColBgOrFg = $filter(col)(currItems);
			var opacity = 1;
			if (mainColBgOrFg.length > 0) {
				var bgUrl = 'url('+ mainColBgOrFg[0].asset.url +')';
				if (/Bg/.test(mainColBgOrFg[0].layoutCss)) {
					opacity = 0.33;
				}
				return { 'background-image': bgUrl, 'opacity': opacity };
			}
			return '';
		}
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.controller('ItemController', ["$scope", "timelineSvc", function ($scope, timelineSvc) {
		$scope.seek = function (t) {
			timelineSvc.seek(t, "clickedOnItem", $scope.item._id);
		};
		var KeyCodes = {
			ENTER: 13,
			SPACE: 32
		};

		$scope.seekOnKeyPress = function (t, $event) {
			var e = $event;
			var passThrough = true;
			switch (e.keyCode) {
			case KeyCodes.ENTER:
				$scope.seek(t);
				passThrough = false;
				break;
			case KeyCodes.SPACE:
				$scope.seek(t);
				passThrough = false;
				break;
			default:
				passThrough = true;
				break;
			}
			if (!passThrough) {
				$event.stopPropagation();
				$event.preventDefault();
			}
		};
	}]);

'use strict';

// TODO youtube support for multiple playback speeds?
// TODO some scoping untidiness here; some of this should be moved to ittVideo

// TODO: counting stalls works ok-ish, but look into watching buffer % directly instead
// so we can preemptively switch streams and not have to do all the intentionalStall nonsense

// NOTE iPhone has a separate video controller which doesn't send all the user events to the web side.
// This screws with all our stall watchers and babysitters since we can't distinguish between intententional pauses and unintended stalls.
// babysitters and stalls are disabled on phone therefore.

angular.module('com.inthetelling.story')
	.controller('VideoController', ["$q", "$scope", "$rootScope", "$timeout", "$interval", "$window", "$document", "appState", "timelineSvc", "analyticsSvc", "youTubePlayerManager", function ($q, $scope, $rootScope, $timeout, $interval, $window, $document, appState, timelineSvc, analyticsSvc, youTubePlayerManager) {
		//exported functions / props
		angular.extend($scope, {
			initVideo: initVideo,
			intentionalStall: false,
			play: play,
			pause: pause,
			startAtTime: startAtTime,
			seek: seek,
			setSpeed: setSpeed,
			currentTime: currentTime,
			toggleMute: toggleMute,
			setVolume: setVolume,
			playerStateChange: onPlayerStateChange,
			onReady: onReady
		});


		//private properties
		var _eventListeners = {};
		var _numberOfStalls = 0;
		var _YTPlayer;
		var _babysitter;
		var playerStates = {
			'-1': 'unstarted',
			'0': 'ended',
			'1': 'playing',
			'2': 'paused',
			'3': 'buffering',
			'5': 'video cued'
		};

		//called from link fn of ittVideo
		function initVideo(el) {
			// console.log("videoController.initVideo", el);

			// Adjust bitrate.  For now still depends on there being only two versions of the mp4 and webm:
			$scope.video.curStream = (appState.isTouchDevice ? 0 : 1);

			if ($scope.video.urls.youtube && $scope.video.urls.youtube.length) {
				$scope.videoType = 'youtube';
				appState.videoType = $scope.videoType;
				$scope.videoNode = {id: $scope.video._id};
			} else {
				$scope.videoType = "video"; // as in html5 <video> tagx
				appState.videoType = $scope.videoType;
				$scope.videoNode = el.find('video')[0];
				initHTML5Video();
			}
		}

		function onReady() {
			_initYoutube();
		}

		function onPlayerStateChange(event) {
			var state = event.data;

			//console.log('player state changin? videoCtrl', state);
			if (state < 0) {
				return;
			}
			if (appState.isTouchDevice && appState.hasBeenPlayed === false) {
				// The first user-initiated click needs to go directly to youtube, not to our player.
				// So we have to do some catchup here:
				youTubePlayerManager.pause($scope.videoNode.id); // block the direct user action, now that it's successfully inited YT for us
				timelineSvc.play(); // now our code can take over as per normal
			} else {
				$scope.playerState = playerStates[parseInt(state, 10)];
				if ($scope.playerState === 'buffering') {
					_stall();
				}

				if ($scope.playerState === 'ended') {
					//end of video
					console.log('end of video!!');
					youTubePlayerManager.stop($scope.videoNode.id);
				}
			}
		}

		function _stall() {
			// notify timelineSvc if the video stalls during playback
			if (appState.timelineState !== 'playing') {
				return;
			}
			if (appState.isIPhone) {
				return;
			}
			console.warn("Video stalled");
			if (!$scope.intentionalStall) {
				analyticsSvc.captureEpisodeActivity("stall");
			}
			timelineSvc.stall();
			var unwatch = $scope.$watch(function () {
				return $scope.playerState;
			}, function (newState) {
				if (newState !== 'buffering') {
					unwatch();
					timelineSvc.unstall();
				}
			});
		}


		function _initYoutube() {
			// NOTE youtube is currently sending us playerState of 'buffering' when paused

			timelineSvc.registerVideo($scope);

			 //but we still need to wait for youtube to Do More Stuff, apparently:
			$scope.$watch(function () {
				return youTubePlayerManager.getVideoLoadedFraction($scope.videoNode.id);
			}, function (cur) {
				if (cur) {
					appState.bufferedPercent = youTubePlayerManager.getVideoLoadedFraction($scope.videoNode.id) * 100;
					//unwatch();
				}
			});


		} // end of initYoutube


		function initHTML5Video() {
			// console.log("initHTML5Video");
			// $scope.videoNode.addEventListener("loadedmetadata", function () {
			// 	console.log("video metadata has loaded");
			// }, false);
			_eventListeners.playing = $scope.videoNode.addEventListener('playing', function () {
				$scope.playerState = 'playing';
			}, false);

			// Chrome is failing to send these events, so screw it, we'll do it ourselves
			// $scope.videoNode.addEventListener('waiting', function () {
			// 	// triggered when buffering is stalled and there is no more buffered data
			// 	$scope.playerState = 'waiting';
			// 	$scope.stall();
			// }, false);
			// $scope.videoNode.addEventListener('stalled', function () {
			// 	// triggered when buffering is stalled -- playback may be continuing if there's buffered data
			// 	$scope.playerState = 'stalled';
			// }, false);
			_eventListeners.pause = $scope.videoNode.addEventListener('pause', function () {
				$scope.playerState = 'pause';
			}, false);

			function _changeVideoBandwidth () {
				// console.log("changeVideoBandwidth");
				var currentTime = $scope.currentTime();
				$scope.videoNode.pause();

				// TODO
				// according to the html5 spec, just changing the DOM shouldn't work.  But it does.
				// switch to the lower-bitrate stream
				$scope.video.curStream = 0;

				analyticsSvc.captureEpisodeActivity('lowBandwidth');
				// Need to wait a tick for the DOM to have updated before callign videoNode.load():
				$timeout(function () {
					$scope.videoNode.load();
					$scope.seek(currentTime);
					$scope.videoNode.play();
				});

				// TODO according to the html5 spec, the way we should change the video stream is like this. but iOS (at least) chokes on it:
				/*
								if ($scope.videoNode.currentSrc !== '') {
									var ext = $scope.videoNode.currentSrc.match(/\.(\w+)$/)[1];
									if ($scope.video.urls[ext][0] !== $scope.videoNode.currentSrc) {

										var currentTime = $scope.videoNode.currentTime;
										$scope.videoNode.pause();
										$scope.videoNode.src = $scope.video.urls[ext][0];
										$scope.videoNode.load();
										$scope.seek(currentTime);
										$timeout(function () {
											$scope.videoNode.play();
										});
									}
								}
				*/

			}

			function _babysitHTML5Video() {
				_numberOfStalls = 0;
				if (appState.isIPhone) {
					return;
				}
				// native video will use this instead of $scope.stall and $scope.unstall.  May want to just standardize on this for YT as well
				_babysitter = $interval(function () {
					// console.log($scope.videoNode.currentTime, appState.timelineState);
					if (appState.timelineState === 'playing') {
						if ($scope.lastPlayheadTime === $scope.currentTime()) {
							if (!$scope.intentionalStall) {
								analyticsSvc.captureEpisodeActivity("stall");
							}
							timelineSvc.stall();
							if (!$scope.intentionalStall && _numberOfStalls++ === 2) {
								_changeVideoBandwidth();
							}
							// console.log("numberOfStalls = ", _numberOfStalls);
						}
						$scope.lastPlayheadTime = $scope.currentTime();
					} else if (appState.timelineState === 'buffering') {
						if ($scope.lastPlayheadTime !== $scope.currentTime()) {
							appState.timelineState = 'playing';
							timelineSvc.unstall();
						}
					}
				}, 333);
			}

			_babysitHTML5Video();

			//this gets defined on scope twice, once in a watch, not sure which one is the one we want if we called it on the scope
			$scope.getBufferPercent = function () {
				if ($scope.videoNode.buffered.length > 0) {
					var bufStart = $scope.videoNode.buffered.start($scope.videoNode.buffered.length - 1);
					var bufEnd = $scope.videoNode.buffered.end($scope.videoNode.buffered.length - 1);

					if (bufEnd < 0) {
						bufEnd = bufEnd - bufStart;
						bufStart = 0;
					}
					appState.bufferedPercent = bufEnd / appState.duration * 100;
					return appState.bufferedPercent;
				} else {
					return 0;
				}
			};

			timelineSvc.registerVideo($scope);

			/* For future reference, all html5 events:
				loadstart
				canplaythrough
				canplay
				loadeddata
				loadedmetadata
				abort
				emptied
				error
				stalled
				suspend
				waiting
				pause
				play
				volumechange
				playing
				seeked
				seeking
				durationchange
				progress
				ratechange
				timeupdate
				ended
				webkitbeginfullscreen
				webkitendfullscreen
			*/

		} // end of initHTML5Video

		// DO NOT CALL ANY OF THE BELOW DIRECTLY!
		// Instead call via timelineSvc; otherwise the timeline won't know the video is playing



		// play doesn't start immediately -- need to return a promise so timelineSvc can wait until the video is actually playing
		function play() {
			var defer = $q.defer();
			if ($scope.videoType === 'youtube') {
				youTubePlayerManager.play($scope.videoNode.id);
			} else {
				$scope.videoNode.play();
				if (appState.embedYTPlayerAvailable) {
					youTubePlayerManager.pauseEmbeds();
				}
			}

			var unwatch = $scope.$watch(function () {
				return $scope.playerState;
			}, function (newPlayerState) {
				if (newPlayerState === 'playing') {
					unwatch();
					defer.resolve();
				}
			});


			return defer.promise;
		}

		function pause() {
			if ($scope.videoType === 'youtube') {
				 // in case t has drifted
				youTubePlayerManager.seekTo($scope.videoNode.id, appState.time, true);
				youTubePlayerManager.pause($scope.videoNode.id);
			} else {
				$scope.videoNode.pause();
				try {
					$scope.videoNode.currentTime = appState.time; // in case t has drifted
				} catch (e) {
					// this is harmless when it fails; because it can't be out of synch if it doesn't yet exist
				}
			}
		}

		function startAtTime(t) {
			if ($scope.videoType === 'youtube') {
				var unwatch;
				if (appState.isTouchDevice && appState.hasBeenPlayed === false) {
					// iOS  doesn't init the YT player until after the user has interacted with it, so we can't set the start time now.
					// So we'll cheat, and just wait until we can set the time to do so.  This unfortunately leaves the video at frame 1
					// until the user hits play, which is why we're using a different technique for non-touchscreens below
					unwatch = $scope.$watch(function () {
						return appState.hasBeenPlayed;
					}, function (newState) {
						if (newState) {
							unwatch();
							youTubePlayerManager.seekTo($scope.videoNode.id, t, true);
							//youTubePlayerManager.play($scope.videoNode.id);
						}
					});
				} else {
					// HACK Non-touchscreens:
					// youtube recently started getting very confused if we try to seek before the video is playable.
					// there seems to be no reliable way to tell when it is safe, other than just playing the video and waiting
					// until it actually starts.  SO THAT'S THE CUNNING PLAN
					// Have to mute the audio so it doesn't blip the first few frames of sound in the meanwhile
					$scope.setVolume(0);
					youTubePlayerManager.play($scope.videoNode.id);
					unwatch = $scope.$watch(function () {
						return playerStates[youTubePlayerManager.playerState($scope.videoNode.id)];
					}, function (newPlayerState) {
						if (newPlayerState === 'playing') {
							unwatch();
							youTubePlayerManager.seekTo($scope.videoNode.id, t, true);
							youTubePlayerManager.pause($scope.videoNode.id);
							$scope.setVolume(100);
						}
					});
				}
			} else {
				// native video does not have this problem
				$scope.seek(t, true);
			}
		}

		function seek(t, intentionalStall, defer) {
			// console.log("videoController.seek", t, intentionalStall, defer);
			defer = defer || $q.defer();
			var videoNotReady = false;
			if (intentionalStall) {
				$scope.intentionalStall = true;
				// Keep this flag alive for a while, so we won't interpret user-triggered seeks as poor bandwidth
				$scope.stallGracePeriod = $timeout(function () {
					$scope.intentionalStall = false;
				}, 1500);
			}
			try {
				if ($scope.videoType === 'youtube') {
					var wasPlaying = (appState.timelineState === 'playing');
					youTubePlayerManager.pause($scope.videoNode.id); // pause before seek, otherwise YT keeps yammering on during the buffering phase
					youTubePlayerManager.seekTo($scope.videoNode.id, t, true);
					youTubePlayerManager.pause($scope.videoNode.id); // and pause afterwards too, because YT always autoplays after seek
					if (wasPlaying) {
						youTubePlayerManager.play($scope.videoNode.id);
					}

					defer.resolve();
				} else {
					if ($scope.videoNode.readyState > 1) {
						$scope.videoNode.currentTime = t;
						defer.resolve();
					} else {
						// video is partially loaded but still not seek-ready
						$scope.intentionalStall = false;
						$timeout.cancel($scope.stallGracePeriod);
						videoNotReady = true;
					}
				}
			} catch (e) {
				// console.error("video error", e);
				$scope.intentionalStall = false;
				$timeout.cancel($scope.stallGracePeriod);
				videoNotReady = true;
			}
			if (videoNotReady) {

				// console.log("Video not ready");
				// TODO: throw error and stop looping if this goes on too long.
				// Or be less lazy and watch the loadedmetadata or youtube equivalent event
				$timeout(function () {
					$scope.seek(t, intentionalStall, defer);
				}, 100);
			}
			return defer.promise;
		}

		function setSpeed(speed) {
			// console.log("VIDEO SPEED=", speed);
			if (speed <= 0) {
				// console.error("videoController doesn't handle reverse speeds...");
				return;
			}
			if ($scope.videoType === 'youtube') {
				// TODO (youtube doesn't seem to support this yet, or else we're not encoding the videos properly for it)
				// console.log("Available speeds from youtube: ", _YTPlayer.getAvailablePlaybackRates());
			} else {
				$scope.videoNode.playbackRate = speed;
			}
		}

		function currentTime() {
			if ($scope.videoType === 'youtube') {
				return youTubePlayerManager.getCurrentTime($scope.videoNode.id);
			} else {
				return $scope.videoNode.currentTime;
			}
		}

		function toggleMute() {
			// console.log("toggleMute");
			if ($scope.videoType === 'youtube') {
				if (youTubePlayerManager.isMuted($scope.videoNode.id)) {
					youTubePlayerManager.unMute($scope.videoNode.id);
				} else {
					youTubePlayerManager.mute($scope.videoNode.id);
				}
			} else {
				$scope.videoNode.muted = !($scope.videoNode.muted);
			}
		}

		function setVolume(vol) { // 0..100
			if ($scope.videoType === 'youtube') {
				youTubePlayerManager.setVolume($scope.videoNode.id, vol);
			} else {
				$scope.videoNode.volume = (vol / 100);
			}
		}

		function _destroyMe() {
			//_destroyWatcher();
			$interval.cancel(_babysitter);
			$timeout.cancel($scope.stallGracePeriod);
			timelineSvc.unregisterVideo();
			if ($scope.videoType === 'youtube') {
				if (_YTPlayer) {
					_YTPlayer = undefined;
				}
			} else {
				if ($scope.videoNode) {
					// Overkill, because TS-813
					$scope.videoNode.removeEventListener('playing', _eventListeners.playing);
					$scope.videoNode.removeEventListener('pause', _eventListeners.pause);
					$scope.videoNode.pause();
					$scope.videoNode.src = "";
					$scope.videoNode.remove();
					delete $scope.videoNode;
				}
			}
		}

		$scope.$on('$destroy', _destroyMe);
	}]);

'use strict';

// Controller for the search panel results
angular.module('com.inthetelling.story')
	.controller('SearchPanelController', ["$scope", "$rootScope", "$timeout", "timelineSvc", "modelSvc", "appState", function ($scope, $rootScope, $timeout, timelineSvc, modelSvc, appState) {

		// Events searchableText is:
		// (event.display_annotation || event.display_description) + " " + (event.display_title || event.display_annotator)

		// default sort order
		$scope.sortBy = "startTime";

		$scope.toggleSortBy = function (sortedBy) {
			$scope.sortBy = getFlippedSortValue(sortedBy);
			appState.autoscroll = ($scope.sortBy === 'startTime'); // autoscroll only when sorted by time
		};

		$scope.getToggledValue = function (currentSortBy) {
			return getFlippedSortValue(currentSortBy);
		};

		var getFlippedSortValue = function (current) {
			if (current === "startTime") {
				return "type";
			} else {
				return "startTime";
			}
		};

		$scope.getFriendlySortText = function (sortBy) {
			if (sortBy === "startTime") {
				return "time";
			} else {
				return "type";
			}
		};

		// generate searchable text for the episode (on demand).
		// TODO need to handle multi-episode timelines.

		$scope.indexed = false;

		$scope.indexEvents = function () {
			if (!$scope.episode.items) {
				$timeout(function () { // HACK Sorry, future me
					$scope.indexEvents();
				}, 300);
				return false;
			}
			$scope.indexed = true;
			// map the increasingly-misnamed producerItemType to search categories.
			// Array so we can control sort order in panel.
			$scope.typeCategories = [
				"transcript", "annotation", "file", "image", "link", "video", "question", "other"
			];

			// map type literals to pretty/printable version. 
			$scope.showTypes = {
				transcript: {
					name: "Transcript",
					items: []
				},
				annotation: {
					name: "Annotations",
					items: []
				},
				file: {
					name: "Files",
					items: []
				},
				image: {
					name: "Images",
					items: []
				},
				link: {
					name: "Links",
					items: []
				},
				video: {
					name: "Videos",
					items: []
				},
				question: {
					name: "Questions",
					items: []
				},
				other: {
					name: "Other",
					items: []
				}
			};

			var padDigits = function (number, digits) {
				return new Array(Math.max(digits - String(parseInt(number, 10)).length + 1, 0)).join(0) + number;
			};

			angular.forEach($scope.episode.items, function (item) {
				// Chrome has decided to sort these alphabetically instead of numerically...
				item.wtfchromesort = padDigits(item.start_time, 5);

				// include cosmetic items only in producer:
				if (appState.product !== 'producer' && item.cosmetic) {
					return;
				}
				if (item._type === 'Scene') {
					return;
				}

				// build 'by type' arrays:
				if (item.producerItemType && $scope.showTypes[item.producerItemType]) {
					$scope.showTypes[item.producerItemType].items.push(item);
				} else {
					$scope.showTypes.other.items.push(item);
				}

				// control whether annotations are shown header-style:
				if (item.producerItemType === 'annotation') {
					// HACK template url dependency
					item.showAsHeader = !(item.templateUrl.match(/(transmedia|definition)/));
				}
			});
		};

		$rootScope.$on('searchReindexNeeded', $scope.indexEvents); // HACK

	}]);

/**
 * Created by githop on 6/13/16.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.controller('NarrativeCtrl', NarrativeCtrl);

	function NarrativeCtrl($scope, narrativeResolve) {
		$scope.narrativeResolve = narrativeResolve.n;
		$scope.customersResolve = narrativeResolve.c;
	}
	NarrativeCtrl.$inject = ["$scope", "narrativeResolve"];

})();


/**
 * Created by githop on 6/14/16.
 */

/**
 * Created by githop on 6/13/16.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.controller('NarrativesCtrl', NarrativesCtrl);

	function NarrativesCtrl($scope, narrativesResolve) {
		$scope.narrativesResolve = narrativesResolve.n;
		$scope.customersResolve = narrativesResolve.c;
	}
	NarrativesCtrl.$inject = ["$scope", "narrativesResolve"];


})();


'use strict';

angular.module('com.inthetelling.story')
	.controller('EditController', ["$q", "$scope", "$rootScope", "$timeout", "$window", "appState", "dataSvc", "modelSvc", "timelineSvc", function ($q, $scope, $rootScope, $timeout, $window, appState, dataSvc, modelSvc, timelineSvc) {
		$scope.uneditedScene = angular.copy($scope.item); // to help with diff of original scenes

		// HACK assetType below is optional, only needed when there is more than one asset to manage for a single object (for now, episode poster + master asset)
		// Poor encapsulation of the upload controls. Sorry about that.

		$scope.chooseAsset = function (assetType) {
			assetType = assetType || '';
			$scope.showAssetPicker = true;
			$scope.w1 = $rootScope.$on('UserSelectedAsset', function (e, id) {
				if (assetType === 'Poster') {
					$scope.attachPosterAsset(id); // in ittEpisodeEditor
				} else {
					$scope.attachChosenAsset(id); // in ittItemEditor or ittEpisodeEditor
				}
				$scope["showUploadButtons" + assetType] = false;
				$scope.endChooseAsset();
			});
			$scope.w2 = $rootScope.$on('userKeypress.ESC', $scope.endChooseAsset);
		};
		$scope.endChooseAsset = function () {
			$scope.w1();
			$scope.w2();
			$scope.showAssetPicker = false;
		};

		$scope.toggleUpload = function (assetType) {
			assetType = assetType || '';
			$scope["showUploadField" + assetType] = !$scope["showUploadField" + assetType];
		};

		$scope.addDistractor = function () {
			$scope.item.data._plugin.distractors.push({
				text: "",
				index: ($scope.item.data._plugin.distractors.length + 1)
			});
		};

		var isOnExistingSceneStart = function (time) {
			angular.forEach(getScenes(), function (scene) {
				if (scene.start_time === time) {
					return true;
				}
			});
			return false;
		};

		$scope.addEvent = function (producerItemType) {
			console.warn('add event called!');
			if (producerItemType === 'scene') {
				if (isOnExistingSceneStart(appState.time)) {
					return $scope.editCurrentScene();
				}
			}
			// console.log("itemEditController.addEvent");
			var newEvent = generateEmptyItem(producerItemType);
			newEvent.cur_episode_id = appState.episodeId;
			newEvent.episode_id = appState.episodeId;
			if (appState.user && appState.user.avatar_id) {
				newEvent.avatar_id = appState.user.avatar_id;
			}
			modelSvc.cache("event", newEvent);

			appState.editEvent = modelSvc.events["internal:editing"];
			appState.videoControlsActive = true; // TODO see playerController showControls; this may not be sufficient on touchscreens
			appState.videoControlsLocked = true;

			modelSvc.resolveEpisodeEvents(appState.episodeId);
			timelineSvc.injectEvents([modelSvc.events["internal:editing"]]);
			if (producerItemType === 'scene') {
				timelineSvc.updateSceneTimes(appState.episodeId);
			}
			$rootScope.$emit('searchReindexNeeded'); // HACK
		};

		var isTranscript = function (item) {
			if (item._type === 'Annotation' && item.templateUrl.match(/transcript/)) {
				return true;
			} else {
				return false;
			}
		};

		var getTranscriptItems = function () {
			var episode = modelSvc.episodes[appState.episodeId];
			var allItems = angular.copy(episode.items);
			return allItems.filter(isTranscript);
		};
		var getItemIndex = function (items, item) {
			var centerIndex = 0;
			for (var i = 0, len = items.length; i < len; i++) {
				if (items[i]._id === item._id) {
					centerIndex = i;
					break;
				}
			}
			return centerIndex;
		};
		var filterToItemBefore = function (items, centerItem) {
			items = items.sort(sortByStartTime);
			var centerIndex = getItemIndex(items, centerItem);
			var itemBefore = [];
			if (centerIndex === 0) {
				return itemBefore;
			} else {
				if (centerIndex < items.length - 1) {
					if (centerIndex >= 1) {
						if (!isInternal(items[centerIndex - 1])) {
							itemBefore.push(items[centerIndex - 1]);
						}
					}
				}
			}
			return itemBefore;
		};

		var filterToBookends = function (items, centerItem) {
			items = items.sort(sortByStartTime);
			var centerIndex = getItemIndex(items, centerItem);
			var itemsBeforeAndAfter = [];

			if (centerIndex === 0) {
				if (centerIndex < items.length - 1) {
					if (!isInternal(items[centerIndex + 1])) {
						itemsBeforeAndAfter.push(items[centerIndex + 1]);
					}
				}
			} else {
				if (centerIndex < items.length - 1) {
					if (!isInternal(items[centerIndex + 1])) {
						itemsBeforeAndAfter.push(items[centerIndex + 1]);
					}
					if (centerIndex >= 1) {
						if (!isInternal(items[centerIndex - 1])) {
							itemsBeforeAndAfter.push(items[centerIndex - 1]);
						}
					}
				}
			}
			return itemsBeforeAndAfter;
		};

		// Editing some events has side effects on other events; this stores those side effects.
		// assuming that this is called after a resolve and that we are dealing with events that have been adjusted already
		var saveAdjustedEvents = function (item, operation, original) {
			if (isTranscript(item)) {
				var itemsToSave = [];
				var transcriptItems = getTranscriptItems();
				switch (operation) {
				case "create":
					itemsToSave = filterToBookends(transcriptItems, item);
					console.log('adjust for create');
					break;
				case "delete":
					itemsToSave = filterToItemBefore(transcriptItems, item);
					console.log('adjust for delete');
					break;
				case "update":
					// TODO this should be updating the adjusted events, not delete-and-create.
					if (original) {
						saveAdjustedEvents(original, "delete");
					}
					saveAdjustedEvents(item, "create");
					console.log('adjust for update');
					break;
				}
				angular.forEach(itemsToSave, function (item) {
					dataSvc.storeItem(item)
						.then(function () {
							console.log('updated transcript item', item);
						}, function (data) {
							console.error("FAILED TO STORE EVENT", data);
						});
				});
			}
		};

		$scope.saveEvent = function () {
			var toSave = angular.copy(appState.editEvent);
			$scope.blockDoubleClicks = true;
			//assign current episode_id
			toSave.cur_episode_id = appState.episodeId;
			if (toSave._type === 'Scene') {
				var adjusted = adjustScenes(toSave);
				angular.forEach(adjusted, function (scene) {
					dataSvc.storeItem(scene)
						.then(function () {
							// console.log("scene end_time updated");
						}, function (data) {
							console.error("FAILED TO STORE EVENT", data);
						});
				});
			}

			console.log("saving this thing: ", appState.editEvent);

			dataSvc.storeItem(toSave)
				.then(function (data) {
					data.cur_episode_id = appState.episodeId;
					if (appState.editEvent._id === 'internal:editing') {
						// update the new item with its real ID (and remove the temp version)
						timelineSvc.removeEvent("internal:editing");
						delete(modelSvc.events["internal:editing"]);
						modelSvc.cache("event", dataSvc.resolveIDs(data));
						modelSvc.resolveEpisodeEvents(appState.episodeId);
						timelineSvc.injectEvents([modelSvc.events[data._id]]);
						saveAdjustedEvents(data, "create");
					} else {
						modelSvc.resolveEpisodeEvents(appState.episodeId);
						timelineSvc.updateEventTimes(modelSvc.events[data._id]);
						saveAdjustedEvents(data, "update"); //TODO: send in the original (pre-move) event as last param
					}

					// Delete attached asset(s)  (this should only occur for sxs items, for now)
					// yes we could combine these into one call I suppose but there will almost always only be one
					// unless the user was very indecisive and uploaded/detached a bunch of assets to the same event.
					// It was probably already a premature optimization to use an array here in the first place
					angular.forEach(toSave.removedAssets, function (id) {
						dataSvc.deleteAsset(id);
					});
					appState.editEvent = false;
					$rootScope.$emit('searchReindexNeeded'); // HACK
				}, function (data) {
					console.error("FAILED TO STORE EVENT", data);
				});
		};

		var getScenes = function () {
			return modelSvc.episodes[appState.episodeId].scenes;
		};

		var isInternal = function (item) {
			return (item._id && item._id.match(/internal/));
		};

		$scope.getItemsAfter = function (items, after) {
			var itemsAfter = [];
			for (var i = 0, len = items.length; i < len; i++) {
				if (!isInternal(items[i])) {
					if (after < items[i].start_time || after < items[i].end_time) {
						itemsAfter.push(items[i]);
					}
				}
			}
			return itemsAfter;
		};

		$scope.saveEpisode = function () {
			var toSave = angular.copy(appState.editEpisode);

			dataSvc.storeEpisode(toSave)
				.then(function (data) {
					modelSvc.cache("episode", dataSvc.resolveIDs(data));
					if (appState.editEpisode._master_asset_was_changed) {
						delete modelSvc.episodes[data._id]._master_asset_was_changed; // probably unnecessary
						var duration = modelSvc.assets[data.master_asset_id].duration;
						var endTime = duration - 0.01;
						modelSvc.episodes[appState.episodeId].masterAsset = modelSvc.assets[$scope.episode.master_asset_id];
						modelSvc.episodes[appState.episodeId].master_asset_id = data.master_asset_id;

						/*
						iterate through episode.scenes.
							if start time > duration, delete the scene.
							if end time > duration, set end time to duration.
						iterate through episode.items.
							if start or end time > duration, set to duration.

						update ending scene
						resolveEpisode and resolveEpisodeEvents

						*/
						var modifiedEvents = [];
						var deletedScenes = [];

						var episode = modelSvc.episodes[toSave._id];
						angular.forEach(episode.scenes, function (scene) {

							if (scene.start_time > duration) {
								deletedScenes.push(scene);
							} else if (scene.end_time > duration) {
								scene.end_time = endTime;
								modifiedEvents.push(scene);
							}
						});
						angular.forEach(episode.items, function (item) {
							if (item.start_time > duration) {
								item.start_time = endTime;
							}
							if (item.end_time > duration) {
								item.end_time = endTime;
							}
							modifiedEvents.push(item);
						});

						var endingScene = modelSvc.events["internal:endingscreen:" + toSave._id];
						if (endingScene) { // if episode was shortened, this might have been one that was deleted
							endingScene.start_time = endTime;
							endingScene.end_time = endTime;
						} else {
							modelSvc.addEndingScreen(toSave._id);
						}

						modelSvc.resolveEpisodeEvents(appState.episodeId);
						// modelSvc.resolveEpisodeContainers(appState.episodeId); // only needed for navigation_depth changes
						modelSvc.resolveEpisodeAssets(appState.episodeId); // TODO I suspect this is unnecessary...
						appState.duration = duration;
						appState.editEpisode = false;
						appState.videoControlsLocked = false;
						timelineSvc.init(appState.episodeId);

						// push each of modifiedEvents to server (TODO combine these into one call!)
						angular.forEach(modifiedEvents, function (event) {
							if (event._id.indexOf('internal') < 0) {
								dataSvc.storeItem(event);
							}
						});
						// ditto for orphaned scenes
						angular.forEach(deletedScenes, function (scene) {
							if (scene._id.indexOf('internal') < 0) {
								dataSvc.deleteItem(scene._id);
							}
						});

						// HACK HACK HACK super brute force -- something is going screwy with the timeline and video here,
						// especially when we switch from youtube to native or vv.  Force it with a full reload.
						// (Note this makes a lot of the above re-init code redundant, but I'm hopeful I'll someday have time to fix this prOH HA HA HA I COULDNT SAY IT WITH A STRAIGHT FACE)
						$timeout(function () {
							$window.location.reload();
						}, 500);

					} else {
						// modelSvc.resolveEpisodeContainers(appState.episodeId); // only needed for navigation_depth changes
						modelSvc.resolveEpisodeEvents(appState.episodeId);
						modelSvc.resolveEpisodeAssets(appState.episodeId);
						appState.editEpisode = false;
						appState.videoControlsLocked = false;

					}
				}, function (data) {
					console.error("FAILED TO STORE EPISODE", data);
				});
		};

		var resetScenes = function (updatedScenes, originalScene) {
			for (var i = 0; i < updatedScenes.length; i++) {
				if (typeof (updatedScenes[i]._id) === 'undefined' || updatedScenes[i]._id === 'internal:editing') {
					updatedScenes.splice(i, 1);
					break;
				}
				if (originalScene) {
					if (updatedScenes[i]._id === originalScene._id) {
						updatedScenes[i] = originalScene;
						break;
					}
				}
			}
			return updatedScenes;
		};

		var fixEndTimes = function (scenes, duration) {
			for (var i = 1, len = scenes.length; i < len; i++) {
				if (i === len - 1) {
					scenes[i].end_time = duration;
				} else {
					if (scenes[i].end_time !== scenes[i + 1].start_time) {
						scenes[i].end_time = scenes[i + 1].start_time;
					}
				}
			}
		};
		var pushScene = function (scenes, scene) {
			var exists = false;
			for (var i = 0, len = scenes.length; i < len; i++) {
				if (scenes[i]._id === scene._id) {
					exists = true;
					//do nothing, as already exists
					break;
				}
			}
			if (!exists) {
				scenes.push(scene);
			}
		};
		var removeScene = function (scenes, id) {
			for (var i = 0, len = scenes.length; i < len; i++) {
				if (scenes[i]._id === id) {
					scenes.splice(i, 1);
					break;
				}
			}
		};
		var sortByStartTime = function (a, b) {
			return a.start_time - b.start_time;
		};

		var adjustScenes = function (modifiedScene, isDelete) {
			var duration = appState.duration;
			var scenes = angular.copy(getScenes());
			var adjusted = [];
			// get scenes back into original state (before editing,adding,deleting)
			if (isDelete) {
				pushScene(scenes, $scope.uneditedScene);
			} else {
				resetScenes(scenes, $scope.uneditedScene);
			}
			scenes = scenes.sort(sortByStartTime);
			fixEndTimes(scenes, duration);

			// now scenes is back to pre edit state.  let's drop in our new scene and then see what is impacted (and needs updating)
			removeScene(scenes, modifiedScene._id);
			if (!isDelete) {
				scenes.push(modifiedScene);
			}
			scenes = scenes.sort(sortByStartTime);
			for (var i = 1, len = scenes.length; i < len; i++) {
				if (i === len - 1) {
					if (scenes[i].end_time !== duration) {
						scenes[i].end_time = duration;
						adjusted.push(scenes[i]);
					}
				} else {
					if (scenes[i].end_time !== scenes[i + 1].start_time) {
						scenes[i].end_time = scenes[i + 1].start_time;
						adjusted.push(scenes[i]);
					}
				}

			}
			return adjusted;
		};

		$scope.editCurrentScene = function () {
			angular.forEach(getScenes(), function (scene) {
				if (scene.isCurrent) {
					// TODO This is redundant with ittItem editItem...
					appState.editEvent = modelSvc.events[scene._id];
					appState.editEvent.cur_episode_id = appState.episodeId;
					appState.editEvent.episode_id = appState.episodeId;
					appState.editEvent.producerItemType = 'scene';
					appState.videoControlsActive = true; // TODO see playerController showControls; this may not be sufficient on touchscreens
					appState.videoControlsLocked = true;
				}
			});
		};

		$scope.editEpisode = function () {
			appState.editEpisode = modelSvc.episodes[appState.episodeId];
			appState.videoControlsActive = true; // TODO see playerController showControls; this may not be sufficient on touchscreens
			appState.videoControlsLocked = true;
		};

		$scope.deleteEvent = function (eventId) {
			if (window.confirm("Are you sure you wish to delete this item?")) {
				//fabricate scene event
				var event = {};
				event._id = eventId;
				var eventType = modelSvc.events[eventId]._type;
				if (eventType === 'Scene') {
					var adjusted = adjustScenes(event, true);
					angular.forEach(adjusted, function (scene) {
						dataSvc.storeItem(scene)
							.then(function () {
								// console.log("scene end_time updated");
							}, function (data) {
								console.error("FAILED TO STORE EVENT", data);
							});
					});
				}

				dataSvc.deleteItem(eventId)
					.then(function () {
						if (appState.product === 'sxs' && modelSvc.events[eventId].asset) {
							dataSvc.deleteAsset(modelSvc.events[eventId].asset._id);
						}
						timelineSvc.removeEvent(eventId);
						delete modelSvc.events[eventId];
						modelSvc.resolveEpisodeEvents(appState.episodeId);

						if (eventType === 'Scene') {
							timelineSvc.updateSceneTimes(appState.episodeId);
						}
						saveAdjustedEvents(event, "delete");
						appState.editEvent = false;
						appState.videoControlsLocked = false;
					}, function (data) {
						console.warn("failed to delete:", data);
					});
			}
		};

		$scope.cancelEventEdit = function (originalEvent) {
			var episodeId = originalEvent.cur_episode_id ? originalEvent.cur_episode_id : originalEvent.episode_id;
			if (appState.editEvent._id === 'internal:editing') {
				delete(modelSvc.events['internal:editing']);
				timelineSvc.removeEvent("internal:editing");
			} else {
				modelSvc.events[appState.editEvent._id] = originalEvent;
			}
			modelSvc.resolveEpisodeEvents(episodeId);

			if (originalEvent._type === 'Scene') {
				timelineSvc.updateSceneTimes(episodeId);
			} else {
				timelineSvc.updateEventTimes(originalEvent);
			}

			appState.editEvent = false;
			appState.videoControlsLocked = false;
		};

		$scope.cancelEpisodeEdit = function (originalEvent) {

			modelSvc.episodes[appState.episodeId] = originalEvent;

			modelSvc.deriveEpisode(modelSvc.episodes[originalEvent._id]);
			modelSvc.resolveEpisodeContainers(originalEvent._id); // only needed for navigation_depth changes
			modelSvc.resolveEpisodeEvents(originalEvent._id); // needed for template or style changes
			// console.log("Episode StyleCss is now ", modelSvc.episodes[originalEvent._id].styleCss);
			appState.editEpisode = false;
			appState.videoControlsLocked = false;
		};

		var generateEmptyItem = function (type) {
			var base = {
				"_id": "internal:editing",
				"start_time": appState.time,
				"episode_id": appState.episodeId,
				// "type": type,  <-- NOPE that's a bug.  Confusing, so I'm leaving in this comment:  API types are Plugin, Scene, Upload, Link; these producer item types are different
				"isCurrent": true,
				"producerItemType": type,
				"layouts": ["inline"],
				"styles": []
			};
			/*
			Item types:

			producer only
				scene
				transcript
				annotation

			sxs only
				comment

			sxs and producer
				image
				file
				link
				question
				video (injected episode) TODO
			*/

			var stub = {};
			if (type === 'scene') {
				stub = {
					"_type": "Scene",
					"title": {},
					"description": {}
				};
			}
			if (type === 'video') {
				// TODO: this should be an injected episode with the linked/uploaded video as its master asset.
				// For now we're faking it as a link item.
				stub = {
					"_type": "Link",
					"link_image_id": "",
					"url": "",
					"title": {},
					"description": {}
				};
			}

			if (type === 'comment' || type === 'transcript' || type === 'annotation') {
				stub = {
					"_type": "Annotation",
					"annotation": {},
					"annotator": {},
					"annotation_image_id": ""
				};
			}

			if (type === 'file' || type === 'image') {
				stub = {
					"_type": "Upload",
					"asset_id": "",
					"title": {},
					"description": {}
				};
			}

			if (type === 'link') {
				stub = {
					"_type": "Link",
					"link_image_id": "",
					"url": "https://",
					"title": {},
					"description": {}
				};
			}

			if (type === 'question') {
				// TODO i18n
				stub = {
					"_type": "Plugin",
					"title": {},
					"data": {
						"_pluginType": "question",
						"_version": 2,
						"_plugin": {
							"questiontext": "",
							"questiontype": "mc-formative",
							"distractors": [{
								"index": 1,
								"text": ""
							}, {
								"index": 2,
								"text": ""
							}, {
								"index": 3,
								"text": ""
							}, {
								"index": 4,
								"text": ""
							}],
							"correctfeedback": "",
							"incorrectfeedback": ""
						}
					}
				};
				stub.plugin = stub.data._plugin;
			}

			if (appState.product === 'sxs') {
				// SxS overrides a lot of the item options:
				stub.sxs = true; // temporary?
				stub.annotator = {
					en: appState.user.name
				};
				stub.layouts = ["windowFg"];
				stub.end_time = appState.time;
				stub.stop = true;
				stub.templateUrl = 'templates/item/sxs-' + type + '.html';
			} else {
				var defaultTemplateUrls = {
					"scene": "templates/scene/1col.html",
					"transcript": "templates/item/transcript.html",
					"annotation": "templates/item/pullquote-noattrib.html",
					"link": "templates/item/link.html",
					"image": "templates/item/image-plain.html",
					"file": "templates/item/file.html",
					"question": "templates/item/question-mc.html",
					"video": "TODO:VIDEO"
				};
				stub.templateUrl = defaultTemplateUrls[type];
			}
			angular.extend(base, stub);
			return base;
		};

	}]);

'use strict';

angular.module('com.inthetelling.story')
	.controller('EventTestController', ["$scope", "$routeParams", "mockSvc", "modelSvc", "appState", function ($scope, $routeParams, mockSvc, modelSvc, appState) {
		console.log('EventTestContrller');

		mockSvc.mockEpisode("ep1");
		appState.episodeId = "ep1";

		appState.product = 'producer';
		appState.lang = "en";

		// $scope.itemId = $routeParams["eventId"];

		$scope.item = modelSvc.events[$routeParams.eventId];

		console.log(modelSvc);

	}]);

'use strict';

/* 
No UI for this directive. This originally showed a login form but that led to a flash-of-content when authenticating via lti

*/
angular.module('com.inthetelling.story')
	.directive('ittLogin', ["$location", "$routeParams", "config", "authSvc", "appState", "errorSvc", function ($location, $routeParams, config, authSvc, appState, errorSvc) {
		return {
			restrict: 'A',
			replace: false,

			link: function (scope) {

				scope.userHasRole = authSvc.userHasRole;

				scope.appState = appState;
				scope.loginForm = {
					auth_key: '',
					password: ''
				};

				scope.apiDataBaseUrl = config.apiDataBaseUrl;

				authSvc.authenticate().then(function () {
						errorSvc.init();
						if ($routeParams.key) {
							// (Probably unnecessary here, but testing to see if this fixes the unintended redirect from /#/auth)
							$location.search('key', null); // hide the param from the url.  reloadOnSearch must be turned off in $routeProvider!
						}
						if ($routeParams.episode) {
							var epId = $routeParams.episode;
							$location.search('episode', null);
							$location.search('nonce', null);
							$location.path('/episode/' + epId);
						} else if ($routeParams.narrative) {
							var narrId = $routeParams.narrative;
							$location.search('narrative', null);
							$location.search('nonce', null);
							if ($routeParams.timeline) {
								var timelineId = $routeParams.timeline;
								$location.search('timeline', null);
								$location.path('/story/' + narrId + '/' + timelineId);
							} else {
								$location.path('/story/' + narrId);
							}

						} else if (Object.keys($routeParams).length === 0) {
							$location.path('/user');

						}
					},
					function () {
						console.log("Login failed...");
					});

				// for admin logins only, for now. In future maybe oauth-based login will route through here too
				scope.adminLogin = function () {
					authSvc.adminLogin(scope.loginForm.auth_key, scope.loginForm.password).then(function () {}, function (data) {
						console.warn("FAILED ADMIN LOGIN", data);
						scope.badlogin = true;
					});
				};

				scope.logout = function () {
					authSvc.logout();
				};

			}
		};

	}]);

'use strict';
// attach to any directive to make its first input/textarea autofocus

angular.module('com.inthetelling.story')
	.directive('autofocus', ["$timeout", function ($timeout) {
		return {
			link: function (scope, element) {
				$timeout(function () { // give any child directives time to render themselves...
					if (element[0].tagName === 'TEXTAREA' || element[0].tagName === 'INPUT') {
						element[0].focus();
					} else {
						element.find('input,textarea')[0].focus();
					}
				});
			}
		};
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittMcQuestion', ["questionAnswersSvc", "analyticsSvc", "appState", function (questionAnswersSvc, analyticsSvc, appState) {
		return {
			restrict: 'E',
			replace: false,
			scope: {
				plugin: '=data',
				qid: '=',
				choices: '=',
				correct: '=',
				onChoice: '=',
				questionType: '@',
				showChart: '='
			},
			templateUrl: "templates/item/question-mc-inner.html",
			link: function (scope) {

				scope.scoreQuiz = function (i) {
					scope.plugin.distractors[i].selected = true;
					scope.plugin.hasBeenAnswered = true;
					scope.plugin.selectedDistractor = scope.plugin.distractors[i].index;
					analyticsSvc.captureEventActivity("question-answered", scope.qid, {
						'answer': scope.plugin.distractors[i].text,
						'index': scope.plugin.distractors[i].index,
						'correct': !!(scope.plugin.distractors[i].correct)
					});
				};

				scope.feedback = function () {
					for (var i = 0; i < scope.plugin.distractors.length; i++) {
						if (scope.plugin.distractors[i].index === scope.plugin.selectedDistractor) {
							return (scope.plugin.distractors[i].correct) ? scope.plugin.correctfeedback : scope.plugin.incorrectfeedback;
						}
					}
				};

				scope.questionType = scope.plugin.questiontype;

				// NOT YET SUPPORTED IN ittFlotChart:
				scope.chartOptions = {}; // moving default chartOptions into ittFlotChart; use this to override.

				var formatAnswersForFlotPieChart = function (grouped) {
					// console.log("Formatting ", grouped, " for ", scope.plugin);
					var chartData = [];
					for (var answerIndex in grouped) {
						if (grouped.hasOwnProperty(answerIndex)) {
							// translate the index into the answer text
							angular.forEach(scope.plugin.distractors, function (distractor) {
								if (distractor.index + "" === answerIndex + "") {
									var label = distractor.text;
									if (typeof (label) === 'object') {
										label = label[appState.lang] || label.en || "";
									}
									chartData.push({
										data: grouped[answerIndex],
										label: label
									});
								}
							});
						}
					}
					return chartData;
				};

				if (scope.plugin.hasBeenAnswered === true) {

					/*
					answer_counts is included in event data as {
						index: count,
						index: count
					}
					*/
					if (typeof scope.plugin.answer_counts === 'undefined') {
						// This is in case of failure on the API side to return answer_counts (which shouldn't happen):
						console.error("No answer_counts returned from API");
						scope.plugin.answer_counts = {};
					}

					var grouped = scope.plugin.answer_counts;
					var chartData = formatAnswersForFlotPieChart(grouped);
					scope.chartData = chartData;
				}

				scope.scorePoll = function (i) {
					console.log("scorePoll");
					questionAnswersSvc.saveAnswer("question-answered", scope.qid, {
							'answer': scope.plugin.distractors[i].text,
							'index': scope.plugin.distractors[i].index,
							'correct': !!(scope.plugin.distractors[i].correct)
						})
						.then(function () {
							scope.plugin.answer_counts = (typeof scope.plugin.answer_counts === 'undefined') ? {} : scope.plugin.answer_counts;
							questionAnswersSvc.incrementAnswerCount(scope.plugin.answer_counts, scope.plugin.distractors[i].index);
							var grouped = scope.plugin.answer_counts;
							var chartData = formatAnswersForFlotPieChart(grouped);
							scope.chartData = chartData;
							scope.plugin.distractors[i].selected = true;
							scope.plugin.hasBeenAnswered = true;
							scope.plugin.selectedDistractor = scope.plugin.distractors[i].index;
							//});
						});

				};

			}

		};
	}]);

'use strict';

// an angular.js wrapper for flot charting library -http://www.flotcharts.org/ but using flot.pie.js
angular.module('com.inthetelling.story')
	.directive('ittFlotr2Chart', function () {
		var uniqueId = 1;
		return {
			restrict: 'E',
			scope: {
				type: '@',
				height: '@',
				width: '@',
				title: '=title', //title is separate from options, but we may not want this as i'm not sure ALL charts have a title (or just one)
				options: '@',
				data: '@'
			},
			template: '<div class="flotContainer"><div class="chartContainer" id="chartContainer" aria-label="{{chartLabel}}"></div><div class="legendContainer" id="legendContainer"></div></div>',
			link: function (scope, element, attrs) {

				var draw = function (el, d, o) {
					scope.chartLabel = createLabel(d);
					$.plot(el, d, o);
					el.show();
				};

				var chartContainer = $("#chartContainer");
				chartContainer.attr("id", "chartContainer" + uniqueId);
				var legendContainer = $("#legendContainer");
				legendContainer.attr("id", "legendContainer" + uniqueId++);

				var legendFormatterFn = function (label, series) {
					return Math.round(series.percent) + '% (' + series.data[0][1] + '): ' + label;
				};
				var labelFormatterFn = function (label, series) {
					return '<div style="padding: 3px; font-size: 80%">' + Math.round(series.percent) + '%</div>';
				};

				// defaults
				scope.chartOptions = {
					series: {
						pie: {
							show: true,
							label: {
								show: true,
								background: {
									opacity: 0.7
								},
								formatter: labelFormatterFn
							}
						}
					},
					legend: {
						show: true,
						labelFormatter: legendFormatterFn,
						//labelBoxBorderColor: color
						noColumns: 1,
						position: "sw", // or "nw" or "ne" or "sw"   
						margin: 0, //number of pixels or [x margin, y margin]
						backgroundColor: null, // or color
						backgroundOpacity: 1, // number between 0 and 1
						sorted: 'descending', // null/false, true, "ascending", "descending", "reverse", or a comparator
						container: legendContainer // or jQuery object/DOM element/jQuery expression        
					},

					grid: {
						hoverable: true
					},
					tooltip: true,
					tooltipOpts: {
						content: "%y.0, %s", // show percentages, rounding to 2 decimal places
						shifts: {
							x: 20,
							y: 0
						},
						defaultTheme: false
					}
				};

				//  TODO merge scope.options into chartOptions
				// if (scope.options) {
				// 	 var newOptions = JSON.parse(scope.options);
				// }

				// watch width for both init and for resize:
				scope.$watch(function () {
					return chartContainer.width();
				}, function (w) {
					if (w > 0) {
						chartContainer.css({
							height: w
						});
						draw(chartContainer, JSON.parse(scope.data), scope.chartOptions);

						// Now that we have a height we can safely observe changes in the data:
						scope.observeData = attrs.$observe('data', function (value) {
							scope.data = JSON.parse(value);
							draw(chartContainer, scope.data, scope.chartOptions);
						});
						scope.$on('$destroy', scope.observeData);

						// Options never change (for now) so disabling the watcher
						// attrs.$observe('options', function (value) {
						// 	scope.options = value;
						// 	draw(chartContainer, scope.data, scope.options);
						// });

					}
				});

				var addPercent = function (data) {
					var total = 0;
					for (var i = 0; i < data.length; i++) {
						total += data[i].data;
					}
					for (var y = 0; y < data.length; y++) {
						data[y].percent = (data[y].data / total) * 100;
					}
					return data;
				};
				var createLabel = function (data) {
					var labelText = "";
					data = addPercent(data);
					for (var i = 0; i < data.length; i++) {
						labelText += Math.round(data[i].percent) + "% of users totaling " + data[i].data + " choose \'" + data[i].label + "\'. ";
					}
					return labelText;
				};
			}
		};
	});

'use strict';

// jQuery dependencies: offset(), animate(), namespaced .bind and .unbind 
// TODO some events need to be unbound on destroy, which I'll get around to implementing if this ever needs to be destroyed
// TODO for now simply hiding volume controls on touchscreen devices (they'll use native buttons). Future, see if we can include those and have them work properly...

angular.module('com.inthetelling.story')
	.directive('ittTimeline', ["$rootScope", "$timeout", "appState", "timelineSvc", "modelSvc", function ($rootScope, $timeout, appState, timelineSvc, modelSvc) {
		return {
			restrict: 'A',
			replace: true,
			scope: true,
			templateUrl: "templates/timeline-story.html",
			controller: "TimelineController",
			link: function (scope, element) {
				// console.log('ittTimeline', scope, element);
				scope.appState = appState;
				scope.timeline = timelineSvc;
				scope.handlePosition = 0; // position of draghandle (as a fraction of full timeline)
				scope.zoomLevel = 1; // multiples by which the timeline is zoomed in
				scope.zoomOffset = 0; // multiple by which the timeline is offset to the left

				// Prevent this from being visible on touchscreens before playback, to allow youtube to init from direct user input
				if (appState.isTouchDevice && !appState.hasBeenPlayed) {
					scope.isSuppressed = true;
				}

				var watch = scope.$watch(function () {
					return appState.hasBeenPlayed;
				}, function (wasPlayed) {
					if (wasPlayed === true) {
						scope.isSuppressed = false;
						watch();
					}
				});

				// these classnames and variable names aren't confusing AT ALL.  Curse you, past Daniel
				var timelineNode, timelineContainer;
				$timeout(function () { // HACK need to wait for template url to resolve before doing element.find
					timelineNode = element.find('.progressbarContainer');
					timelineContainer = element.find('.progressbar');
					initPlayheadEvents();
				});

				// zoom in on item edit:
				scope.autoZoom = function (item) {
					// console.log("autoZoom");

					scope.savedZoomLevel = scope.zoomLevel;
					var itemLength = item.end_time - item.start_time;
					var toEnd = (appState.duration - item.end_time);

					// toEnd/itemLength puts the item end at the right edge of the visible playhead.
					// trim it back by 40% for some wiggle room, and cap it at 2000% zoom so we don't go nuts on short-duration events
					scope.zoomLevel = Math.min(Math.max(Math.round(0.6 * toEnd / itemLength), 1), 20);

					zoom();
				};

				scope.endAutoZoom = function () {
					if (scope.savedZoomLevel) {
						scope.zoomLevel = scope.savedZoomLevel;
						zoom();
						delete scope.savedZoomLevel;
					}
				};

				var editWatcher = scope.$watch(function () {
					return appState.editEvent;
				}, function (item) {
					if (appState.product === 'producer') {
						if (item) {
							scope.autoZoom(item);
						} else {
							scope.endAutoZoom();
						}
					}
				});

				scope.appState = appState;

				scope.setNewLanguage = function () {
					modelSvc.setLanguageStrings();
				};

				scope.showSceneMenuTooltip = function (makeVisible) {
					if (makeVisible && !(appState.isTouchDevice)) {
						scope.sceneMenuToolTip = true;
					} else {
						scope.sceneMenuToolTip = false;
					}
				};

				scope.prevScene = function () {
					// console.log("prevScene");
					timelineSvc.prevScene();
				};
				scope.nextScene = function () {
					// console.log("nextScene");
					timelineSvc.nextScene();
				};

				scope.userChangingVolume = function (evt) {
					if (appState.muted) {
						scope.toggleMute();
					}
					var volumeNode = angular.element(evt.currentTarget);
					var updateVolume = function (movement, noApplyNeeded) {
						var newVolume = (movement.clientX - volumeNode.offset()
							.left) / volumeNode.width() * 100;
						if (newVolume > 98) {
							newVolume = 100;
						}
						if (newVolume < 3) {
							newVolume = 0;
						}
						if (noApplyNeeded) {
							scope.setVolume(newVolume); // mousedown
						} else {
							scope.$apply(scope.setVolume(newVolume)); // mousemove
						}
					};
					updateVolume(evt, true); //mousedown
					volumeNode.bind('mousemove.volume', updateVolume); // mousemove
					angular.element(document)
						.bind('mouseup.volume', function () {
							angular.element(document)
								.unbind('mouseup.volume');
							volumeNode.unbind('mousemove.volume');
						});
				};
				var KeyCodes = {
					PAGEUP: 33,
					PAGEDOWN: 34,
					END: 35,
					HOME: 36,
					LEFTARROW: 37,
					UPARROW: 38,
					RIGHTARROW: 39,
					DOWNARROW: 40
				};

				scope.onVolumeKeyDown = function ($event) {
					var e = $event;
					// var $target = $(e.target);
					// var nextTab;
					var passThrough = true;
					switch (e.keyCode) {
					case KeyCodes.LEFTARROW:
						decrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.RIGHTARROW:
						incrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.UPARROW:
						incrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.DOWNARROW:
						decrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.PAGEUP:
						incrementVolume(10);
						passThrough = false;
						break;
					case KeyCodes.PAGEDOWN:
						decrementVolume(10);
						passThrough = false;
						break;
					case KeyCodes.HOME:
						decrementVolume(100);
						passThrough = false;
						break;
					case KeyCodes.END:
						incrementVolume(100);
						passThrough = false;
						break;
					default:
						passThrough = true;
						break;
					}
					if (!passThrough) {
						// console.log("stop propagation");
						$event.stopPropagation();
						$event.preventDefault();
					}
				};

				function adjustHigh(volume) {
					return volume > 98 ? 100 : volume;
				}

				function adjustLow(volume) {
					return volume < 3 ? 0 : volume;
				}

				function incrementVolume(chunk) {
					var volume = scope.currentVolume() + chunk;
					volume = adjustHigh(volume);
					if (typeof scope.setVolume === "function") {
						scope.setVolume(volume);
					}
				}

				function decrementVolume(chunk) {
					var volume = scope.currentVolume() - chunk;
					volume = adjustLow(volume);
					if (typeof scope.setVolume === "function") {
						scope.setVolume(volume);
					}
				}
				scope.currentVolume = function () {
					if (appState.muted) {
						return 0;
					} else {
						return appState.volume;
					}
				};

				scope.audioIcon = function () {
					if (appState.muted) {
						return "muted";
					} else {
						return "vol" + Math.floor(appState.volume / 34);
					}
				};

				scope.showTooltip = function (event) {
					// console.log("tip: ", event);
					event.showTooltip = true;
				};
				scope.hideTooltip = function (event) {

					event.showTooltip = false;
				};

				scope.zoomIn = function () {
					scope.stopWatching = true;
					scope.zoomLevel = scope.zoomLevel + 1;
					zoom();
				};
				scope.zoomOut = function () {
					scope.stopWatching = true;
					if (scope.zoomLevel <= 2) {
						scope.zoomLevel = 1;
					} else if (scope.zoomLevel <= 3) {
						scope.zoomLevel = 1.5;
					} else {
						scope.zoomLevel = scope.zoomLevel / 2;
					}
					zoom();
				};

				// adjust the position of the playhead after a scale change:
				var zoom = function () {
					scope.zoomOffset = -((scope.zoomLevel - 1) * (appState.time / appState.duration));
					// console.log("zoom().scope.zoomOffset = ", scope.zoomOffset);
					// console.log("zoom().scope.zoomLevel = ", scope.zoomLevel);
					timelineNode.stop().animate({
						"left": (scope.zoomOffset * 100) + "%",
						"width": (scope.zoomLevel * 100) + "%"
					}, 1000, function () {
						scope.stopWatching = false; // so we don't try to update the playhead during a zoom animation
					});
				};

				// at all times keep playhead position at the same % of the visible progress bar as the time is to the duration
				// cosmetic: stop watching while zoom-animation is in progress
				scope.$watch(function () {
					return {
						t: appState.time,
						d: appState.duration,
					};
				}, function () {
					if (!scope.stopWatching) {
						scope.zoomOffset = -((scope.zoomLevel - 1) * (appState.time / appState.duration));
						if (timelineNode) {
							timelineNode.css({
								"left": (scope.zoomOffset * 100) + '%'
							});
						}
					}
				}, true);

				// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
				// BEGIN handling of seek: mouse/touch interactions with the playhead
				// startSeek when they mousedown or touchdown (binds the finish and cancel events)
				// seeking on mousemove or touchmove (sets the time they will be seeking to)
				// finishSeek when they mouseup or touchend inside the playhead (triggers the actual seek)
				// cancelSeek when they mouseup or touchend outside the playhead (cancels)

				var startSeek = function (evt) {
					// console.log('startSeek');
					$timeout(function () {
						// short delay for visibility of handle (don't want it when just clicking)
						scope.seekHandleVisible = true;
					}, 250);
					scope.isSeeking = true;

					var userEventName = (appState.isTouchDevice) ? 'touchend.timeline' : 'mouseup.timeline';
					timelineContainer.bind(userEventName, function () {
						finishSeek();
					});
					angular.element(document)
						.bind(userEventName, function () {
							cancelSeek();
						});
					seeking(evt);
				};

				/* SxS. Needed to position the edit handle when not actively dragging timeline */
				scope.$watch(function () {
					return appState.time;
				}, function () {
					if (appState.editEvent) {
						scope.willSeekTo = appState.time;
					}
				});

				/* end SxS */

				// triggered on mousemove:
				var seeking = function (evt) {
					if (!scope.isSeeking) {
						return;
					}

					// timelineNode is the full timeline, including offscreen portions if zoomed in.
					// So this math gives how far the pointer is in the full timeline as a percentage, 
					// multiplied by the real duration, which gives the real time.
					scope.willSeekTo = (evt.clientX - timelineNode.offset()
						.left) / timelineNode.width() * appState.duration;

					// ios is still registering drags outside the visible boundaries of the timeline, 
					// so need to do some sanity checking here:
					if (scope.willSeekTo < 0) {
						scope.willSeekTo = 0;
					}
					if (scope.willSeekTo > appState.duration) {
						scope.willSeekTo = appState.duration;
					}
				};

				var finishSeek = function () {
					// console.log("timeline mouseup or touchend");
					scope.stopWatching = true;
					scope.enableAutoscroll(); // in playerController
					timelineSvc.seek(scope.willSeekTo, "scrubTimeline");
					zoom();
				};

				var cancelSeek = function () {
					// console.log("doc mouseup or touchend");
					// kill all events on  mouse up (anywhere).
					angular.element(document)
						.off('mouseup.timeline');
					angular.element(document)
						.off('touchend.timeline');
					timelineContainer.off('mouseup.timeline');
					timelineContainer.off('touchend.timeline');
					$timeout(function () {
						scope.isSeeking = false;
						scope.seekHandleVisible = false;
					});
				};

				var initPlayheadEvents = function () {
					// bind playhead events:
					var playhead = $(element.find('.playhead')); // WARN template url needs to have resolved first!
					// console.log("ittTimeline initPlayheadEvents", playhead);
					if (appState.isTouchDevice) {
						playhead.on('touchstart.timeline', function (e) {
							startSeek(e.originalEvent.targetTouches[0]);
							e.preventDefault();
						});
						playhead.on('touchmove.timeline', function (e) {
							seeking(e.originalEvent.targetTouches[0]);
							e.preventDefault();
						});
					} else {
						playhead.on('mousedown.timeline', function (e) {
							startSeek(e);
							e.preventDefault();
						});
						playhead.on('mousemove.timeline', function (e) {
							seeking(e);
							e.preventDefault();
						});
					}
				};

				scope.$on('$destroy', function () {
					cancelSeek(); // unbinds playhead events
					editWatcher(); // stop watching for event edits
				});

			}
		};
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittEpisode', ["$interval", "analyticsSvc", "modelSvc", "appState", function ($interval, analyticsSvc, modelSvc, appState) {
		return {
			restrict: 'A',
			replace: true,
			template: '<span ng-include="episode.templateUrl"></span>',
			controller: 'EpisodeController',

			link: function (scope) {
				 console.log('ittEpisode', scope);
				scope.episode = modelSvc.episodes[appState.episodeId];
				// TODO: this will break if the timeline and the episode timeline don't match.
				// TODO: check whether this gets called if multiple episodes are added to the timeline... I'm thinking probably not....
				analyticsSvc.captureEpisodeActivity("episodeLoad");

				// I did something stupid here wrt scoping, apparently; 'edit episode' causes this scope to refer to a copy of the data rather than back to the modelSvc cache.
				// This is an even stupider but relatively harmless HACK to keep it  pointing at the right data:
				var scopeHack = function () {
					scope.episode = modelSvc.episodes[appState.episodeId];
					appState.playerTemplate = scope.episode.templateUrl;
				};
				$interval(scopeHack, 457);

			},

		};
	}]);

'use strict';

// Minor jquery dependency ($.inArray)

angular.module('com.inthetelling.story')
	.directive('ittScene', ["$timeout", "$interval", "appState", function ($timeout, $interval, appState) {
		return {
			restrict: 'A',
			replace: false,
			scope: {
				scene: '=ittScene',
				episode: '=episode'
			},
			template: '<span ng-include="scene.templateUrl"></span>',
			controller: 'SceneController',
			link: function (scope, element) {
				// console.log('ittScene', scope, element, attrs);

				// force discover and watch modes to not start out scrolled halfway out of view (STORY-161)
				if (appState.viewMode !== 'review') {
					window.scrollTo(0, 0);
				}
				scope.precalculateSceneValues();
				scope.appState = appState;

				// if (scope.scene._id.match(/internal/)) {
				// landing and ending screens get inter-episode nav:
				// scope.containers = modelSvc.containers;
				// scope.crossEpisodePath = appState.crossEpisodePath;
				// }

				var twiddleScene = function () {
					var magnetNode = element.find('.videoMagnet img');
					if (magnetNode.height() === null) {
						// console.warn("twiddleScene called with no visible video magnet; waiting.");
						var unwatchMagnet = scope.$watch(function () {
							// Don't try to optimize by using magnetNode from above; if we got here in the first place magnetNode is undefined.
							// This is an expensive $watch but will only run for a tick or two while the scene is being drawn...
							return element.find('.videoMagnet img').height();
						}, function (newH) {
							if (newH > 0) {
								unwatchMagnet();
								twiddleScene();
							}
						});
					} else {
						element.find('.matchVideoHeight:visible').each(function () {
							$(this).css("height", element.find('.videoMagnet img').height());
						});
						var availableViewportHeight = angular.element(window).height() - $('#CONTAINER').scrollTop(); /* TOOLBAR HEIGHT */
						element.find('.stretchToViewport:visible').each(function () {
							$(this).css("min-height", (availableViewportHeight - $(this).offset().top));
						});
						// landing screen: keep the bottom toolbar onscreen
						element.find('.stretchToViewportShort:visible').each(function () {
							$(this).css("min-height", (availableViewportHeight - $(this).offset().top - 210)); // HARDCODED FOOTER HEIGHT
						});
					}

					element.find('.content').each(function () {
						var contentpane = $(this);
						if (contentpane.outerWidth() > 550) {
							contentpane.addClass('allowSidebars');
						} else {
							contentpane.removeClass('allowSidebars');
						}
					});
				};

				// Trigger twiddleScene when the window changes size, the scene becomes current, or the viewMode changes:
				scope.unwatch = scope.$watch(function () {
					return {
						winWidth: appState.windowWidth,
						winHeight: appState.windowHeight,
						newMode: appState.viewMode
					};
				}, function (the) {
					if (the.newMode === 'discover' && scope.scene.isCurrent) {
						twiddleScene();
					}
				}, true);

				// trigger init when the user edits content:
				scope.unwatchEdits = scope.$watch(function () {
					return appState.editEvent;
				}, scope.precalculateSceneValues, true);

				// HACK to catch cases (mostly on ios) where matchvideoheight isn't matching.
				// slow, odd interval
				scope.safetyBelt = $interval(twiddleScene, 1321);

				// cleanup watchers on destroy
				scope.$on('$destroy', function () {
					scope.unwatch();
					scope.unwatchEdits();
					$interval.cancel(scope.safetyBelt);
				});

			},

		};
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittShowHideVisualOnly', ["$animate", function ($animate) {

		return {
			restrict: 'A',
			multiElement: true,
			link: function (scope, element, attr) {
				scope.$watch(attr.ittShowHideVisualOnly, function ngShowWatchAction(value) {
					if (value) {
						$animate.removeClass(element, 'visual-hide');
					} else {
						$animate.addClass(element, 'visual-hide');
					}
				});
			}
		};
	}]);

angular.module('com.inthetelling.story')
	.animation(".visual-hide", function () {
		return {
			addClass: function (element) {
				//we'll use opacity, so we aren't hidden from screen readers, just hidden from eyes.
				element.fadeTo("slow", 0, function () {});
			},
			removeClass: function (element) {
				element.fadeTo("slow", 1, function () {});
			}
		};
	});

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittShowFocus', ["$timeout", function ($timeout) {
		return function (scope, element, attrs) {
			scope.$watch(attrs.ittShowFocus,
				function (newValue) {
					$timeout(function () {
						/* jshint -W030 */
						newValue && element.filter(':visible')
							.first()
							.focus();
						/* jshint +W030 */
					});
				}, true);

		};
	}]);

/**
 * Created by githop on 12/21/15.
 */

(function(){
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittToolbarStory', ittToolbarStory);

	function ittToolbarStory() {
		return {
			scope: true,
			templateUrl: 'templates/toolbar-story.html'
		};
	}
})();

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittVolumeSlider', ["appState", function (appState) {
		return {
			restrict: 'E',
			scope: true,
			template: '<div ng-focus="showControls()" role="slider" aria-label="volume" aria-valuemin="0" aria-valuemax="100" aria-valuenow="{{currentVolume()}}" aria-valuetext="{{currentVolume()}}" tabindex="0" class="volumebar" ng-mousedown="userChangingVolume($event)" ng-keydown="onVolumeKeyDown($event)" aria-labelledby="volumeControlDescription"> <div class="volume" ng-style="{width: currentVolume()+\'%\'}"></div> <div id="volumeControlDescription" class="screen-reader-offscreen"> Use left and right arrows to increase or decrease the volume by 1. Use page up and page down to increase or decrease the volume by 10. Use home and end to move to the volume to the lowest and highest setting.  </div> ',
			multiElement: false,
			link: function (scope) {

				scope.appState = appState;

				scope.userChangingVolume = function (evt) {
					//					if (appState.muted) {
					//						scope.toggleMute();
					//					}
					var volumeNode = angular.element(evt.currentTarget);
					var updateVolume = function (movement, noApplyNeeded) {
						var newVolume = (movement.clientX - volumeNode.offset()
							.left) / volumeNode.width() * 100;
						if (newVolume > 98) {
							newVolume = 100;
						}
						if (newVolume < 3) {
							newVolume = 0;
						}
						if (noApplyNeeded) {
							scope.setVolume(newVolume); // mousedown
						} else {
							scope.$apply(scope.setVolume(newVolume)); // mousemove
						}
					};
					updateVolume(evt, true); //mousedown
					volumeNode.bind('mousemove.volume', updateVolume); // mousemove
					angular.element(document)
						.bind('mouseup.volume', function () {
							angular.element(document)
								.unbind('mouseup.volume');
							volumeNode.unbind('mousemove.volume');
						});
				};
				var KeyCodes = {
					PAGEUP: 33,
					PAGEDOWN: 34,
					END: 35,
					HOME: 36,
					LEFTARROW: 37,
					UPARROW: 38,
					RIGHTARROW: 39,
					DOWNARROW: 40
				};

				scope.onVolumeKeyDown = function ($event) {
					var e = $event;
					// var $target = $(e.target);
					// var nextTab;
					var passThrough = true;
					switch (e.keyCode) {
					case KeyCodes.LEFTARROW:
						decrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.RIGHTARROW:
						incrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.UPARROW:
						incrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.DOWNARROW:
						decrementVolume(1);
						passThrough = false;
						break;
					case KeyCodes.PAGEUP:
						incrementVolume(10);
						passThrough = false;
						break;
					case KeyCodes.PAGEDOWN:
						decrementVolume(10);
						passThrough = false;
						break;
					case KeyCodes.HOME:
						decrementVolume(100);
						passThrough = false;
						break;
					case KeyCodes.END:
						incrementVolume(100);
						passThrough = false;
						break;
					default:
						passThrough = true;
						break;
					}
					if (!passThrough) {
						$event.stopPropagation();
						$event.preventDefault();
					}
				};

				function adjustHigh(volume) {
					return volume > 98 ? 100 : volume;
				}

				function adjustLow(volume) {
					return volume < 3 ? 0 : volume;
				}

				function incrementVolume(chunk) {
					var volume = scope.currentVolume() + chunk;
					volume = adjustHigh(volume);
					if (typeof scope.setVolume === "function") {
						scope.setVolume(volume);
					}
				}

				function decrementVolume(chunk) {
					var volume = scope.currentVolume() - chunk;
					volume = adjustLow(volume);
					if (typeof scope.setVolume === "function") {
						scope.setVolume(volume);
					}
				}
				scope.currentVolume = function () {
					if (appState.muted) {
						return 0;
					} else {
						return appState.volume;
					}
				};

			}
		};
	}]);

/**
 *
 * Created by githop on 12/8/15.
 */

(function () {
	'use strict';
	/**
	 * @ngdoc directive
	 * @name iTT.directive:ittIframe
	 * @restrict 'E'
	 * @scope
	 * @description
	 * Directive used to display iframed content
	 * @requires appState
	 * @param {String} src The Source URL for the iframe
	 * @param {String=} contenttype The mime type of the iframed content
	 * @param {Object} item The Item object, aka an Event from the Database
	 * @example
	 * <pre>
	 *     <itt-iframe src="<url>" contenttype="text/html" item="<itemObject>"></itt-iframe>
	 * </pre>
	 */
	angular.module('com.inthetelling.story')
		.directive('ittIframe', ittIframe)
		.controller('ittIframeCtrl', ittIframeCtrl);

	function ittIframe(appState) {
		return {
			restrict: 'E',
			scope: {
				src: '@',
				contenttype: '@',
				item: '&'
			},
			replace: true,
			templateUrl: 'templates/iframe.html',
			controller: 'ittIframeCtrl',
			controllerAs: 'iframeCtrl',
			bindToController: true,
			link: linkFn
		};

		function linkFn(scope, elm) {
			var _btnConst = 95;

			var _unWatch = angular.noop;
			var _toolbarH = 75;
			var _timelineBarH = 145;
			var _offsetConst = _toolbarH + _timelineBarH;
			var _modalWrapper = $('.w-modal');
			var _otherModal   = $('.modal');
			var _frameBottom = $(window).height() - _offsetConst;

			if (_otherModal.length > 0 && appState.isTouchDevice) {
				//set dimenions on <iframe>
				scope.iframeCtrl.styles = {'height': _frameBottom + 'px'};
				//set dimensions on iframeContainer div
				elm.css('height', _frameBottom);

				scope.$watch(function() {
					return elm.height();
				}, function(newVal, oldval) {
					if (newVal !== oldval) {
						scope.iframeCtrl.styles = {'height': newVal + 'px'};
						elm.css('height', _frameBottom);
					}
				});
			}
			//search for the 'w-modal" class, if we find one,
			//then we know that we are using windowfg template, which seems to handle modals.
			if (_modalWrapper.length > 0) {
				setIframeHeight();
			} else {
				resizeIframeReviewMode();
			}

			function setIframeHeight() {
				var y = _modalWrapper.height() - _btnConst;
				elm.css('height', y);
				_modalWrapper.css('overflow-y', 'hidden');

				_unWatch =  scope.$watch(function() {
					return _modalWrapper.height();
				}, function(newVal, oldVal) {
					if (newVal !== oldVal) {
						var newY = newVal - _btnConst;
						elm.css('height', newY);
					}
				});
			}

			function resizeIframeReviewMode() {
				//only resize iframe in discover mode for the narrasys pro template (at the moment)
				if (appState.viewMode === 'discover' &&
					appState.playerTemplate === 'templates/episode/narrasys-pro.html' &&
					!appState.isTouchDevice) {
					elm.css('height', _frameBottom);
				}
			}


			scope.$on('$destroy', function() {
				_unWatch();
			});
		}


	}
	ittIframe.$inject = ["appState"];

	function ittIframeCtrl($scope, ittUtils, youtubeSvc, appState) {
		// moved this all back out of the controller to avoid leaking $scope.sandbox across directives
		var _ctrl = this; //jshint ignore:line
		var _sandboxAttrs = 'allow-forms allow-same-origin allow-scripts';
		var _popupsTopWindow = ' allow-top-navigation allow-popups';
		_ctrl.isYoutube = false;
		_ctrl.isLoading = true;
		_ctrl.isTouchDevice = appState.isTouchDevice;


		function validateFrameUrl(url) {
			if (youtubeSvc.isYoutubeUrl(url)) {
				_ctrl.isYoutube = true;
				_ctrl.isLoading = false;
				return true;
			} else if (ittUtils.isValidURL(url)) {
				_ctrl.isLoading = false;
				_ctrl.isYoutube = false;
				return true;
			} else {
				_ctrl.isLoading = true;
				return false;
			}

		}

		//set scrolling to no if we're on an ipad
		//and we're attempting to iframe our own player
		//this stops the player from expanding the iframe its contained in.
		if (_ctrl.isTouchDevice && /inthetelling.com\/#/.test(_ctrl.src)) {
			_ctrl.iOSScroll = 'no';
		}

		_ctrl.watcher = $scope.$watchGroup([function() {return _ctrl.src;}, function() {return _ctrl.contenttype;}], function () {
			if (!_ctrl.src || !validateFrameUrl(_ctrl.src)) {
				return;
			}

			if (_ctrl.contenttype) {
				// Uploads will always have a content type; we can trust it:
				_ctrl.sandbox = (_ctrl.contenttype === 'text/html') ? _sandboxAttrs : undefined;
			} else {
				// no content type for links, so we have to fall back on string matching.
				// Ideally we'd only apply the sandbox to html files, but that's hard to match, so for now we'll
				// default to sandbox unless proven otherwise.
				_ctrl.sandbox = _sandboxAttrs;

				// Remove it for PDFs (for now; probably we'll be growing this list later on)
				if (_ctrl.src.match(/.pdf$/)) {
					delete _ctrl.sandbox;
				}
				//give ourselves more permission
				if (_ctrl.src.match(/inthetelling.com\/#/)) {
					_ctrl.sandbox += _popupsTopWindow;
				}

				//for certain browsers, see: TS-757 and TS-773
				if (_ctrl.src.match(/inthetelling.com\/#/) && _ctrl.src.indexOf('?') === -1) {
					_ctrl.src += '?embed=1';
				}

				// Looks like we have some episodes where production used Links item types to point to asset uploads,
				// because upload templates  were broken (see TS-839). Would have been nice if they'd reported that
				// so we could fix it, but they didn't, so we'll clean up after them.

				// These won't have a file extension to match on, so we'll have to just
				// assume that anything in our upload space won't have a framebreaker.
				// URLs are either https://s3.amazonaws.com/ITT_Assets or https://s3.amazonaws.com/itt.user.uploads

				// TODO check to see if they always used ITT_Assets -- if so we can still protect against end-user uploads
				// of framebreaking files by using .match(/amazonaws.com\/ITT/) instead
				if (_ctrl.src.match(/amazonaws.com\/itt/i)) {
					delete _ctrl.sandbox;
				}
			}
		});

		$scope.$on('$destroy', function () {
			_ctrl.watcher();
		});
	}
	ittIframeCtrl.$inject = ["$scope", "ittUtils", "youtubeSvc", "appState"];

})();

/**
 * Created by githop on 12/11/15.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittLoading', ittLoading);

	function ittLoading() {
		return {
			scope: true,
			templateUrl: 'templates/loading.html'
		};
	}
})();

'use strict';
/* Attach this to content panes, so they can tell their items when to drop into inline timestamps. */
angular.module('com.inthetelling.story')
	.directive('ittWidthWatch', function () {
		return {
			restrict: 'A',
			replace: false,
			link: function (scope, element) {
				var unwatch = scope.$watch(function () {
					return element.width();
				}, function (w) {
					scope.isNarrow = (w < 450);
				});
				scope.$on("$destroy", unwatch);
			}
		};
	});

'use strict';

// Force scenes to render scenes sequentially instead of all in one ng-repeat, because it looks faster that way.

// (why don't all ng-repeats do this?  More to the point, why don't all of OUR ng-repeats do this?)

// NOTE this is only used in the "review mode", not in the new combined search/review

angular.module('com.inthetelling.story')
	.directive('ittReviewMode', ["appState", "$timeout", function (appState, $timeout) {
		return {
			restrict: 'A',
			replace: false,
			scope: {
				allScenes: '=ittReviewMode'
			},
			templateUrl: 'templates/episode/components/reviewmode-scenes.html',
			link: function (scope) {
				// console.log('ittReviewMode', scope);

				// scope.scenes is what is being displayed right now. scope.allScenes is a reference to the original episode data,
				// which is handy if the episode data hasn't loaded before this gets invoked.
				scope.appState = appState;

				scope.scenes = [];

				var delay = 100; // would be better if there were a way to directly determine whether the prev scene has finished rendering, but this will do for now
				var cur = 0;
				scope.isLoading = true;

				// Was just rendering one scene at a time, but with a lot scenes that can be a different kind of slow.
				// So we'll ramp up gradually rendering more and more each iteration:
				var fib = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, Infinity];

				scope.addOne = function () {
					cur++;
					if (scope.allScenes) {
						scope.scenes = scope.allScenes.slice(0, fib[cur]);
						// console.log("scope.scenes length is ",scope.scenes.length);
						if (cur < scope.allScenes.length) {
							$timeout(scope.addOne, delay);
						} else {
							scope.isLoading = false;
							scope.scenes = scope.allScenes; // swap in the original data reference once we think we're done loading, so in case users start adding new scenes later we're not stuck with a partial slice
							// console.log("stopping");
						}
					} else {
						// No scenes loaded yet, so wait for them and try again.  (TODO see if this still works ok if users are editing or adding scenes while in review mode)
						var loadWatcher = scope.$watch(function () {
							return scope.allScenes;
						}, function () {
							if (scope.allScenes) {
								loadWatcher();
								scope.addOne();
							}
						});
					}
				};
				$timeout(scope.addOne, delay);
			}
		};
	}]);

'use strict';

/*
NOTE: when authoring templates make sure that outgoing links call the outgoingLink() function,
so they get logged properly: don't draw plain hrefs
*/

angular.module('com.inthetelling.story')
	.directive('ittItem', ["$http", "$timeout", "$interval", "config", "authSvc", "appState", "analyticsSvc", "timelineSvc", "modelSvc", "youtubeSvc", "youTubePlayerManager", function ($http, $timeout, $interval, config, authSvc, appState, analyticsSvc, timelineSvc, modelSvc, youtubeSvc, youTubePlayerManager) {
		return {
			restrict: 'A',
			replace: false,
			scope: {
				item: '=ittItem'
			},
			template: function (el, attrs) {
				if (attrs.forcetemplate) {
					return '<div ng-include="\'templates/item/' + attrs.forcetemplate + '.html\'"></div>';
				} else {
					return '<div ng-include="item.templateUrl"></div>';
				}
			},
			controller: 'ItemController',
			link: function (scope, element) {
				//scope.user = appState.user;

				scope.appState = appState; // to get searchText
				scope.userHasRole = authSvc.userHasRole;

				if (scope.item.avatar_id) {
					scope.item.avatar = modelSvc.assets[scope.item.avatar_id];
				}

				if (scope.item._id === 'internal:editing') {
					element.addClass('noTransitions');
				} else {
					if (authSvc.userHasRole('admin') || authSvc.userHasRole('customer admin') || scope.item.user_id === appState.user._id) {
						scope.item.editableByThisUser = true;
					}
				}

				scope.toggleDetailView = function () {
					// console.log("Item toggleDetailView");
					if (scope.item.showInlineDetail) {
						// if inline detail view is visible, close it. (If a modal is visible, this is inaccessible anyway, so no need to handle that case.)
						scope.item.showInlineDetail = false;
					} else {
						timelineSvc.pause();
						scope.captureInteraction();
						if (element.width() > 450) {
							// show detail inline if there's room for it:
							scope.item.showInlineDetail = true;
						} else {
							// otherwise pop a modal:
							appState.itemDetail = {item: scope.item, animate: true};
						}
					}
				};
				var KeyCodes = {
					ENTER: 13,
					SPACE: 32
				};

				scope.toggleDetailOnKeyPress = function ($event) {
					var e = $event;
					var passThrough = true;
					switch (e.keyCode) {
					case KeyCodes.ENTER:
						scope.toggleDetailView();
						passThrough = false;
						break;
					case KeyCodes.SPACE:
						scope.toggleDetailView();
						passThrough = false;
						break;
					default:
						passThrough = true;
						break;
					}
					if (!passThrough) {
						$event.stopPropagation();
						$event.preventDefault();
					}
				};

				scope.forceModal = function (doAnimate) {
					if (doAnimate === undefined) {
						doAnimate = true;
					}
					timelineSvc.pause();
					appState.itemDetail = {item: scope.item, animate: doAnimate};
				};

				scope.outgoingLinkOnKeyPress = function (url, $event) {
					var e = $event;
					var passThrough = true;
					switch (e.keyCode) {
					case KeyCodes.ENTER:
						scope.outgoingLink(url);
						passThrough = false;
						break;
					case KeyCodes.SPACE:
						scope.outgoingLink(url);
						passThrough = false;
						break;
					default:
						passThrough = true;
						break;
					}
					if (!passThrough) {
						$event.stopPropagation();
						$event.preventDefault();
					}
				};
				scope.outgoingLink = function (url) {
					timelineSvc.pause();
					scope.captureInteraction();

					if (url.match(/youtube/)) {
						url = youtubeSvc.embeddableYoutubeUrl(url, false);
						//if we have an embed set, pause it when
						//linking to new window.
						if (appState.embedYTPlayerAvailable) {
							youTubePlayerManager.pauseOtherEmbeds();
							var curTime = Math.floor(youTubePlayerManager.getCurrentTime(scope.item._id));
							if (curTime > 0) {
								url += '&start=' + curTime;
								console.log('made it to the right spot!!', url);
							}
						}


					}

					if (scope.item.targetTop) {
						$timeout(function () {
							window.location.href = url;
						});
					} else {
						window.open(url);
					}
				};

				scope.editItem = function () {
					appState.editEvent = scope.item;
					appState.videoControlsActive = true; // TODO see playerController showControls; this may not be sufficient on touchscreens
					appState.videoControlsLocked = true;
				};

				scope.captureInteraction = function () {
					analyticsSvc.captureEventActivity("clicked", scope.item._id);
				};

				// HACK: need to capture embedded links on item enter, since they're automatically 'clicked'
				// TODO timelineSvc should be able to inform the item directive directly that enter or exit has happened, $watch is silly
				if (scope.item.templateUrl === 'templates/item/link-embed.html') {
					var captureEmbed = scope.$watch(function () {
						return appState.time > scope.item.start_time;
					}, function (x) {
						if (x) {
							scope.captureInteraction();
							captureEmbed();
						}
					});

				}

				// HACK not sure why but modelSvc.resolveEpisodeAssets isn't always doing the job.
				// (Possibly a race condition?)  Quick fix here to resolve it:
				if (scope.item.asset_id && !scope.item.asset) {
					scope.item.asset = modelSvc.assets[scope.item.asset_id];
				}

				// Slight hack to simplify css for image-fill:
				if (scope.item.asset && scope.item.styleCss && scope.item.styleCss.match(/fill|contain|cover/)) {
					// TODO: figure out why item.asset.cssUrl works in IE, and item.backgroundImageStyle works in everything else.
					// Probably just an escaped-quote issue or something dumb like that
					scope.item.asset.cssUrl = "url('" + scope.item.asset.url + "');";
					scope.item.backgroundImageStyle = "background-image: url('" + scope.item.asset.url + "');";
				}

				// TODO make credly badge its own directive instead of including it here
				if (scope.item.data) {
					scope.plugin = scope.item.data._plugin;
					scope.plugin._type = scope.item.data._pluginType;

					// BEGIN credly badge
					if (scope.plugin._type === 'credlyBadge') {
						// console.log("credly");
						// have analytics record that this event has been reached, so it can be used as a trigger for other achievements
						analyticsSvc.captureEventActivity("viewed", scope.item._id);
						if (appState.user.roles && appState.user.roles.length === 1 && appState.user.roles[0] === "guest") {
							scope.plugin.eligibleForBadges = false;
						} else {
							scope.plugin.eligibleForBadges = true;
							if (appState.user.emails) {
								scope.plugin.userEmail = appState.user.emails[0];
							} else {
								scope.plugin.userEmail = '';
							}
							scope.plugin.totalAchieved = 0;
						}

						scope.checkBadgeEligibility = function () {
							// console.log('checkBadgeEligibility');
							if (!scope.plugin.eligibleForBadges) {
								return;
							}

							angular.forEach(scope.plugin.requirements, function (req) {
								if (!req.achieved) {
									analyticsSvc.readEventActivity(req.eventId, req.activity)
										.then(function (achieved) {
											req.achieved = achieved;
											scope.countAchievements(); // can't just do totalAchieved++ here: .then() happens asynch to the forEach, so scoping problems
										});
								}
								scope.countAchievements(); // catch the case where all were already marked
							});
						};

						scope.countAchievements = function () {
							var count = 0;
							angular.forEach(scope.plugin.requirements, function (req) {
								if (req.achieved) {
									count = count + 1;
								}
							});
							scope.plugin.totalAchieved = count;
							if (scope.plugin.totalAchieved === scope.plugin.requirements.length) {
								// HACK TODO we need to implement a real way for items to control the visibility of other items or scenes.
								// The silly workaround here only works (for some poorly-defined version of 'works') because USC episodes only have one badge
								modelSvc.episodes[appState.episodeId].styleCss = modelSvc.episodes[appState.episodeId].styleCss + " uscHackUserHasBadge";
							}
						};

						// on link:
						scope.checkBadgeEligibility();

						// slow poll after that, up to some reasonable time limit
						var pollLimit = 0;
						scope.badgePoll = $interval(function () {
							// console.log('poll', pollLimit);
							pollLimit++;
							if (scope.item.isCurrent || appState.viewMode === 'review') {
								scope.checkBadgeEligibility();
							}
							if (pollLimit > 60) {
								$interval.cancel(scope.badgePoll);
							}
						}, 10000);

						scope.$on('$destroy', function () {
							$interval.cancel(scope.badgePoll);
						});

						scope.badger = function () {
							scope.plugin.gettingBadge = true;
							$http({
									method: 'GET',
									url: config.apiDataBaseUrl + '/v1/send_credly_badge?badge_id=' + scope.plugin.credlyBadgeId + '&email=' + scope.plugin.userEmail
								})
								.
							success(function (data) {
									// TODO check the data to make sure it's not status: "Badge previously sent."
									scope.checkBadgeEligibility();
									// console.log("SUCCESS", data);
									if (data.status === 'Badge previously sent.') {
										scope.plugin.alreadyHadBadge = true;
									}
									scope.plugin.gotBadge = true;
								})
								.error(function () {
									scope.plugin.gettingBadge = false;
									scope.plugin.error = true; // TEMP HACK
								});
						};
					}
					// END credly badge
				}
				// end plugin

			}
		};
	}]);

'use strict';
/**
 * @ngdoc directive
 * @name iTT.directive:ittItemDetailModal
 * @restrict 'A'
 * @scope
 * @description
 * For opening modals with event objects.
 * Currently resides in player.html and is passed the item data via appState.
 * Modal is invoked via forceModal() $scope method in ittItem.
 * forceModal() accepts a bool as param, and sets the item on the appState.
 * The modal transition is animated based upon the boolean param passed to forceModal()
 * @requires iTT.service:appState
 * @param {Object} item Event object to display in modal
 */

angular.module('com.inthetelling.story')
	.directive('ittItemDetailModal', ittItemDetailModal);

	function ittItemDetailModal(appState) {
		return {
			restrict: 'A',
			replace: true,
			scope: {
				item: '=ittItemDetailModal'
			},
			templateUrl: 'templates/item/modal.html',
			link: function (scope) {
				var modalSmooth = {
					'transition': 'none'
				};
				if (!scope.item.animate) {
					scope.modalSmooth = modalSmooth;
				}

				scope.item = scope.item.item;
				scope.dismiss = function () {
					appState.itemDetail = false;
				};
			}

		};
	}
	ittItemDetailModal.$inject = ["appState"];

'use strict';

/* 
TODO: right now we're re-building the episode structure on every keystroke.  That's a tiny bit wasteful of cpu :)  At the very least, debounce input to a more reasonable interval

TODO: some redundancy with ittItemEditor, esp. in the 'styles'.  I expect the episode styling to drift away from the event styling, though, so letting myself repeat myself repeat myself for now
*/

angular.module('com.inthetelling.story')
	.directive('ittEpisodeEditor', ["$rootScope", "appState", "errorSvc", "modelSvc", "dataSvc", "awsSvc", "youtubeSvc", function ($rootScope, appState, errorSvc, modelSvc, dataSvc, awsSvc, youtubeSvc) {
		return {
			restrict: 'A',
			replace: true,
			scope: {
				episode: '=ittEpisodeEditor'
			},
			templateUrl: 'templates/producer/episode.html',
			controller: 'EditController',
			link: function (scope) {
				scope.episodeContainerId = modelSvc.episodes[appState.episodeId].container_id;

				var container = modelSvc.containers[scope.episodeContainerId];
				scope.customer = modelSvc.customers[container.customer_id];

				if (scope.episode.master_asset_id && scope.episode.master_asset_id !== "") {
					scope.masterAsset = modelSvc.assets[scope.episode.master_asset_id];
				}
				scope.uploadStatus = [];
				scope.uneditedEpisode = angular.copy(scope.episode); // in case of cancel.   Must be a copy, not the original!
				scope.itemForm = {
					"transition": "",
					"highlight": "",
					"color": "",
					"typography": "",
					"timestamp": ""
				};

				// is the master asset a youtube link? (i.e. is yt the only url we have?)
				if (
					scope.masterAsset &&
					scope.masterAsset.urls.youtube.length &&
					Object.keys(scope.masterAsset.urls).filter(function (x) {
						return scope.masterAsset.urls[x].length > 0;
					}).length === 1) {
					scope.masterAssetType = 'Youtube';
				} else {
					scope.masterAssetType = 'Video';
				}

				// extract current event styles for the form
				if (scope.episode.styles) {
					for (var styleType in scope.itemForm) {
						for (var i = 0; i < scope.episode.styles.length; i++) {
							if (scope.episode.styles[i].substr(0, styleType.length) === styleType) { // begins with styleType
								scope.itemForm[styleType] = scope.episode.styles[i].substr(styleType.length); // Remainder of scope.episode.styles[i]
							}
						}
					}
				}

				// extract episode languages for the form
				scope.langForm = {};
				for (var j = 0; j < scope.episode.languages.length; j++) {
					scope.langForm[scope.episode.languages[j].code] = true;
				}
				scope.langForm[scope.episode.defaultLanguage] = true;

				scope.languageWatcher = scope.$watch(function () {
					return [scope.langForm, scope.episode.defaultLanguage];
				}, function () {
					var languageCount = 0; // not sure if necessary -- can use languages.length instead? 
					var lastSelectedLanguage = ""; // convenience to stuff into default if the old default is no longer valid
					var newLanguages = []; // will replace the existing episode languages array
					for (var lang in scope.langForm) {
						if (scope.langForm[lang]) {
							languageCount++;
							lastSelectedLanguage = lang;
							newLanguages.push({
								'code': lang
							});
						} else {
							// language not selected; remove it as default if it was one
							if (scope.episode.defaultLanguage === lang) {
								scope.episode.defaultLanguage = false;
							}
						}
					}
					scope.languageCount = languageCount;

					// ensure there is a valid default selection:
					if (scope.episode.defaultLanguage === false) {
						scope.episode.defaultLanguage = lastSelectedLanguage;
					}

					// set the default inside in the languages structure:
					angular.forEach(newLanguages, function (lang) {
						if (lang.code === scope.episode.defaultLanguage) {
							lang.default = true;
						}
					});

					scope.episode.languages = angular.copy(newLanguages);
				}, true);

				// Transform changes to form fields for styles into item.styles[]:
				scope.watchStyleEdits = scope.$watch(function () {
					return scope.itemForm;
				}, function () {
					// console.log("itemForm:", scope.itemForm);
					var styles = [];
					for (var styleType in scope.itemForm) {
						if (scope.itemForm[styleType]) {
							styles.push(styleType + scope.itemForm[styleType]);
						}
					}
					scope.episode.styles = styles;
					modelSvc.deriveEpisode(scope.episode);
					modelSvc.resolveEpisodeEvents(scope.episode._id); // needed for template or style changes
				}, true);

				scope.appState = appState;

				// Angular1.3 dependency: watchGroup
				// Deep-watching the entire episode is not so much with the good performance characteristics so we instead only watch the editable fields 
				// TODO would it be worth using watchGroup in itemEdit as well?
				scope.watchEdits = scope.$watchGroup(
					// I am kind of amazed that using appState.lang works here, these strings must get recalculated every tick
					[
						'episode.templateUrl',
						'episode.title[appState.lang]',
						'episode.description[appState.lang]'
						// 'episode.navigation_depth'
					],
					function (newVal, oldVal) {
						// console.log("DETECTED CHANGE", newVal, oldVal);
						if (newVal[0] !== oldVal[0]) { // templateUrl
							// Some templates have built-in color and typography selections; need to update them along with the template.
							// TODO This would be a lot simpler if I hadn't chosen such a dumb structure for style info...
							// console.log("Template changed from ", oldVal[0], " to ", newVal[0]);
							// console.log(scope.episode.styles);
							var fixStyles = [];

							//oldVal may be empty if newly created episode
							if (oldVal[0]) {
								var oldCustomer = oldVal[0].match('templates/episode/(.*).html')[1];
								// remove color-oldVal and typography-oldVal.
								angular.forEach(scope.episode.styles, function (style) {
									if (style.toLowerCase() !== "color" + oldCustomer && style.toLowerCase() !== "typography" + oldCustomer) {
										fixStyles.push(style);
									}
								});
							}

							var newCustomer = newVal[0].match('templates/episode/(.*).html')[1];
							// add color-newVal and typography-newVal (only for ep templates that use this:)
							angular.forEach(["eliterate", "gw", "purdue", "usc", "columbia", "columbiabusiness"], function (customer) {
								if (newCustomer === customer) {
									fixStyles.push("color" + customer[0].toUpperCase() + customer.substring(1));
									fixStyles.push("typography" + customer[0].toUpperCase() + customer.substring(1));
								}
							});
							scope.episode.styles = angular.copy(fixStyles);
							// console.log("Updated styles:", scope.episode.styles);

						}

						modelSvc.deriveEpisode(scope.episode);
						// modelSvc.resolveEpisodeContainers(scope.episode._id); // only needed for navigation_depth changes
						modelSvc.resolveEpisodeEvents(scope.episode._id); // needed for template or style changes

					}
				);

				scope.dismissalWatcher = $rootScope.$on("player.dismissAllPanels", scope.cancelEdit);

				scope.cancelEdit = function () {
					// hand off to EditController (with the original to be restored)
					scope.cancelEpisodeEdit(scope.uneditedEpisode);
				};

				scope.attachChosenAsset = function (asset_id) { // master asset only!
					var asset = modelSvc.assets[asset_id];
					var previousAsset = modelSvc.assets[scope.episode.master_asset_id];
					scope.showmessage = "New video attached.";
					if (previousAsset && (asset.duration < previousAsset.duration)) {
						var orphans = scope.getItemsAfter(scope.episode.items.concat(scope.episode.scenes), asset.duration);
						if (orphans.length) {
							// TODO i18n
							scope.showmessage = "Warning: this new video is shorter than the current video and we've detected that some existing content items will be impacted. If you save this edit, these events will have their start and end times adjusted to the new episode end. (If this isn't what you want, choose a different video or hit 'cancel'.)";
						}
					}
					scope.episode._master_asset_was_changed = true;
					scope.episode.master_asset_id = asset._id;
					scope.masterAsset = asset;
					scope.episode.masterAsset = asset;
					modelSvc.deriveEpisode(scope.episode);
				};

				scope.attachPosterAsset = function (assetId) {
					var asset = modelSvc.assets[assetId];
					scope.episode.poster_frame_id = assetId;
					scope.episode.poster = asset;
					modelSvc.deriveEpisode(scope.episode);
				};

				scope.assetUploaded = function (assetId) {
					scope.showUploadButtons = false;
					scope.showUploadField = false;
					scope.attachChosenAsset(assetId);
				};
				scope.posterUploaded = function (assetId) {
					scope.showUploadButtonsPoster = false;
					scope.showUploadFieldPoster = false;
					scope.attachPosterAsset(assetId);
				};

				scope.attachYouTube = function (url) {
					scope.showmessage = "Getting video from YouTube...";
					var youtubeId = youtubeSvc.extractYoutubeId(url);
					if (youtubeId) {
						youtubeSvc.getVideoData(youtubeId)
							.then(function (data) {
								var asset = {}; //createDefaultAsset()
								asset.you_tube_url = asset.url = youtubeSvc.embeddableYoutubeUrl(url);
								asset.duration = data.duration;
								asset.name = {
									en: data.title
								};
								asset.description = {
									en: data.description
								};
								asset.content_type = "video/x-youtube";

								dataSvc.createAsset(scope.episodeContainerId, asset).then(function (data) {
									modelSvc.cache("asset", data);
									// this may override the showmessage, so do it last:
									scope.attachChosenAsset(data._id);
								});

							}, function (error) {
								console.error("Error getting duration from youtube:", error);
								scope.showmessage = "Sorry, couldn't find that video on YouTube.";
							});
					} else {
						console.warn("attachYoutube tried to attach a bad URL", url);
						scope.showmessage = "Sorry, couldn't match that to a valid YouTube url.";
					}
				};

				scope.replaceAsset = function (assetType) {
					assetType = assetType || '';
					scope["showUploadButtons" + assetType] = true;
					scope["showUploadField" + assetType] = false;
				};

				scope.selectText = function (event) {
					event.target.select(); // convenience for selecting the episode url
				};

				scope.$on('$destroy', function () {
					scope.watchEdits();
					scope.dismissalWatcher();
					scope.languageWatcher();
					scope.watchStyleEdits();
				});
			}
		};
	}]);

/*jshint sub:true*/
'use strict';

/*
TODO: right now we're re-building the episode structure on every keystroke.  That's a tiny bit wasteful of cpu :)  At the very least, debounce input to a more reasonable interval

TODO some youtube-specific functionality in here.  Refactor into youtubeSvc if/when we decide we're going to keep it...

*/

/**
 * @ngDoc directive
 * @name iTT.directive:ittItemEditor
 * @restrict 'A'
 * @scope
 * @description
 * Directive for editing items in the producer / editor interface
 * @requires $rootScope
 * @requires $timeOut
 * @requires errorSvc
 * @requires appState
 * @requires modelSvc
 * @requires timelineSvc
 * @requires awsSvc
 * @requires dataSvc
 * @requires youtubeSvc
 * @param {Object} Item object representing an Event object from the DB to be edited.
 */
angular.module('com.inthetelling.story')
	.directive('ittItemEditor', ["$rootScope", "$timeout", "errorSvc", "appState", "modelSvc", "timelineSvc", "awsSvc", "dataSvc", "youtubeSvc", function ($rootScope, $timeout, errorSvc, appState, modelSvc, timelineSvc, awsSvc, dataSvc, youtubeSvc) {
		return {
			restrict: 'A',
			replace: true,
			scope: {
				item: '=ittItemEditor'
			},
			templateUrl: 'templates/producer/item.html',
			controller: 'EditController',
			link: function (scope) {
				// console.log("ittItemEditor", scope.item);
				var widget;
				scope.startRecordVideo = function () {
					scope.isRecordingVideo = !scope.isRecordingVideo;
					var widgetwidth = 0.8 * (window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth);
					if (widgetwidth > 500) {
						widgetwidth = 500;
					}
					widget = new window.YT.UploadWidget('recordWidgetContainer', {
						width: widgetwidth,
						events: {
							'onApiReady': function () {
								// console.log('youtube onApiReady');
								widget.setVideoPrivacy('unlisted');
								var d = new Date();
								var dateString = (d.getMonth() + 1) + "-" + d.getDate() + "-" + d.getFullYear() + " " + (d.getHours() % 12) + ":" + d.getMinutes() + (d.getHours() > 12 ? " pm" : " am");
								widget.setVideoTitle('In The Telling webcam recording: ' + dateString);
								// widget.setVideoDescription();
								// widget.setVideoKeywords();
							},
							'onUploadSuccess': function (ret) {
								scope.item.url = youtubeSvc.createEmbedLinkFromYoutubeId(ret.data.videoId);
								scope.isRecordingVideo = false;
								scope.isProcessingVideo = true;

								// onProcessingComplete is not always fired by youtube; force it after 30 secs:
								$timeout(function () {
									console.log("Forcing process-complete");
									scope.isProcessingVideo = false;
								}, 30000);
							},
							'onProcessingComplete': function () {
								// console.log("youtube onProcessingComplete");
								scope.isProcessingVideo = false;
							}
						}
					});
				};

				timelineSvc.pause();
				timelineSvc.seek(scope.item.start_time);

				scope.uploadStatus = [];
				scope.uneditedItem = angular.copy(scope.item); // in case of cancel
				scope.uneditedItem['$$hashKey'] = scope.item['$$hashKey']; //Preserve the hashkey, which angular.copy strips out
				scope.annotators = modelSvc.episodes[appState.episodeId].annotators;
				scope.episodeContainerId = modelSvc.episodes[appState.episodeId].container_id;

				scope.languages = modelSvc.episodes[appState.episodeId].languages;

				scope.itemForm = {
					"transition": "",
					"highlight": "",
					"color": "",
					"typography": "",
					"timestamp": "",
					"position": "", // for image fills only
					"pin": "" // for image fills only
				};

				if (!scope.item.layouts) {
					scope.item.layouts = ["inline"];
				}

				// extract current event styles for the form
				if (scope.item.styles) {
					for (var styleType in scope.itemForm) {
						for (var i = 0; i < scope.item.styles.length; i++) {
							if (scope.item.styles[i].substr(0, styleType.length) === styleType) { // begins with styleType
								scope.itemForm[styleType] = scope.item.styles[i].substr(styleType.length); // Remainder of scope.item.styles[i]
							}
						}
					}
					// position and pin don't have a prefix because I was dumb when I planned this
					for (var j = 0; j < scope.item.styles.length; j++) {
						if (scope.item.styles[j] === 'contain' || scope.item.styles[j] === 'cover' || scope.item.styles[j] === 'center' || scope.item.styles[j] === 'fill') {
							scope.itemForm.position = scope.item.styles[j];
						}
						if (scope.item.styles[j] === 'tl' || scope.item.styles[j] === 'tr' || scope.item.styles[j] === 'bl' || scope.item.styles[j] === 'br') {
							scope.itemForm.pin = scope.item.styles[j];
						}
					}

				}
				if (!scope.item.producerItemType) {
					errorSvc.error({
						data: "Don't have a producerItemType for item " + scope.item._id
					});
				}
				// TODO:this breaks when editing sxs items within producer!
				scope.itemEditor = 'templates/producer/item/' + appState.product + '-' + scope.item.producerItemType + '.html';

				scope.appState = appState;

				// TODO this still needs more performance improvements...
				scope.watchEdits = scope.$watch(function () {
					return scope.item;
				}, function (newItem, oldItem) {
					if (!oldItem) {
						return;
					}
					// FOR DEBUGGING
					/*
										angular.forEach(Object.keys(newItem), function (f) {
											if (f !== '$$hashKey' && !(angular.equals(newItem[f], oldItem[f]))) {
												console.log("CHANGED:", f, newItem[f]);
											}
										});
					*/

					if (newItem.yturl !== oldItem.yturl) {
						scope.item.url = youtubeSvc.embeddableYoutubeUrl(newItem.yturl);
					}


					// Special cases:
					// if new template is image-fill,
					// 	set cosmetic to true, itemForm.
					// if old template was image-fill, set cosmetic to false
					// TODO this is fragile, based on template name:
					if (newItem.templateUrl !== oldItem.templateUrl) {
						console.log('tempalte URL stuff in $watch');
						if (newItem.templateUrl === 'templates/item/image-fill.html') {
							scope.item.cosmetic = true;
							scope.item.layouts = ["windowBg"];
							scope.itemForm.position = "fill";
						}
						if (oldItem.templateUrl === 'templates/item/image-fill.html') {
							scope.item.cosmetic = false;
							scope.item.layouts = ["inline"];
							scope.itemForm.position = "";
							scope.itemForm.pin = "";
						}
					}


					//newItem is scope.item
					newItem = modelSvc.deriveEvent(newItem); // Overkill. Most of the time all we need is setLang...

					//for producers, if they edit a URL to link-embed template a site that cannot be embedded,
					//change the template URL to 'link'
					if (appState.product === 'producer' && newItem.noEmbed === true && newItem.templateUrl === 'templates/item/link-embed.html') {
						newItem.templateUrl = 'templates/item/link.html';
					}

					if (newItem.asset) {
						scope.item.asset.cssUrl = "url('" + newItem.asset.url + "');";
						scope.item.backgroundImageStyle = "background-image: url('" + newItem.asset.url + "');";
					} else {
						delete scope.item.asset;
						delete scope.item.backgroundImageStyle;
					}

					// TODO BUG items moved from one scene to another aren't being included in the new scene until the user hits save,
					// only in discover mode (review mode has no problem.)   This was also the case when we ran resolveEpisodeEvents on every edit, it's an older bug.
					// This _should_ be setting it, and it _is_ triggering sceneController precalculateSceneValues...  IT IS A MYSTERY
					if (newItem.start_time !== oldItem.start_time || newItem.start_time !== oldItem.end_time) {
						modelSvc.resolveEpisodeEvents(appState.episodeId);
					}
					console.count('$watch turn');

				}, true);

				// Transform changes to form fields for styles into item.styles[]:
				scope.watchStyleEdits = scope.$watch(function () {
					return scope.itemForm;
				}, function () {
					var styles = [];
					for (var styleType in scope.itemForm) {
						if (scope.itemForm[styleType]) {
							if (styleType === 'position' || styleType === 'pin') { // reason #2,142,683 why I should've specced these styles in some more structured way than a simple array
								styles.push(scope.itemForm[styleType]);
							} else {
								styles.push(styleType + scope.itemForm[styleType]);
							}
						}
					}
					scope.item.styles = styles;

					// Slight hack to simplify css for image-fill (ittItem does this too, but this is easier than triggering a re-render of the whole item)
					if (scope.item.asset) {
						scope.item.asset.cssUrl = "url('" + scope.item.asset.url + "');";
						scope.item.backgroundImageStyle = "background-image: url('" + scope.item.asset.url + "');";
					}
				}, true);

				scope.forcePreview = function () {
					// this is silly but it works.
					appState.editEvent.fnord = (appState.editEvent.fnord) ? "" : "fnord";
				};
				var isTranscript = function (item) {
					if (item._type === 'Annotation' && item.templateUrl.match(/transcript/)) {
						return true;
					} else {
						return false;
					}
				};
				scope.setItemTime = function () {
					// triggered when user changes start time in the input field

					// TODO ensure within episode duration. If too close to a scene start, match to scene start. If end time not in same scene, change end time to end of scene / beginning of next transcript

					if (scope.item._type === 'Scene') {
						modelSvc.resolveEpisodeEvents(appState.episodeId); // reparent events to new scene times if necessary

						// need to update timeline enter/exit for *all* scenes here, since changing one can modify others ...
						timelineSvc.updateSceneTimes(scope.item.episode_id);

					} else if (scope.item.stop) {
						scope.item.end_time = scope.item.start_time;
						modelSvc.resolveEpisodeEvents(appState.episodeId); // redundant but necessary
						timelineSvc.updateEventTimes(scope.item);
					} else {
						modelSvc.resolveEpisodeEvents(appState.episodeId); // in case the item has changed scenes

						// for now, just using end of scene if the currently set end time is invalid.
						if (scope.item.end_time <= scope.item.start_time || scope.item.end_time > modelSvc.events[scope.item.scene_id].end_time) {
							scope.item.end_time = modelSvc.events[scope.item.scene_id].end_time;
						}
						timelineSvc.updateEventTimes(scope.item);
					}

				};
				var sortByStartTime = function (a, b) {
					return a.start_time - b.start_time;
				};

				scope.setItemEndTime = function () {
					if (scope.item.end_time <= scope.item.start_time || scope.item.end_time > modelSvc.events[scope.item.scene_id].end_time) {
						scope.item.end_time = modelSvc.events[scope.item.scene_id].end_time;
					}
					timelineSvc.updateEventTimes(scope.item);
				};
				var getTranscriptItems = function () {
					var episode = modelSvc.episodes[appState.episodeId];
					var allItems = angular.copy(episode.items);
					return allItems.filter(isTranscript);
				};

				var getNextStartTime = function (currentScene, currentItem, items) {

					//HACK to work around TS-412
					if (!currentScene) {
						console.warn("getNextStartTime called with no scene (becuase it's being called for a scene event?)", currentItem, items);
						return false;
					}
					var nextItem;
					var nextStartTime = currentScene.end_time;
					items = items.sort(sortByStartTime);
					for (var i = 0, len = items.length; i < len; i++) {
						if (items[i]._id === currentItem._id) {
							//the next item start_time if less than scen end time
							nextItem = items[i + 1];
							break;
						}
					}
					if (nextItem) {
						if (nextItem.start_time < currentScene.end_time) {
							nextStartTime = nextItem.start_time;
						}
					}
					return nextStartTime;
				};
				var getCurrentScene = function (item) {
					if (item._type === 'Scene') {
						return item;
					} else {
						return modelSvc.events[scope.item.scene_id];
					}
				};
				scope.switchToAutoOrCustom = function (isSwitchingFromCustom) {
					if (isSwitchingFromCustom) {
						var items = isTranscript(scope.item) ? getTranscriptItems() : [];
						scope.item.end_time = getNextStartTime(getCurrentScene(scope.item), scope.item, items);
						scope.customEndTime = false;
					} else {
						scope.customEndTime = true;
					}
				};
				scope.isAutoEndTime = function () {
					var items = isTranscript(scope.item) ? getTranscriptItems() : [];
					var nextStartTime = getNextStartTime(getCurrentScene(scope.item), scope.item, items);
					if (scope.item.end_time === nextStartTime) {
						return true;
					} else {
						return false;
					}

				};
				scope.customEndTime = !scope.isAutoEndTime();
				scope.dismissalWatcher = $rootScope.$on("player.dismissAllPanels", scope.cancelEdit);

				scope.cancelEdit = function () {
					// hand off to EditController (with the original to be restored)
					scope.cancelEventEdit(scope.uneditedItem);
				};

				scope.assetUploaded = function (assetId) {
					scope.item.asset = modelSvc.assets[assetId];
					// TODO Shouldn't need to be worrying about asset field names here, handle this in modelSvc?
					if (scope.item._type === 'Link') {
						scope.item.link_image_id = assetId;
					} else if (scope.item._type === 'Annotation') {
						scope.item.annotation_image_id = assetId;
					} else {
						scope.item.asset_id = assetId;
					}
					scope.showUploadButtons = false;
					scope.showUploadField = false;
				};

				scope.replaceAsset = function () {
					scope.showUploadButtons = true;

					if (scope.item.sxs) { // we will delete assets atached to editor items, not from producer items
						scope.item.removedAssets = scope.item.removedAssets || [];
						// removedAsset will be used by editController on save to delete the old asset (if we're in editor)
						if (scope.item._type === 'Link') {
							scope.item.removedAssets.push(scope.item.link_image_id);
						} else if (scope.item._type === 'Annotation') {
							scope.item.removedAssets.push(scope.item.annotation_image_id);
						} else {
							scope.item.removedAssets.push(scope.item.asset_id);
						}
					}
				};

				scope.attachChosenAsset = function (asset_id) {
					// console.log(scope.item);
					var asset = modelSvc.assets[asset_id];
					if (scope.item) {
						scope.item.asset = asset;
						if (scope.item._type === 'Upload' || scope.item._type === 'Plugin') {
							scope.item.asset_id = asset_id;
						} else if (scope.item._type === 'Link') {
							scope.item.link_image_id = asset_id;
						} else if (scope.item._type === 'Annotation') {
							scope.item.annotation_image_id = asset_id;
						} else {
							console.error("Tried to select asset for unknown item type", scope.item);
						}
					}
				};

				scope.$on('$destroy', function () {
					scope.watchEdits();
					scope.dismissalWatcher();
					scope.watchStyleEdits();
				});
			}
		};
	}]);

'use strict';

// use only for master asset!

angular.module('com.inthetelling.story')
	.directive('ittVideo', ["$timeout", "$interval", "$rootScope", "appState", "timelineSvc", "dataSvc", "modelSvc", function ($timeout, $interval, $rootScope, appState, timelineSvc, dataSvc, modelSvc) {
		var uniqueDirectiveID = 0; // Youtube wants to work via DOM IDs; this is a cheap way of getting unique ones

		return {
			restrict: 'A',
			replace: true,
			templateUrl: 'templates/video.html',
			controller: 'VideoController',
			scope: {
				video: "=ittVideo",
				poster: "="
			},
			link: function (scope, element) {
				// console.log('ittVideo', scope.video);

				scope.appState = appState;
				scope.uid = ++uniqueDirectiveID;

				$timeout(function () {
					scope.initVideo(element);
				}); // in controller

				scope.videoClick = function () {
					if (appState.timelineState === "paused") {
						timelineSvc.play();
					} else {
						timelineSvc.pause();
					}
				};

				scope.spaceWatcher = $rootScope.$on('userKeypress.SPACE', scope.videoClick);

				// watch buffered amount on an interval
				scope.bufferInterval = $interval(function () {
					if (!scope.getBufferPercent) {
						return;
					}
					var pct = scope.getBufferPercent();
					if (pct > 98) { // close enough
						$interval.cancel(scope.bufferInterval);
						appState.bufferedPercent = 100;
					}
				}, 200);

				// if the video is not yet transcoded poll for updates until it is
				var pollCount = 0;
				scope.pollInterval = $interval(function () {
					pollCount++;
					if (pollCount > 360) {
						$interval.cancel(scope.pollInterval); // Give up after an hour, the user certainly will have
					}
					var currentEpisode = modelSvc.episodes[appState.episodeId];

					if (currentEpisode && currentEpisode.masterAsset && !modelSvc.isTranscoded(currentEpisode.masterAsset)) {
						dataSvc.getSingleAsset(currentEpisode.master_asset_id).then(function (latestAsset) {

							if (modelSvc.isTranscoded(latestAsset)) {
								$interval.cancel(scope.pollInterval);
								modelSvc.cache('asset', latestAsset);
							}
						});
					} else {
						$interval.cancel(scope.pollInterval);
					}
				}, 10000);

				scope.$on('$destroy', function () {
					scope.spaceWatcher();
					$interval.cancel(scope.bufferInterval);
					$interval.cancel(scope.pollInterval);
				});
			},

		};
	}]);

'use strict';

// TODO: remove dependence on jQuery? (lots of it here)

angular.module('com.inthetelling.story')
	.directive('ittMagnetized', ["$rootScope", "$timeout", "appState", function ($rootScope, $timeout, appState) {
		return {
			restrict: 'A',
			replace: true,
			scope: true,
			link: function (scope, element) {
				var aspectRatio = 16 / 9;

				var watchMagnet = function (magnet) {
					// console.log("Changing magnet to ", magnet);
					if (scope.unwatch) {
						scope.unwatch();
					}
					scope.magnet = $(magnet);

					// Magnetized needs to respond when the magnet moves or the window resizes.
					// Can't bind to window size directly (iOS crashes in iframe); we track it in $rootScope instead
					scope.unwatch = scope.$watch(function () {
						return {
							top: scope.magnet.offset().top - element.offset().top,
							left: scope.magnet.offset().left - element.offset().left,
							width: scope.magnet.width() - element.width(),
							winWidth: appState.windowWidth,
							winHeight: appState.windowHeight
						};
					}, moveToMagnet, true);
				};

				var moveToMagnet = function () {
					$timeout(function () { // needs the timeout, otherwise endless digest loop
						element.css("position", (scope.magnet.css("position") === "fixed") ? "fixed" : "absolute");

						var diffT = scope.magnet.offset().top - element.offset().top;
						var diffL = scope.magnet.offset().left - element.offset().left;
						var diffW = scope.magnet.width() - element.width();

						if (Math.abs(diffT) > 1 || Math.abs(diffL) > 1) {
							element.offset({
								top: element.offset().top + (diffT / 4),
								left: element.offset().left + (diffL / 4)
							});
						} else {
							element.offset(scope.magnet.offset());
						}

						if (Math.abs(diffW) > 4) {
							element.width(Math.ceil(element.width() + (diffW / 4)));
						} else {
							element.width(Math.ceil(scope.magnet.width()));
						}
						element.height(Math.ceil(scope.magnet.width() / aspectRatio));
					});
				};
				$rootScope.$on('magnet.changeMagnet', function (evt, magnet) {
					watchMagnet(magnet);
				});

				var jumpToMagnet = function () {
					element.css("position", (scope.magnet.css("position") === "fixed") ? "fixed" : "absolute");
					element.offset(scope.magnet.offset());
					element.width(Math.ceil(scope.magnet.width()));
					element.height(Math.ceil(scope.magnet.width() / aspectRatio));
				};
				$rootScope.$on('magnet.jumpToMagnet', jumpToMagnet);

				// cleanup watchers on destroy
				scope.$on('$destroy', function () {
					if(scope.unwatch) {
						scope.unwatch();
					}
				});
			}
		};
	}]);

'use strict';

// Sends magnet signal whenever becomes visible.
// In watch mode (only), also watches the window size and tries to keep the video from overflowing the window height

// TODO: remove dependence on jQuery?  (.is(:visible))

angular.module('com.inthetelling.story')
	.directive('ittMagnet', ["$rootScope", "appState", function ($rootScope, appState) {
		return {
			restrict: 'A',
			replace: true,
			scope: true,
			link: function (scope, element) {

				scope.changeMagnet = function (element) {
					$rootScope.$emit('magnet.changeMagnet', element);

					// skip the animation on first load, and when on mobile
					if (appState.isTouchDevice || appState.time === 0) {
						$rootScope.$emit('magnet.jumpToMagnet');
					}
				};

				scope.unwatchVisibility = scope.$watch(function () {
					return element.is(':visible');
				}, function (newV) {
					if (newV) {
						scope.changeMagnet(element);
					}
				});

				if (element.attr("id") === 'watchModeVideoMagnet') {
					scope.unwatchSize = scope.$watch(function () {
						return {
							w: angular.element(window).width(),
							h: angular.element(window).height(),
							v: element.is(':visible')
						};
					}, function () {
						// we want the video to be as wide as possible without overflowing the window.
						// And dont' want to set the height directly, just the width. So math:
						var win = angular.element(window);
						var maxAllowableHeight = win.height() - 46; // TOOLBAR HEIGHT (plus some slop)
						if (win.width() / maxAllowableHeight > (16 / 9)) {
							element.width(16 / 9 * maxAllowableHeight);
						} else {
							element.width(win.width());
						}
						scope.changeMagnet(element);
					}, true);
				}

				// cleanup watchers on destroy
				scope.$on('$destroy', function () {
					scope.unwatchVisibility();
					if (scope.unwatchSize) {
						scope.unwatchSize();
					}
				});
			}
		};
	}]);

'use strict';

// Was a 'panel' in the old three-modes style.  New layout combined search with review mode, still uses this.
// Maybe rename it after we finally migrate completely away from the three-modes layout.

angular.module('com.inthetelling.story')
	.directive('ittSearchPanel', ["$timeout", "appState", function ($timeout, appState) {
		return {
			restrict: 'A',
			replace: true,
			scope: true,
			templateUrl: 'templates/searchpanel.html',
			controller: 'SearchPanelController',
			link: function (scope) {

				scope.appState = appState;

				// $timeout(function () {
				// console.log("ittSearchPanel", scope);
				scope.indexEvents();
				// });
			}
		};
	}]);

'use strict';
/* For admin screen episode list */
angular.module('com.inthetelling.story')
	.directive('ittContainer', ["$timeout", "$location", "$route", "appState", "modelSvc", "recursionHelper", "dataSvc", function ($timeout, $location, $route, appState, modelSvc, recursionHelper, dataSvc) {
		return {
			restrict: 'A',
			replace: false,
			scope: {
				container: '=ittContainer',
				depth: "=depth"
			},
			templateUrl: "templates/container.html",

			compile: function (element) {

				// Use the compile function from the recursionHelper,
				// And return the linking function(s) which it returns
				return recursionHelper.compile(element, function (scope) {
					scope.appState = appState;
					scope.containers = modelSvc.containers;
					scope.customer = modelSvc.customers[scope.container.customer_id];

					// TEMP obviously
					scope.isDemoServer = ($location.host().match(/demo|localhost|api-dev|client.dev/));

					scope.selectText = function (event) {
						event.target.select(); // convenience for selecting the episode url
					};

					scope.containerTypes = ["customer", "course", "session", "episode"];
					scope.toggleChildren = function () {
						if (scope.container.children || scope.container.episodes.length) {
							// have already loaded kids
							scope.container.showChildren = !scope.container.showChildren;
						} else {
							dataSvc.getContainer(scope.container._id).then(function (id) {
								scope.container = modelSvc.containers[id];
								scope.container.showChildren = true;
							});
						}
					};

					scope.renameContainer = function () {
						console.log("CHanging container name from ", scope.container.name.en, " to ", scope.container.newContainerName);
						console.log(scope.container);

						var newContainer = {};
						angular.forEach(["_id", "customer_id", "episodes", "keywords", "parent_id", "sort_order"], function (field) {
							newContainer[field] = angular.copy(scope.container[field]);
						});
						newContainer.name = {
							en: scope.container.newContainerName
						};
						dataSvc.updateContainer(newContainer).then(function () {
							scope.container.editingContainer = false;
						});
					};

					scope.addContainer = function () {
						var newContainer = {
							"customer_id": scope.container.customer_id,
							"parent_id": scope.container._id,
							"name": {
								en: angular.copy(scope.container.newContainerTitle)
							}
						};
						dataSvc.createContainer(newContainer).then(function (newContainer) {
							console.log("Created container:", newContainer);
							if (scope.depth === 2) {
								var newEpisode = {
									"container_id": newContainer._id,
									"title": angular.copy(newContainer.name)
								};
								dataSvc.getCommon().then(function () {
									dataSvc.createEpisode(newEpisode).then(function (episode) {
										console.log("Created episode: ", episode);
										var newScene = {
											"_type": "Scene",
											"title": {},
											"description": {},
											"templateUrl": "templates/scene/1col.html",
											"start_time": 0,
											"end_time": 0,
											"episode_id": episode._id
										};

										dataSvc.storeItem(newScene);
									});
								});
							}
						});
						scope.container.newContainerTitle = '';
						scope.container.addingContainer = false;
					};

					scope.deleteEpisodeAndContainer = function (id) {
						var containerToDelete = modelSvc.containers[id];

						// Optimistically delete the container from modelSvc.containers[containerToDelete.parent_id].children
						// TODO This really ought to be a dataSvc thing, and shouldn't assume success
						// (but the worst that happens is that something appears to be deleted when it wasn't, until next reload. Could be worse)
						// console.log("About to delete", containerToDelete);

						var parentId = (containerToDelete.parent_id) ? containerToDelete.parent_id : containerToDelete.ancestry.replace(/.*\//, '');

						var parent = modelSvc.containers[parentId];
						// console.log("parent is ", parent);
						var newChildren = [];
						angular.forEach(parent.children, function (child) {
							if (child._id !== id) {
								newChildren.push(child);
							}
						});
						parent.children = newChildren;

						if (containerToDelete.episodes.length) {
							dataSvc.deleteEpisode(containerToDelete.episodes[0]) // Containers only ever have one episode for now (not sure why, but sticking to it as it seems to work)
								.then(function () {
									$timeout(function () { // I am being lazy and not bothering to figure out why .then isn't sufficient here
										dataSvc.deleteContainer(containerToDelete._id);
									}, 250);
								});
						} else {
							dataSvc.deleteContainer(containerToDelete._id);
						}

					};

				});
			}
		};

	}]);

'use strict';
angular.module('com.inthetelling.story')
	.directive('ittContainerEpisodes', ["modelSvc", "recursionHelper", "appState", "dataSvc", function (modelSvc, recursionHelper, appState, dataSvc) {
		return {
			restrict: 'A',
			replace: false,
			scope: {
				container: '=ittContainerEpisodes',
				forAdmin: '=forAdmin',
				onNodeClick: '&',
				rootContext: '='
			},
			templateUrl: "templates/containerepisodes.html",
			controller: ["$scope", function($scope) {

				$scope.selectEpisode = function(e) {
					$scope.onNodeClick({node: e});
					console.log('ctrl select epi', e);
					// $scope.emit('episodeSelected', e);
				};
			}],

			compile: function (element) {
				// Use the compile function from the recursionHelper,
				// And return the linking function(s) which it returns
				return recursionHelper.compile(element, function (scope) {

					scope.containers = modelSvc.containers;
					scope.crossEpisodePath = appState.crossEpisodePath;
					scope.episodeId = appState.episodeId;

					scope.loadChildren = function () {
						if (modelSvc.containers[scope.container._id].haveNotLoadedChildData) {
							dataSvc.getContainer(scope.container._id);
						}
					};
					scope.toggle = function () {
						scope.container.wasClicked = !scope.container.wasClicked;
					};
					// scope.selectEpisode = function (e) {
					// 	// console.log(scope.container.episodes[0]);
					// 	// console.log('hmm', scope.onChoice);
					// 	scope.$emit('episodeSelected', e);
					// };

				});
			}
		};

	}]);

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittEpisodeList', ["$location", "$timeout", "appState", "authSvc", "dataSvc", "modelSvc", function ($location, $timeout, appState, authSvc, dataSvc, modelSvc) {
		return {
			restrict: 'A',
			replace: true,

			link: function (scope) {
				scope.logout = function () {
					authSvc.logout();
				};
				scope.appState = appState;
				scope.loading = true;
				scope.containers = modelSvc.containers;
				scope.userHasRole = authSvc.userHasRole;
				dataSvc.getCustomerList();
				dataSvc.getContainerRoot().then(function (rootIDs) {
					scope.root = {
						children: []
					};
					angular.forEach(rootIDs, function (id) {
						// modelSvc.containers[id].showChildren = true;
						scope.root.children.push(modelSvc.containers[id]);
					});
					scope.loading = false;
				}, function () {
					scope.failedLogin = true;
					scope.loading = false;

				});

			}
		};
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittUser', ["$q", "appState", "authSvc", "dataSvc", "awsSvc", "modelSvc", "imageResize", function ($q, appState, authSvc, dataSvc, awsSvc, modelSvc, imageResize) {
		return {
			restrict: 'A',
			replace: true,
			scope: {

			},
			templateUrl: 'templates/user.html',

			link: function (scope, element, attrs) {

				scope.inPlayer = attrs.inPlayer;
				scope.appState = appState;

				scope.loading = true;
				scope.logout = authSvc.logout;

				authSvc.authenticate().then(function () {
					scope.loading = false;
					scope.user = appState.user;
					scope.userHasRole = authSvc.userHasRole;

					if (!scope.inPlayer && !authSvc.isGuest()) {
						scope.getMyNarratives();
					}
				});

				// TODO refactor: this is very similar to ittItemEditor's uploadAsset
				scope.uploadStatus = [];
				scope.toggleUploadAvatar = function () {
					scope.showUploadField = !scope.showUploadField;
				};

				scope.uploadAvatar = function (files) {
					//Start the upload status out at 0 so that the
					//progress bar renders correctly at first
					scope.uploadStatus[0] = {
						"bytesSent": 0,
						"bytesTotal": 1
					};

					//promise chain
					imageResize.readFileToImg(files[0])
						.then(_resizeWithService)
						.then(_avatarFileFromImg)
						.then(_postToAWS)
						.catch(function(e) {
							console.log('something failed resizing / uploading the image', e);
						});

					//handler functions; i.e., 'links' in the 'promise chain' ;)
					function _resizeWithService(img) {
						return imageResize.resizeImg(img, 60, 60, true)
						.then(function(dataUrl) {
							return dataUrl;
						});
					}
					//takes a base64 encoded URL with PNG image
					//and turns it back into a File Object
					function _avatarFileFromImg(dataUrl) {
						return $q(function(resolve) {
							var file = imageResize.createFileFromDataURL(dataUrl, files[0].name);
							resolve(file);
						});
					}
					//pass file to AWS service for file upload
					function _postToAWS(file) {
						awsSvc.uploadUserFiles(appState.user._id, [file])[0]
							.then(function(data) {
								scope.showUploadField = false;
								modelSvc.cache("asset", data.file);
								if (appState.user.avatar_id) {
									// TODO delete the user's previous avatar asset now that we have a new one
									// (but first confirm that events the user has already created aren't storing the old avatar_id directly.... which would be a bug)
								}
								appState.user.avatar_id = data.file._id;
								scope.updateUser();
								delete scope.uploads;
							});
					}
				};

				scope.updateUser = function () {
					authSvc.updateUser(appState.user).then(function () {
						scope.user = appState.user;
					});
				};
				scope.getMyNarratives = function () {
					dataSvc.getUserNarratives(scope.user._id).then(function (data) {
						// console.log("purchase", data);

						scope.myPurchases = data;

						angular.forEach(scope.myPurchases, function (purchase) {
							purchase.daysUntilExpiration = Math.floor((new Date(purchase.expiration_date) - new Date()) / 86400000);

							// get the narrative data for each purchase (this copes with multiple purchases of the same narrative)
							dataSvc.getNarrativeOverview(purchase.narrative_id).then(function (nData) {
								angular.forEach(scope.myPurchases, function (pur) {
									if (pur.narrative_id === nData._id) {
										pur.narrativeData = nData;
									}
								});
							});
						});

					});
				};

			}
		};
	}]);

'use strict';

/*

TODO:
split this file up into separate directive files
when displaying a narrative, compare its user_id to the current user's id to set isOwner
i18n

To create a narrative:
* get the user ID, make a group containing that ID,
* create narrative with name,description,group id

TO add a timeline:
* user chooses a parent episode

* create timeline with name,description,hidden,path, sort_order
* make a child episode of parent episode
* make an episode segment (needs timeline id, start, end, child episode id, sort_order)

* then reload narrative/resolve

(resolve should sort timelines and segments, API won't necessarily handle this for us)

to update narrative or timeline: just send the basic fields, not the fully-resolved data.


*/
angular.module('com.inthetelling.story')
	.directive('ittNarrative', ittNarrative)
	.controller('ittNarrativeCtrl', ittNarrativeCtrl);

function ittNarrative() {
	return {
		templateUrl: 'templates/narrative/default.html',
		controller: 'ittNarrativeCtrl',
		controllerAs: 'ittNarrative',
		scope: {
			narrativeData: '=',
			customerData: '='
		}
	};
}

function ittNarrativeCtrl($scope, authSvc, appState, dataSvc, ittUtils) {

	var treeOpts = {
		accept: function(/*sourceNodeScope, destNodesScope, destIndex*/) {
			return true;
		},
		dropped: function(event) {
			var destIndex = event.dest.index;
			var srcIndex = event.source.index;
			if (destIndex !== srcIndex) {
				_updateSortOrder(destIndex, $scope.narrative.timelines);
				_persistTimelineSortUpdate($scope.narrative.timelines[destIndex]);
			}

		}
	};

	angular.extend($scope, {
		toggleEditing: toggleEditing,
		toggleEditingTimeline: toggleEditingTimeline,
		doneEditingTimeline: doneEditingTimeline,
		toggleOwnership: toggleOwnership,
		toggleEpisodeList: toggleEpisodeList,
		updateNarrative: updateNarrative,
		updateTimeline: updateTimeline,
		addTmpTimeline: addTmpTimeline,
		onEpisodeSelect: onEpisodeSelect,
		persistTmpTimeline: persistTmpTimeline,
		showTimelineEditor: showTimelineEditor,
		editorAction: editorAction,
		deleteTimeline: deleteTimeline,
		isEditing: false,
		canAccess: false,
		isEditingTimeline: false,
		treeOpts: treeOpts
	});

	onInit();

	function _updateSortOrder(destIndex, arr) {
		var len = arr.length;
		var sortIndex = 0;
		if (destIndex > 0) {

			if (destIndex === len - 1) {
				sortIndex = arr[destIndex - 1].sort_order + 100;
			} else {
				sortIndex = ittUtils.bitwiseCeil((arr[destIndex - 1].sort_order + arr[destIndex + 1].sort_order ) / 2);
			}

		}
		var prevSortIndex = sortIndex;
		arr[destIndex].sort_order = sortIndex;
		destIndex++;
		sortIndex++;
		for (; destIndex < len; destIndex++) {
			if (prevSortIndex >= arr[destIndex].sort_order) {
				arr[destIndex].sort_order = sortIndex;
			}
			prevSortIndex = sortIndex;
			sortIndex++;
		}
	}

	function _persistTimelineSortUpdate(timeline) {
		dataSvc.storeTimeline($scope.narrative._id, timeline).then(function(resp) {
			angular.extend(timeline, resp);
		});
	}

	//set up scope and bindings
	function onInit() {
		$scope.loading = true;
		$scope.logout = authSvc.logout;
		$scope.isOwner = false;
		$scope.narrative = $scope.narrativeData;
		$scope.customers = $scope.customerData;
		$scope.user = appState.user;
		if (authSvc.userHasRole('admin')) {
			$scope.canAccess = true;
		}
		$scope.loading = false;
		_setTotalNarrativeDuration($scope.narrative.timelines);
	}


	function toggleEditing() {
		$scope.isEditing = !$scope.isEditing;
	}

	function toggleEditingTimeline(tl) {
		$scope.timelineUnderEdit = tl;
		$scope.isEditingTimeline = !$scope.isEditingTimeline;
	}

	function toggleOwnership() {
		$scope.isOwner = !$scope.isOwner;
	}

	function toggleEpisodeList() {
		$scope.showEpisodeList = !$scope.showEpisodeList;
	}

	function doneEditingTimeline() {
		$scope.timelineUnderEdit = null;
		//remove tmp tl from timelines;
		$scope.narrative.timelines = $scope.narrative.timelines.filter(function(tl) {
			return tl !== $scope.tmpTimeline;
		});
		$scope.tmpTimeline = null;
	}

	function editorAction(newTl, currTl) {
		if (newTl.isTemp === true) {
			persistTmpTimeline(newTl);
		} else {
			updateTimeline(newTl, currTl);
		}
	}

	function showTimelineEditor(tl) {
		return (tl === $scope.timelineUnderEdit || tl === $scope.tmpTimeline);
	}

	function _setTotalNarrativeDuration(timelines) {
		$scope.totalNarrativeDuration = timelines.map(function (tl) {
			return tl.episode_segments.map(function(s) {return s.end_time;})[0];
		}).reduce(function(accm, durs) {
			return accm += durs;
		}, 0);
	}

	function deleteTimeline(tl) {
		dataSvc.deleteTimeline(tl._id).then(function() {
			$scope.narrative.timelines = $scope.narrative.timelines.filter(function(t) {
				return tl._id !== t._id;
			});
			doneEditingTimeline();
			_setTotalNarrativeDuration($scope.narrative.timelines);
		});
	}

	//this function kicks off the following sequence: addTmpTimeline -> onEpisodeSelect -> persistTmpTimeline
	//addTempTimeline creates a temporary object and puts it on the narrative.timelines scope (so we can use it
	//in the view via ittTimelineEditor directive)
	//onEpisodeSelect fills some of the temp props with actual props back from the selected episode
	//persistTempTimeline saves the freshly created timeline
	function addTmpTimeline(currTl, timelines) {
		var currSortOrder;
		var fromTl;
		var nextTlSortOrder;
		var currIndex;
		var newIndex;

		if (!ittUtils.existy(currTl)) {
			currSortOrder = 0;
			newIndex = 0;
		} else {
			currIndex = timelines.indexOf(currTl);
			newIndex = currIndex + 1;
			fromTl = timelines[currIndex];
			currSortOrder = fromTl.sort_order;
			if (timelines.slice(-1)[0] === fromTl) {
				currSortOrder += 100;
			} else {
				nextTlSortOrder = timelines[currIndex + 1].sort_order;
				currSortOrder = ittUtils.bitwiseCeil((nextTlSortOrder + currSortOrder) / 2);
			}

		}
		var newTimeline = {
			name: {en: ''},
			description: {en: ''},
			hidden: false,
			path_slug: '',
			sort_order: currSortOrder,
			isTemp: true,
			index: newIndex
		};
		//favor slice over splice as splice mutates array in place.
		var head = timelines.slice(0, newIndex);
		var tail = timelines.slice(newIndex, timelines.length);
		head.push(newTimeline);
		timelines = head.concat(tail);
		$scope.narrative.timelines = timelines;
		$scope.tmpTimeline = newTimeline;
		//to open episode select modal
		toggleEpisodeList();
	}

	function onEpisodeSelect(epId) {
		//if tmpTimeline is not set, assume
		// this is the first timeline to create;
		dataSvc.getEpisodeOverview(epId).then(function(episodeData) {
			$scope.tmpTimeline.parent_episode = episodeData;

			if (ittUtils.existy(episodeData.description)) {
				$scope.tmpTimeline.description.en = ittUtils.stripHtmlTags(episodeData.description.en);
			}

			$scope.tmpTimeline.name.en = ittUtils.stripHtmlTags(episodeData.title.en);
			return episodeData;
		}).then(function(episodeData) {
			dataSvc.getSingleAsset(episodeData.master_asset_id).then(function(data) {
				if (data) {
					$scope.tmpTimeline.duration = data.duration;
				} else {
					$scope.tmpTimeline.duration = 0;
				}
				//to close episode select modal after select
				toggleEpisodeList();
			});
		});
	}

	function persistTmpTimeline(tl) {
		_updateSortOrder(tl.index, $scope.narrative.timelines);
		dataSvc.createChildEpisode({
			parent_id: tl.parent_episode._id,
			title: tl.name
		})
			.then(storeChildEpisode)
			.then(handleEpisodeSegment)
			.catch(logErr);

		function storeChildEpisode(childEpisode) {
			return dataSvc.storeTimeline($scope.narrative._id, tl).then(function(tlData) {
				return {d: tlData, e: childEpisode};
			});
		}

		function handleEpisodeSegment(config) {
			var tlData = config.d;
			var childEpisode = config.e;
			dataSvc.createEpisodeSegment(tlData._id, {
				episode_id: childEpisode._id,
				start_time: 0,
				end_time: tl.duration,
				sort_order: 0,
				timeline_id: tlData._id
			}).then(function(segmentData) {
				tlData.episode_segments = [segmentData];
				angular.forEach($scope.narrative.timelines, function(tl) {
					if (tl.sort_order === tlData.sort_order) {
						angular.extend(tl, tlData);
					}
				});
				$scope.tmpTimeline = null;
				doneEditingTimeline();
				_setTotalNarrativeDuration($scope.narrative.timelines);
			});
		}

		function logErr(e) { console.log(e); }
	}

	function updateNarrative(update) {
		dataSvc.updateNarrative(update).then(function (resp) {
			$scope.isEditing = false;
			//updateNarrative returns just the new narrative object, without timelines array
			//merge the existing narrative on scope with the one returned via our post resp.
			angular.extend($scope.narrative, resp);
		});
	}

	function updateTimeline(newTimeline, oldTimeline) {
		dataSvc.storeTimeline($scope.narrative._id, newTimeline).then(function(resp) {
			angular.extend(oldTimeline, resp);
			doneEditingTimeline();
		});
	}
}
ittNarrativeCtrl.$inject = ["$scope", "authSvc", "appState", "dataSvc", "ittUtils"];


(function () {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittNarrativeList', ittNarrativeList)
		.controller('NarrativeListCtrl', NarrativeListCtrl);

	function ittNarrativeList() {
		return {
			restrict: 'A',
			replace: true,
			templateUrl: 'templates/narrativelist.html',
			scope: {
				narrativesData: '=',
				customersData: '='
			},
			controller: 'NarrativeListCtrl',
			controllerAs: 'narrativeList',
			bindToController: true
		};
	}

	NarrativeListCtrl.$inject = ['$location','authSvc', 'appState', 'dataSvc'];

	function NarrativeListCtrl($location, authSvc, appState, dataSvc) {
		var ctrl = this;

		ctrl.narratives = ctrl.narrativesData;
		ctrl.customers = ctrl.customersData;
		ctrl.logout = authSvc.logout;
		ctrl.user = appState.user;
		ctrl.narrativeSelect = false;

		ctrl.toggleSelectNarrative = toggleSelectNarrative;
		ctrl.addNarrative = addNarrative;

		if (authSvc.userHasRole('admin')) {
			ctrl.canAccess = true;
		}

		function toggleSelectNarrative() {
			ctrl.narrativeSelect = !ctrl.narrativeSelect;
		}

		function addNarrative(n) {
			dataSvc.createNarrative(n).then(function(narrativeResp) {
				$location.path('/story/' + narrativeResp._id);
			});
		}

	}
})();


'use strict';
/* For now this is just a thin wrapper around the playerController */

angular.module('com.inthetelling.story')
	.directive('ittNarrativeTimeline', ["$routeParams", "$timeout", "dataSvc", "appState", "authSvc", "modelSvc", "errorSvc", function ($routeParams, $timeout, dataSvc, appState, authSvc, modelSvc, errorSvc) {
		return {
			restrict: 'A',
			replace: true,
			templateUrl: 'templates/player-timeline.html',

			link: function (scope) {
				appState.init();
				//        console.log('user', appState.user);
				//appState.product = "player";
				dataSvc.getNarrative($routeParams.narrativePath)
					.then(function (narrative) {
						appState.narrativeId = narrative._id;
						scope.narrative = narrative;
						var narrativeRole = authSvc.getRoleForNarrative(narrative._id);
						var defaultProduct = authSvc.getDefaultProductForRole(narrativeRole);
						appState.product = defaultProduct;
						angular.forEach(narrative.timelines, function (timeline) {
							if (
								timeline._id === $routeParams.timelinePath ||
								timeline.path_slug.en === $routeParams.timelinePath
							) {
								appState.timelineId = timeline._id;
								if (timeline.episode_segments[0]) {
									appState.episodeId = timeline.episode_segments[0].episode_id;
									appState.episodeSegmentId = timeline.episode_segments[0]._id;
									scope.showPlayer = true;
								}
							}
						});
						if (!appState.episodeId) {
							errorSvc.error({
								data: "Sorry, no episode was found in this timeline."
							});
						}
					});

			}
		};

	}]);

/**
 * Created by githop on 12/7/15.
 */

(function() {
	'use strict';
	/**
	 * @ngdoc directive
	 * @name iTT.directive:ittYoutube
	 * @restrict 'EA'
	 * @scope
	 * @description
	 * Directive used to render the actual youtube iframe and link
	 * YT instances with the youTubePlayerManager service
	 * {@link https://github.com/InTheTelling/client/blob/master/app/scripts/directives/ittYoutubeEmbed.js source}
	 * @requires $timeout
	 * @requires $scope
	 * @requires iTT.service:youTubePlayerManager
	 * @requires youtubeSvc
	 * @param {String} embedUrl The URL to the youtube video
	 * @param {Function=} onPlayerStateChange Callback used to control player state
	 * @param {Function=} onPlayerQualityChange Callback used to change player quality
	 * @param {Function=} onReady Callback fired when YT instance is ready
	 * @param {Boolean} mainPlayer Set to false for embed players
	 * @param {String} playerId ID, either main video asset ID or event ID, used to set PID of YT Instance inside _players Object
	 * @example
	 * <pre>
	 *     //for the main player
	 *     <itt-youtube embed-url="path/to/url" main-player="true" player-id="<ID>"></itt-youtube>
	 * </pre>
	 */
	angular.module('com.inthetelling.story')
		.directive('ittYoutube', ittYoutube)
		.controller('ittYoutubeCtrl', ittYoutubeCtrl);

	function ittYoutube() {
		return {
			restrict: 'EA',
			template: '<div id="{{ittYoutubeCtrl.embedId}}"></div>',
			scope: {
				embedUrl: '@',
				onPlayerStateChange: '=?',
				onPlayerQualityChange: '=?',
				onReady: '=?',
				mainPlayer: '&',
				playerId: '&'
			},
			controller: 'ittYoutubeCtrl',
			controllerAs: 'ittYoutubeCtrl',
			bindToController: true
		};
	}

	function ittYoutubeCtrl($timeout, $scope, youTubePlayerManager, youtubeSvc) {
		var _ctrl = this;  //jshint ignore:line
		_ctrl.isMainPlayer = _ctrl.mainPlayer();
		_ctrl.ytVideoID = youtubeSvc.extractYoutubeId(_ctrl.embedUrl);
		var _playerId = _ctrl.playerId();

		if (_ctrl.onPlayerStateChange === undefined) {
			_ctrl.onPlayerStateChange = angular.noop;
		}

		if (_ctrl.onReady === undefined) {
			_ctrl.onReady = angular.noop;
		}

		if (_ctrl.onPlayerQualityChange === undefined) {
			_ctrl.onPlayerQualityChange = angular.noop;
		}

		youTubePlayerManager.setPlayerId(_playerId, _ctrl.mainPlayer())
			.then(function(divId) {
				_ctrl.embedId = divId;

				$timeout(function() {
					youTubePlayerManager.create(divId, _playerId, _ctrl.ytVideoID, _ctrl.onPlayerStateChange, _ctrl.onPlayerQualityChange, _ctrl.onReady);
				}, 0);
			});


		$scope.$on('$destroy', function() {
			youTubePlayerManager.destroy(_ctrl.embedId);
		});
	}
	ittYoutubeCtrl.$inject = ["$timeout", "$scope", "youTubePlayerManager", "youtubeSvc"];

})();

/**
 *
 * Created by githop on 4/21/16.
 */

(function () {
	'use strict';
	/**
	 * @ngdoc directive
	 * @name iTT.directive:ittValidateUrl
	 * @restrict 'EA'
	 * @scope
	 * @description
	 * Directive used on url inputs to allow custom validation
	 * @requires $q
	 * @requires ngModel
	 * @requires errorSvc
	 * @requires youtubeSvc
	 * @requires ittUtils
	 * @requires dataSvc
	 * @param {Object} item The item that the url we are validating belongs to
	 * @example
	 * <pre>
	 *     <input type="url" itt-validate-url item="item"/>
	 * </pre>
	 */
	angular.module('com.inthetelling.story')
		.directive('ittValidItemUrl', ittValidItemUrl);

	function ittValidItemUrl($q, errorSvc, youtubeSvc, ittUtils, dataSvc) {
		return {
			require: '?ngModel',
			scope: {
				item: '='
			},
			link: function link(scope, elm, attrs, ngModel) {
				var _separateTabNotice = 'This link will be displayed in a separate tab.';
				if (ngModel) {
					console.log('tigger validation', ngModel);
					scope.item.urlForm = ngModel;
					validateUrl();
				}

				function validateUrl() {
					//always consider mixedContent url 'valid' but notify user
					ngModel.$validators.mixedContent = function (modelVal, viewVal) {
						if (viewVal.match(/^http:\/\//)) {
							errorSvc.notify(_separateTabNotice);
							console.log("resolving mixed content!", viewVal);
						}
						return true;
					};

					ngModel.$validators.url = function (modelVal, viewVal) {
						if (ngModel.$isEmpty(viewVal)) {
							errorSvc.notify('URL is a required field.');
							return false;
						}

						if (ittUtils.isValidURL(viewVal) || /mailto:/.test(viewVal)) {
							scope.item.noEmbed = false;
							scope.item.tipText = undefined;
							return true;
						} else {
							if (viewVal !== 'https://') {
								errorSvc.notify(viewVal + ' is not a valid URL.');
							}
							return false;
						}
					};

					ngModel.$asyncValidators.xFrameOpts = function (modelVal, viewVal) {
						//bail out if empty or link to youtube
						if (ngModel.$isEmpty(viewVal) || youtubeSvc.isYoutubeUrl(viewVal) || /mailto:/.test(viewVal)) {
							return $q(function (resolve) { resolve(); });
						}

						return dataSvc.checkXFrameOpts(viewVal)
							.then(function (noEmbed) {
								scope.item.noEmbed = noEmbed;
								if (noEmbed) {
									scope.item.tipText = 'Link embed is disabled because ' + viewVal + ' does not allow iframing';
									scope.item.showInlineDetail = false;
									errorSvc.notify(_separateTabNotice);
								}
							});
					};
				}
			}
		};
	}
	ittValidItemUrl.$inject = ["$q", "errorSvc", "youtubeSvc", "ittUtils", "dataSvc"];


})();

/**
 * Created by githop on 6/15/16.
 */

(function () {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittRouteLoading', ittRouteLoading);

	function ittRouteLoading() {
		return {
			restrict: 'EA',
			template: [
				'<div ng-if="routeLoadingCtrl.isLoading" class="loading routeLoading">',
				'	<div class="spinner">',
				'		<div class="rotating pie"></div>',
				'		<div class="filler pie"></div>',
				'		<div class="mask"></div>',
				'	</div><span class="loading__text">Loading</span>',
				'</div>'
			].join(' '),
			controller: ['$rootScope', '$scope', '$timeout', 'errorSvc',
				function ($rootScope, $scope, $timeout, errorSvc) {
					var ctrl = this;
					ctrl.isLoading = false;
					var threshold;

					$rootScope.$on('$routeChangeStart', function () {
						threshold = $timeout(function () {
							ctrl.isLoading = true;
						}, 500);
					});

					$rootScope.$on('$routeChangeSuccess', function () {
						$timeout.cancel(threshold);
						ctrl.isLoading = false;
					});

					$rootScope.$on('$locationChangeSuccess', function() {
						$timeout.cancel(threshold);
						ctrl.isLoading = false;
					});

					$rootScope.$on('$routeChangeError', function () {
						$timeout.cancel(threshold);
						ctrl.isLoading = false;
					});

					//do not show loading indicator
					//when we have errors
					$scope.$watch(function () {
						return errorSvc.errors.length;
					}, function (newVal, oldVal) {
						if (newVal !== oldVal && newVal > 0) {
							$timeout.cancel(threshold);
							ctrl.isLoading = false;
						}
					});
				}],
			controllerAs: 'routeLoadingCtrl',
			bindToController: true
		};
	}


})();

/**
 * Created by githop on 6/24/16.
 */
(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittValidUrl', ittValidUrl);

	function ittValidUrl(ittUtils) {
	    return {
			require: '?ngModel',
			link: function(scope, elm, attr, ngModel) {
				if (ngModel) {
					ngModel.$validators.supportUrl = function(modelVal) {
						return ngModel.$isEmpty(modelVal) || ittUtils.isValidURL(modelVal);
					};
				}
			}
	    };
	}
	ittValidUrl.$inject = ["ittUtils"];

})();

'use strict';

/* 
	The "add" buttons for instructors to choose what type of content they want to add to the episode.

	TODO make this smarter about when it shows buttons; for example instead of matching against appState.time,
	look for current scene.id matching "internal".  Dim buttons instead of hiding them completely.

*/

angular.module('com.inthetelling.story')
	.directive('sxsAddContent', ["appState", function (appState) {
		return {
			restrict: 'A',
			replace: true,
			scope: {},
			//template: '<div ng-include="item.templateUrl"></div>',
			templateUrl: 'templates/producer/addcontent.html',
			controller: 'EditController',
			link: function (scope) {

				scope.appState = appState;

				scope.expand = function () {
					scope.expanded = true;
					angular.element(document).one('mouseup.addcontent', function () {
						scope.collapse();
					});
				};

				scope.collapse = function () {
					scope.expanded = false;
				};

			}

		};
	}]);

'use strict';

/*For form fields: displays m:ss, sets model as number of seconds. accepts s or m:ss as input. */

angular.module('com.inthetelling.story')
	.directive('sxsInputTime', ["appState", "$rootScope", "$timeout", "modelSvc", "timelineSvc", function (appState, $rootScope, $timeout, modelSvc, timelineSvc) {
		return {
			// require: 'ngModel',
			scope: {
				item: '=sxsInputTime',
			},
			templateUrl: 'templates/producer/inputtime.html',
			link: function (scope, elem, attrs) {

				scope.parse = function (data) {
					// console.log("Converting view ", data, " to model");
					var ret;
					if (data === undefined || data === '') {
						ret = appState.time;
					} else if (isNaN(data)) {
						var mss = data.split(':');
						if (mss.length === 2) {
							if (isNaN(mss[0])) {
								mss[0] = 0;
							}
							if (isNaN(mss[1])) {
								mss[1] = 0;
							}
							ret = (Number(mss[0]) * 60 + Number(mss[1]));
						} else {
							ret = appState.time;
						}
					} else {
						ret = data;
					}
					// HACK First scene is bumped a bit after the landing screen...
					if (ret < 0.01) {
						ret = 0.01;
					}
					$rootScope.$emit('searchReindexNeeded'); // HACK
					return ret;
				};

				scope.format = function (data) {
					// convert model value to view value
					// in a way which is not completely borken, for a change
					// srsly how was that even working before
					var mins = Math.floor(data / 60);
					var secs = Math.round((data % 60) * 100) / 100;
					if (secs < 10) {
						secs = "0" + secs;
					}
					return mins + ":" + secs;
				};

				/* These are from back when I was cargo-culting using ngModel directly:
				ngModel.$parsers.push(function toModel(data) {
					return scope.parse(data);
				});

				ngModel.$formatters.push(function toView(data) {
					return scope.format(data);
				});
				*/

				scope.fieldname = angular.copy(attrs.inputField); // start_time or end_time
				scope.realValue = angular.copy(scope.item[attrs.inputField]); // internal representation of the selected time.  Don't parse or format this, it causes rounding errors
				scope.model = scope.format(scope.realValue); // user input
				scope.appState = appState;
				// console.log("initing inputTime: ", scope.realValue, scope.model);

				scope.scene = (scope.item.type === 'Scene') ? scope.item : modelSvc.events[scope.item.scene_id];
				if (scope.item._type === 'Scene') {
					scope.scene = function () {
						return scope.item;
					};
				} else {
					scope.scene = function () {
						return modelSvc.sceneAtEpisodeTime(scope.item.cur_episode_id, appState.time);
					};
				}

				// TODO this will break in multi-episode timelines
				var episodeDuration = modelSvc.episodes[scope.item.cur_episode_id].masterAsset.duration;

				// Watch for user input, send it to item if different
				scope.$watch(function () {
					return scope.parse(scope.model);
				}, function (t) {
					scope.setTime(t);

					// Stop questions should always have the same start + end
					if (attrs.inputField === 'start_time' && scope.item.stop) {
						scope.item.end_time = t;
					}

				});

				scope.nudge = function (amt) {
					// keep the tooltip panel open:
					$timeout.cancel(tooltipHider);
					elem.find('.inputfield').focus();

					// This ends up triggering setTime twice (it changes scope.model, which triggers the $watch)  Oh Well
					var diff = amt / 30; // pretend 1 frame is always 1/30s for now
					scope.setTime(scope.item[attrs.inputField] + diff);
					if (attrs.inputField === 'start_time') {
						timelineSvc.seek(scope.item[attrs.inputField] + diff);
					}
				};

				scope.setTime = function (t) { // pass in parsed values only!
					// Validation:
					if (t < 0) {
						t = 0;
					}
					if (t > episodeDuration) {
						t = episodeDuration;
					}
					if (scope.item.stop) {
						scope.item.end_time = t;
					}
					scope.realValue = t;
					scope.item[attrs.inputField] = scope.realValue;
					scope.model = scope.format(t);

					scope.item.invalid_end_time = (scope.item.start_time > scope.item.end_time);

				};

				var tooltipHider;
				scope.showTools = function (x) {
					if (x) {
						scope.tooltip = true;
					} else {
						// allow time for clicks before we unload the thing being clicked on:
						tooltipHider = $timeout(function () {
							scope.tooltip = false;
						}, 300);
					}
				};

				scope.isTranscript = function () {
					// TODO
					return false;
				};

			}
		};
	}]);

'use strict';

/* 
TODO: make sure newly added annotators wind up in hte episode.annotators list
TODO: disentangle annotator_image_id from this, move it into parent template
*/

angular.module('com.inthetelling.story')
	.directive('sxsAnnotatorAutocomplete', ["modelSvc", "$timeout", "appState", function (modelSvc, $timeout, appState) {
		return {
			require: 'ngModel',
			templateUrl: "templates/producer/annotator-autocomplete.html",
			scope: {
				annotators: "=sxsAnnotatorAutocomplete",
				item: "=item"
			},
			link: function (scope, element, attrs, ngModelController) {

				scope.appState = appState;
				scope.hasAnnotator = function () {
					return Object.keys(scope.item.annotator).length > 0;
				};

				// look up the annotator images
				angular.forEach(scope.annotators, function (annotator) {
					if (annotator.annotation_image_id) {
						annotator.imageUrl = modelSvc.assets[annotator.annotation_image_id].url;
					}
				});

				// the form value we'll ultimately want to return
				scope.annotator = {
					name: scope.item.annotator
				};

				if (scope.annotators[scope.item.annotator] && scope.annotators[scope.item.annotator].annotation_image_id) {
					scope.annotator.imageUrl = modelSvc.assets[scope.annotators[scope.item.annotator].annotation_image_id].url;
				}

				scope.filteredAnnotators = angular.copy(scope.annotators);
				scope.preselectedItem = -1;

				element.find('.annotatorChooser').bind("keydown", function (event) {
					switch (event.which) {
					case 40: // down arrow
						scope.preselectedItem = (scope.preselectedItem + 1) % Object.keys(scope.filteredAnnotators).length;
						break;
					case 38: // up arrow
						scope.preselectedItem = (scope.preselectedItem - 1) % Object.keys(scope.filteredAnnotators).length;
						break;
					case 13: // enter
						event.preventDefault();
						if (scope.preselectedItem > -1) {
							scope.selectByIndex(scope.preselectedItem);
						}
						break;
					default:
					}
				});

				// TODO destroy langWatcher when unlinking

				scope.handleAutocomplete = function () {
					scope.annotator.name = '';
					if (scope.searchText) {

						scope.preselectedItem = -1;
						var newFilter = {};
						angular.forEach(scope.annotators, function (annotator) {
							// console.log(annotator.key.toLowerCase().indexOf(scope.searchText.toLowerCase()) > -1, annotator.key.toLowerCase(), scope.searchText.toLowerCase());
							if (annotator.key.toLowerCase().indexOf(scope.searchText.toLowerCase()) > -1) {
								newFilter[annotator.key] = annotator;
							}
						});

						scope.filteredAnnotators = newFilter;
						// if only one left, select it automatically
						if (Object.keys(scope.filteredAnnotators).length === 1) {
							scope.preselectedItem = 0;
						}
					} else {
						// empty searchText, show all autocomplete options
						scope.filteredAnnotators = angular.copy(scope.annotators);
						scope.preselectedItem = -1;
					}

				};

				scope.selectByIndex = function (index) {
					if (index < 0) {
						return;
					}
					var names = Object.keys(scope.filteredAnnotators).sort();
					scope.select(scope.filteredAnnotators[names[index]]);
				};

				scope.select = function (annotator) {
					// console.log("Selected ", annotator);
					scope.preselectedItem = -1;

					if (annotator.annotation_image_id) {
						scope.item.annotation_image_id = annotator.annotation_image_id;
						scope.item.asset = modelSvc.assets[annotator.annotation_image_id];
						scope.annotator.imageUrl = scope.item.asset.url;
					} else {
						// TODO allow adding new image
						delete scope.annotator.imageUrl;
						delete scope.item.asset;
					}

					ngModelController.$setViewValue(annotator.name); // passes annotator name back to item
					scope.searchText = '';

					//TODO  allow upload to replace image
				};

				scope.autoCompleting = false;
				scope.showAutocomplete = function () {
					var inputField = element.find('.annotatorChooser')[0];
					inputField.setSelectionRange(0, inputField.value.length);
					scope.autoCompleting = true;
				};

				scope.hideAutocomplete = function () {
					$timeout(function () {
						if (scope.preselectedItem > -1) {
							scope.selectByIndex(scope.preselectedItem);
						} else {
							// doesn't match an existing name, so...
							if (scope.searchText !== '') {
								scope.addNewAnnotator();
							}
						}
						scope.autoCompleting = false;
					}, 300);
				};

				scope.addNewAnnotator = function () {
					var annotatorName = scope.searchText; // TODO sanitize me!!!
					scope.item.annotator = {};
					scope.item.annotator[appState.lang] = annotatorName;
					scope.searchText = "";

					scope.handleAutocomplete();

					// var newAnnotator = {
					// 	"name": {
					// 		"en": annotatorName // make sure we have something consistent to key against
					// 	},
					// 	"imageUrl": "",
					// 	"annotation_image_id": false
					// };
					// if (appState.lang !== 'en') {
					// 	newAnnotator.name[appState.lang] = annotatorName;
					// }
					// console.log(newAnnotator);

					// // make available in future transcript edits
					// // TODO shoudl this happen now? or wait until save?
					// scope.annotators[annotatorName] = angular.copy(newAnnotator);
					// console.log(scope.annotators);

					// scope.annotator = angular.copy(newAnnotator);
					// delete scope.annotator.imageUrl;

					// ngModelController.$setViewValue(newAnnotator);

				};

				scope.uploadAnnotatorImage = function () {
					window.alert("TODO");
					// For replacing existing annotator thumbnails, do we need to go through every transcript node with that speaker and replace its annotator ID? TODO check with Bill how he ahndles that in old authoring

				};
			}
		};
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.directive('sxsInputI18n', ["appState", "$timeout", "textAngularManager", function (appState, $timeout, textAngularManager) {
		return {
			templateUrl: 'templates/producer/inputi18n.html',
			scope: {
				field: "=sxsInputI18n",
				inputtype: "=inputtype"
			},
			link: function (scope, el, attrs) {
				if (!scope.field) {
					// need to init the object if it's empty
					scope.field = {
						en: ""
					};
				}
				scope.appState = appState;

				if (scope.inputtype === 'textarea') {
					// textAngular needs some extra magic for autofocus:
					scope.textangularname = "ta" + new Date().getUTCMilliseconds() + "y" + Math.random().toString(16);

					$timeout(function () { // wait for DOM
						if (attrs.autofocus !== undefined) {
							var editorScope = textAngularManager.retrieveEditor(scope.textangularname).scope;
							editorScope.displayElements.text.trigger('focus');
						}
					});

					scope.trim = function () {
						// Let's prevent users from throwing extra whitespace at beginning and end:
						var txt = scope.field[appState.lang];
						if (!txt) {
							return;
						}
						console.log("BEFORE", txt);

						// yay regexp parsing of html my favorite thing to do
						txt = txt.replace(/<br\/>/g, '<br>'); // no xml-style tags

						// Replacing lots of complicated regexps with this brute force (we don't want user-input spans or divs anyway.)
						txt = txt.replace(/<div>/g, '<br>');
						txt = txt.replace(/<\/?(span|div)>/g, '');
						txt = txt.replace(/(<br>)*$/, ''); // kill extra linebreaks at end of entered text

						console.log("AFTER", txt);
						scope.field[appState.lang] = txt;
					};

					scope.sanitizePastedHtml = function (pasted) {
						// Strip out all markup from pasted content (to keep those addicted to MS Word from shooting themselves in the foot)
						var frag = document.createElement("div");
						frag.innerHTML = pasted;
						return frag.textContent;
					};

				}
			}
		};
	}]);

'use strict';

/* 

No sneaky changing the tab order or number of tabs after init allowed. 

Possibly boneheaded parts of this: 

	- jQuery (.find())
	- depends on magic classNames 'cur' and 'ittTab'  
	- depends on the directive user to keep track of tabindex :P

TODO: allow different html layouts in ittTab (right now this is just for the producer edit pane)

How to use:

<div class="ittTabs" itt-tabs>
	<div class="ittTab" itt-tab="tabs[0]" x-tabindex="0" x-tablabel="Label 1">
	Tab contents 1
	</div>
	<div class="ittTab cur" itt-tab="tabs[1]" x-tabindex="1" x-tablabel="Label 2">
	Tab contents 2 (Note that you can force this to start as the visible tab by giving it class 'cur')
	</div>
	<div class="ittTab" itt-tab="tabs[2]" x-tabindex="2" x-tablabel="Label 3">
	Tab contents 3
	</div>
</div>


*/

angular.module('com.inthetelling.story')
	.directive('ittTabs', function () {
		return {
			restrict: 'A',
			replace: true,
			link: function (scope, element) {
				scope.tabs = [];
				var hasCur = false;
				var tabNodes = element.find('.ittTab');
				for (var i = 0; i < tabNodes.length; i++) {
					scope.tabs[i] = ($(tabNodes[i]).hasClass('cur'));
					if (scope.tabs[i]) {
						hasCur = true;
					}
				}
				if (!hasCur) {
					scope.tabs[0] = true;
				}

				/* -- */

				scope.tab = function (tab) {
					for (var i = 0; i < tabNodes.length; i++) {
						scope.tabs[i] = false;
					}
					scope.tabs[tab] = true;
				};
			}
		};
	})
	.directive('ittTab', function () {
		return {
			restrict: 'A',
			replace: false,
			transclude: true,
			scope: {
				isCur: "=ittTab"
			},
			template: '<div><div class="ittTabLabel" ng-class="{cur: isCur}"><a ng-click="$parent.tab(tabindex)">{{tablabel}}</a></div><div class="ittTabContents" ng-show="isCur" ng-transclude></div></div>',
			link: function (scope, element, attrs) {
				scope.tablabel = attrs.tablabel;
				scope.tabindex = attrs.tabindex;
			}
		};
	});

'use strict';

angular.module('com.inthetelling.story')
	.controller("ContainerAssetsTestController", ["$scope", "$routeParams", function ($scope, $routeParams) {
		$scope.containerId = $routeParams.containerId;
	}])
	/* WARN I badly misnamed this; it's used in  producer.  TODO eliminate the sxs prefix, it never made sense anyway */
	.directive('sxsContainerAssets', ["$routeParams", "$rootScope", "recursionHelper", "dataSvc", "modelSvc", "awsSvc", "appState", function ($routeParams, $rootScope, recursionHelper, dataSvc, modelSvc, awsSvc, appState) {
		return {
			restrict: 'A',
			replace: false,
			scope: {
				containerId: "=sxsContainerAssets"
			},
			templateUrl: 'templates/producer/container-assets.html',

			compile: function (element) {
				// Use the compile function from the recursionHelper,
				// And return the linking function(s) which it returns
				return recursionHelper.compile(element, function (scope) {
					scope.appState = appState;

					if (modelSvc.containers[scope.containerId]) {
						// console.log("Container already loaded");
						scope.container = modelSvc.containers[scope.containerId];
						if (!scope.container.assetsHaveLoaded) {
							// console.log("Assets had not loaded, getting them");
							dataSvc.getContainerAssets(scope.containerId);
						}
					} else {
						// console.log("Getting container");
						dataSvc.getContainer(scope.containerId).then(function () {
							// console.log("Getting assets");
							scope.container = modelSvc.containers[scope.containerId];
							dataSvc.getContainerAssets(scope.containerId);
						});
					}

					scope.assets = modelSvc.assets; // this is going to be a horrible performance hit isn't it.  TODO: build asset array inside each container in modelSvc instead?
					scope.uploadStatus = [];
					scope.up = function () {
						scope.showParent = true;
					};

					scope.toggleImages = function () {
						scope.onlyImages = !scope.onlyImages;
					};
					scope.toggleGrid = function () {
						scope.gridView = !scope.gridView;
					};

					scope.assetClick = function (assetId) {
						console.log("User clicked on asset ", assetId);
						$rootScope.$emit("UserSelectedAsset", assetId);
					};

					scope.uploadAsset = function (fileInput) {
						var files = fileInput.files;
						//Start the upload status out at 0 so that the
						//progress bar renders correctly at first
						scope.uploadStatus[0] = {
							"bytesSent": 0,
							"bytesTotal": 1
						};
						scope.uploads = awsSvc.uploadContainerFiles(scope.containerId, files);
						scope.uploads[0].then(function (data) {
							modelSvc.cache("asset", data.file);
							fileInput.value = '';
							delete scope.uploads;
						}, function (data) {
							console.log("FAIL", data);
						}, function (update) {
							scope.uploadStatus[0] = update;
						});
					};
				});
			}
		};
	}]);

'use strict';

angular.module('com.inthetelling.story')
	.directive('ittAssetUploader', ittAssetUploader);

function ittAssetUploader($timeout, awsSvc, appState, modelSvc) {
	return {
		restrict: 'A',
		replace: false,
		scope: {
			containerId: '=ittAssetUploader', // If no container ID is supplied, the uploaded asset(s) will be placed in user space instead.
			callback: '=callback', // function that will be called for each uploaded file (with the newly cretaed asset's ID)
			mimeTypes: '@',
			instructions: '@',
			errorText: '@'
		},
		templateUrl: 'templates/producer/asset-uploader.html',
		link: function (scope, element, attrs) {

			function strStartsWith(str, prefix) {
				return str.indexOf(prefix) === 0;
			}

			function strEndsWith(str, match) {
				return str.substring(str.length - match.length, str.length) === match;
			}

			if (scope.instructions === undefined) {
				scope.manPage = 'We support uploads of most common file formats, including .doc, .docx, .jpeg, .jpg, .pdf, .png, .ppt, .pptx, .rtf, .txt, and .zip. ';
			} else {
				scope.manPage = scope.instructions;
			}

			var _mimeTypes;
			if (scope.mimeTypes === undefined) {
				//allow basically doc, image, or video.
				_mimeTypes = ['application/*', 'image/*', 'video/*', 'text/*', 'audio/*', 'model/*'];
			} else {
				_mimeTypes = scope.mimeTypes.split(',');
			}

			var _errorText;
			if (scope.errorText === undefined) {
				_errorText = 'Whoops!, you may want to try that again!';
			} else {
				_errorText = scope.errorText;
			}

			//normalize passed in params
			angular.forEach(_mimeTypes, function (m, i) {
				_mimeTypes[i] = m.trim();
			});

			scope.uploadStatus = [];
			scope.uploads = [];
			scope.uploadsinprogress = 0;
			scope.multiple = (attrs.multiple !== undefined);

			scope.handleUploads = function (files) {

				if (!scope.multiple) {
					if (files.length > 1 || scope.uploads.length > 0) {
						scope.errormessage = "You may only upload one file at a time here.";
						return false;
					}
				}

				//disallow certain file types
				var stop = false;
				//gotta filter
				angular.forEach(files, function (f) {

					angular.forEach(_mimeTypes, function (m) {
						var paramStrEndsWithStar = strEndsWith(m, '*');

						if (paramStrEndsWithStar) {

							var mimeTypeUntilWildcard = m.slice(0, -1);

							var applicationTypesMatch = strStartsWith(f.type, mimeTypeUntilWildcard);

							if (applicationTypesMatch) {
								stop = true;
							}

						} else {
							//only accept identical mimeType?
							if (f.type === m) {
								stop = true;
							}

						}
					});
				});

				if (!stop) {
					scope.errormessage = _errorText;
					return;
				}

				// push these onto the end of the existing uploads array, if any:
				var oldstack = scope.uploads.length;
				var newstack = scope.uploads.length + files.length;
				scope.uploadsinprogress = scope.uploadsinprogress + files.length;
				if (scope.containerId) {
					scope.uploads = scope.uploads.concat(awsSvc.uploadContainerFiles(scope.containerId, files));
				} else {
					scope.uploads = scope.uploads.concat(awsSvc.uploadUserFiles(appState.user._id, files));
				}
				for (var i = oldstack; i < newstack; i++) {
					(function (i) { // closure for i
						scope.uploadStatus[i] = {
							"bytesSent": 0,
							"bytesTotal": 1,
							"percent": 0,
							"name": files[i - oldstack].name
						};
						scope.uploads[i].then(function (data) {
							modelSvc.cache("asset", data.file);
							if (scope.callback) {
								scope.callback(data.file._id);
							}
							scope.uploadStatus[i].done = true;
							scope.oneDone();
						}, function (data) {
							scope.uploadStatus[i].error = data;
							scope.oneDone();
						}, function (update) {
							scope.uploadStatus[i].bytesSent = update.bytesSent;
							scope.uploadStatus[i].bytesTotal = update.bytesTotal;
							scope.uploadStatus[i].percent = Math.ceil(update.bytesSent / update.bytesTotal * 100);
						});
					})(i);
				}
			};

			scope.oneDone = function () {
				scope.uploadsinprogress = scope.uploadsinprogress - 1;
				if (scope.uploadsinprogress === 0) {
					scope.fileinput.value = '';
					scope.paused = false;
				}
			};

			scope.handleDrop = function (e) {
				e.preventDefault();
				e.stopPropagation();
				scope.handleDragLeave();
				scope.handleUploads(e.dataTransfer.files);
			};

			scope.handleDragOver = function (e) {
				e.preventDefault();
				e.dataTransfer.dropEffect = 'move';
				scope.handleDragEnter();
				return false;
			};
			scope.handleDragEnter = function () {
				scope.droptarget.addClass('droppable');

			};
			scope.handleDragLeave = function () {
				scope.droptarget.removeClass('droppable');

			};

			scope.pauseUpload = function () {
				awsSvc.pauseUpload();
				scope.paused = true;
			};

			scope.resumeUpload = function () {
				awsSvc.resumeUpload();
				scope.paused = false;
			};

			scope.cancelUpload = function () {
				awsSvc.cancelUpload();
			};

			$timeout(function () { // need to wait for the DOM
				scope.droptarget = element.find('.uploadDropTarget');
				scope.fileinput = element.find('.uploadFileInput');
				scope.uploadsinprogress = 0;
				scope.droptarget[0].addEventListener('drop', scope.handleDrop);
				scope.droptarget[0].addEventListener('dragover', scope.handleDragOver);
				scope.droptarget[0].addEventListener('dragenter', scope.handleDragEnter);
				scope.droptarget[0].addEventListener('dragleave', scope.handleDragLeave);
			});
		}
	};
}
ittAssetUploader.$inject = ["$timeout", "awsSvc", "appState", "modelSvc"];

/**
 * Created by githop on 6/2/16.
 */
/**
 * Created by githop on 6/1/16.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittModal', ittModal);

	function ittModal() {
		return {
			restrict: 'EA',
			transclude: true,
			scope: {
				modalClass: '@'
			},
			template: [
				'<div class="itt__modal"><div class="{{modalClass}}"><ng-transclude></ng-transclude></div></div>'
			].join(' ')
		};
	}


})();

/**
 * Created by githop on 6/16/16.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittEditPencil', ittEditPencil);

	function ittEditPencil() {
	    return {
	        restrict: 'EA',
			transclude: true,
			scope: {
				canAccess: '=',
				onEdit: '&'
			},
			template: [
				'<div class="pencil__wrapper">',
				'	<div class="wrapped" ng-transclude></div>',
				'	<i class="edit-pencil" ng-click="onEdit()" ng-if="showPencil"></i>',
				'</div>'
			].join(' '),
			link: function(scope, elm) {
				scope.showPencil = false;
				if (scope.canAccess === true) {
					elm.mouseenter(function() {
						scope.$apply(function() {
							scope.showPencil = true;
						});
					});

					elm.mouseleave(function() {
						scope.$apply(function() {
							scope.showPencil = false;
						});
					});
				}
			}
	    };
	}


})();

/**
 * Created by githop on 6/16/16.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittNarrativeEditor', ittNarrativeEditor);

	function ittNarrativeEditor() {
	    return {
	        restrict: 'EA',
			template: [
				'<div class="narrative__edit">',
				'	<form name="nEditForm">',
				'		<div ng-show="nEditor.canAccess">',
				'			<label for="nCustomer">Customer</label><span ng-if="nEditForm.customer.$invalid" class="invalid__field"> Required</span>',
				'			<select id="nCustomer" name="customer" required ng-model="nEditor.selectedCustomer" ng-change="nEditor.selectCustomer(nEditor.selectedCustomer)" ng-options="cust.name for cust in nEditor._customers track by cust._id"></select></br>',
				'		</div>',
				'		<label id="nName">Name of Narrative</label><span ng-if="nEditForm.name.$invalid" class="invalid__field"> Required</span>',
				'		<input for="nName" type="text" name="name" placeholder="Add Narrative Name" ng-model="nEditor._narrative.name.en" required>',
				'		<label for="nDescription">Description</label>',
				'		<textarea id="nDescription" name="description" placeholder="Add a Description" ng-model="nEditor._narrative.description.en"></textarea>',
				'		<label for="nPath">Path</label><span ng-if="nEditForm.path.$invalid" class="invalid__field"> Required</span>',
				'		<input id="nPath" type="text" name="path" placeholder="link-to-narrative" ng-model="nEditor._narrative.path_slug.en" required/>',
				'		<label for="nSupportUrl">Support Url</label><span ng-if="nEditForm.supportUrl.$invalid" class="invalid__field"> Not a valid URL</span>',
				'		<input id="nSupportUrl" type="text" name="supportUrl" itt-valid-url placeholder="link for support" ng-model="nEditor._narrative.support_url"/>',
				'		<label for="nNewWindow">Disable New Window</label>',
				'		<input id="nNewWindow" type="checkbox" ng-model="nEditor._narrative.disable_new_window"/>',
				'		<label for="nDisableNav">Disable Navigation</label>',
				'		<input id="nDisableNav" type="checkbox" ng-model="nEditor._narrative.disable_navigation"/>',
				'		<label for="nGuestAccess">Enable Guest Access</label>',
				'		<input id="nGuestAccess" type="checkbox" ng-model="nEditor._narrative.guest_access_allowed"/>',
				'		<div class="ancillaryNav">',
				'			<button class="done" ng-click="nEditor.handleUpdate(nEditor._narrative)" ng-disabled="nEditForm.$invalid">Save</button>',
				'			<button class="done" ng-click="nEditor.onDone()">Cancel</button>',
				'		</div>',
				'	</form>',
				'</div>'
			].join(' '),
	        scope: {
				narrative: '=',
				customers: '=',
				onDone: '&',
				onUpdate: '&'
			},
			controllerAs: 'nEditor',
			bindToController: true,
			controller: ['ittUtils', 'authSvc', function(ittUtils, authSvc) {
				var ctrl = this;
				//copy to dereference original narrative as we are two-way bound (one way binding available in 1.5)
				ctrl._narrative = angular.copy(this.narrative);
				ctrl._customers = angular.copy(this.customers);
				ctrl.handleUpdate = handleUpdate;
				ctrl.selectCustomer = selectCustomer;
				ctrl.canAccess = authSvc.userHasRole('admin');

				_onInit();

				function _onInit() {
					setCustomer();
				}
				//set selected customer on-change of dropdown select
				function selectCustomer(cust) {
					ctrl.selectedCustomer = cust;
				}

				function handleUpdate(n) {
					//use selected customer from setCustomer() or from drop down select
					if (ittUtils.existy(ctrl.selectedCustomer)) {
						n.customer_id = ctrl.selectedCustomer._id;

					}
					var fields = [
						'name',
						'description',
						'customer_id',
						'guest_access_allowed',
						'path_slug',
						'support_url',
						'disable_navigation',
						'disable_new_window',
						'_id'
					];
					var narrative = ittUtils.pick(n, fields);
					ctrl.onUpdate({n: narrative});
				}

				function setCustomer() {
					if (ctrl._customers.length === 1) {
						ctrl.selectedCustomer = ctrl._customers[0];
					} else {
						if (ittUtils.existy(ctrl._narrative)) {
							ctrl.selectedCustomer = ctrl._customers.filter(function(c) {
								return ctrl._narrative.customer_id === c._id;
							})[0];

						} else {
							ctrl._customers.unshift({ name: 'Select a Customer' });
						}

					}
				}
			}]
		};
	}


})();

/**
 * Created by githop on 6/16/16.
 */

(function() {
	'use strict';

	angular.module('com.inthetelling.story')
		.directive('ittTimelineEditor', ittTimelineEditor);

	function ittTimelineEditor() {
	    return {
	        restrict: 'EA',
			template: [
				'<div class="narrative__edit">',
				'	<form name="tlEditForm">',
				'		<label for="tlName">Name</label><span ng-if="tlEditForm.name.$invalid" class="invalid__field"> Required</span>',
				'		<input type="text" name="name" ng-model="tEditor._timeline.name.en" id="tlName" required>',
				'		<label for="tlDescription">Description</label>',
				'		<textarea id="tlDescription" name="description" placeholder="Insert Description..." ng-model="tEditor._timeline.description.en"></textarea>',
				'		<label for="tlPath">Path</label><span ng-if="tlEditForm.path.$invalid" class="invalid__field"> Required</span>',
				'		<input id="tlPath" type="text" name="path" placeholder="path-to-episode" ng-model="tEditor._timeline.path_slug.en" required>',
				'		<label>Hidden</label>',
				'		<input type="checkbox" ng-model="tEditor._timeline.hidden"/>',
				'		<div class="ancillaryNav">',
				'			<button class="button" ng-disabled="tlEditForm.$invalid" ng-click="tEditor.onUpdate({t: tEditor._timeline})">Save</button>',
				'			<button class="button" ng-click="tEditor.confirmDelete()">Delete</button>',
				'			<button class="button" ng-click="tEditor.onDone()">cancel</button>',
				'		</div>',
				'	</form>',
				'</div>',
				'<itt-modal modal-class="timeline__delete" ng-if="tEditor.underDelete">',
				'		<h2>Are you sure?</h2>',
				'		<p>delete: </p>',
				'		<p class="under__delete"><strong>{{tEditor._timeline.name.en}}?</strong></p>',
				'		<button ng-click="tEditor.onDelete({t: tEditor._timeline})">yes</button>',
				'		<button ng-click="tEditor.underDelete = false">no</button>',
				'</itt-modal>'
			].join(' '),
	        scope: {
				timeline:'=',
				onUpdate: '&',
				onDelete: '&',
				onDone: '&'
			},
			controller: ['ittUtils', function(ittUtils) {
				var ctrl = this;
				var existy = ittUtils.existy;

				ctrl.confirmDelete = confirmDelete;
				ctrl.underDelete = false;

				if (existy(ctrl.timeline) && ctrl.timeline.isTemp === true) {
					ctrl._timeline = ctrl.timeline;
				} else {
					ctrl._timeline = angular.copy(ctrl.timeline);
				}

				function confirmDelete() {
					ctrl.underDelete = true;
				}

			}],
			controllerAs: 'tEditor',
			bindToController: true
	    };
	}


})();
